version: "3"

vars:
    GO_MODULES:
        sh: cat go.work | grep -oEh  '\t+(\./*[^[:space:]]*)' | tr -d '\t'
    GO_ROOT_PKG:
        sh: cat go.mod | grep -oE '^module[^\S]+' | cut -d' ' -f2
    GO_COMMAND: go
    SUPPORTED_ARCHS:
      - arm64
    FORKS:
      - ../console
      - ../go-runc
      - ../ttrpc
      - ../gvisor-tap-vsock
      - ../go-errors
      - ../nerdctl
      - ../containerd
      - ../runc
      - ../vz
    BUILD_OUT_DIR: gen/build

env:
    COMPOSE_BAKE: true
    GOPROXY: 'https://proxy.golang.org'
    GOSUMDB: sum.golang.org
    GOPRIVATE: github.com/walteh
    DOCKER_BUILDKIT: 1
    PAGER: less

tasks:
    go:tidy:
        run: once
        aliases: [go-mod-tidy]
        cmds:
          - for: {var: GO_MODULES}
            cmd: cd {{.ITEM}} && go mod tidy -e

    go:upgrade:
        aliases: [go-mod-upgrade]
        run: once
        cmds:
          - |-
            {{.GO_COMMAND}} tool go-mod-upgrade --force
          - task: go-mod-tidy

    go:update:
        aliases: [go-mod-update]
        requires: {vars: [CLI_ARGS]}
        run: once
        cmds:
          - task: go:tidy
          - for: {var: GO_MODULES}
            cmd: cd {{.ITEM}} && go get -u {{.CLI_ARGS}}
          - task: go:tidy

    go:lint:
        desc: runs the linters
        vars:
            GO_FILES:
                sh: find . -type f -name '*.go' -not -path '*/gen/*' -not -path '*/proto/*'
        cmds:
          - for: {var: GO_FILES}
            cmd: |-
                tmp=$(mktemp); cat {{.ITEM}} | go tool goshim retab > $tmp; mv $tmp {{.ITEM}}
          - cmd: go tool golangci-lint run --fix ./...

    go:test:
        desc: runs the tests
        cmds:
          - cmd: go tool gotestsum go test ./...

    term:
        desc: opens a terminal in the project root
        platforms: [darwin]
        cmds:
          - cmd: open -a Terminal $(pwd)

    otel:tui:run:
        desc: runs the otel tui
        cmds:
          - cmd: otel-tui

    otel:grafana:run:
        desc: runs tempo
        dir: test/integration/grafana
        cmds:
          - cmd: docker compose up -d --build --force-recreate --always-recreate-deps --remove-orphans --renew-anon-volumes
          - cmd: docker compose ps

    zellij:
        desc: opens zellij
        platforms: [darwin]
        cmds:
          - cmd: zellij --config-dir .zellij

    gen:all:
        desc: generates all
        cmds:
          - task: gen:options
          - task: gen:buf
          - task: gen:mockery

    gen:options:
        desc: generates options for structs with '//go:opts' comment
        vars:
            OPTION_GEN_DATA:
                sh: |-
                    grep -rl "//go:opts" --include="*.go" . | xargs -I{} bash -c 'd=$(dirname {}); d=${d#./}; awk -v d="$d {}" '\''/\/\/go:opts/ {getline; if($1=="type") print d, $2}'\'' {}' || true
            OPTION_GEN_SOURCE_FILES:
                sh: |-
                    grep -rl "//go:opts" --include="*.go" . || true
        generates:
          - "**/*_opts.gen.go"
        sources:
          - '{{.OPTION_GEN_SOURCE_FILES | join ","}}'
        cmds:
          - for: {var: OPTION_GEN_DATA, split: "\n"}
            cmd: |-
                set -e
                if [ -z "{{.OPTION_GEN_DATA}}" ]; then echo "no options to generate"; exit 0; fi
                {{.GO_COMMAND}} tool github.com/kazhuravlev/options-gen/cmd/options-gen \
                  -out-filename={{splitList " " .ITEM | first}}/{{ splitList " " .ITEM | last | lower | trimSuffix "opts" }}_opts.gen.go \
                  -filename={{ splitList " " .ITEM | rest | first }} \
                  -from-struct={{ splitList " " .ITEM | last }} \
                  -pkg={{ splitList " " .ITEM | first | splitList "/" | last }}
          - for: {var: OPTION_GEN_DATA, split: "\n"}
            cmd: |-
                go tool golangci-lint run --enable-only goimports --fix {{ splitList " " .ITEM | first }}/{{ splitList " " .ITEM | last | lower | trimSuffix "opts" }}_opts.gen.go
                gofmt -w {{ splitList " " .ITEM | first }}/{{ splitList " " .ITEM | last | lower | trimSuffix "opts" }}_opts.gen.go

    gen:mockery:
        desc: generates mocks for interfaces with '//go:mock' comment
        vars:
            TMP_DIR:
                sh: mktemp -d
            MOCKERY_INTERFACE_DATA:
                sh: |-
                    grep -rl "//go:mock" --include="*.go" . | xargs -I{} sh -c '
                        f="{}"
                        d=$(dirname "$f"); d=${d#./}
                        raw=$(awk "/\/\/go:mock/{getline; if(\$1==\"type\") print \$2}" "$f")
                        name=${raw%%\[*}
                        for i in $name; do echo "$d $f $i"; done' || true
            MOCKERY_SOURCE_FILES:
                sh: |-
                    grep -rl "//go:mock" --include="*.go" . || true
            ALL_MOCKERY_INTERFACE_DATA:
                sh: |-
                    echo "{{.MOCKERY_INTERFACE_DATA}}"
        sources:
          - '{{.MOCKERY_SOURCE_FILES | join ","}}'
          - .mockery.yaml
          - proto/**/*.pb.go
        generates:
          - ./gen/mocks/**/*_mock.gen.go
        cmds:
          - cmd: mkdir -p {{.TMP_DIR}}
          - defer: rm -rf {{.TMP_DIR}}
          - cmd: cp .mockery.yaml {{.TMP_DIR}}/.mockery.yaml

          - for: {var: "ALL_MOCKERY_INTERFACE_DATA", split: "\n", as: ITEM}
            cmd: |-
                set -e
                if [ -z "{{.ITEM}}" ]; then echo "no mockery to generate"; exit 0; fi
                yq -i ".packages.\"{{ .GO_ROOT_PKG }}/{{ splitList " " .ITEM | first }}\".interfaces.{{ splitList " " .ITEM | last }} = {}" {{.TMP_DIR}}/.mockery.yaml
          - cmd: cat {{.TMP_DIR}}/.mockery.yaml
          - cmd: |-
                {{.GO_COMMAND}} tool github.com/vektra/mockery/v3 --config={{.TMP_DIR}}/.mockery.yaml

    gen:buf:
        desc: generates protobuf files
        dir: proto
        sources:
          - '**/*.proto'
          - 'buf.*'
          - '../tools/cmd/**/*.go'
        generates:
          - '**/*.pb.go'
        cmds:
          - |-
            {{.GO_COMMAND}} tool github.com/bufbuild/buf/cmd/buf generate

    install:bindfs:
        env:
            fuse_CFLAGS: "-I/usr/local/include/fuse -D_FILE_OFFSET_BITS=64 -D_DARWIN_C_SOURCE"
            fuse_LIBS: "-L/usr/local/lib -lfuse-t -pthread"
        cmds:
          - git clone https://github.com/mpartel/bindfs.git /tmp/bindfs
          - defer: rm -rf /tmp/bindfs
          - cd /tmp/bindfs && ./autogen.sh
          - cd /tmp/bindfs && ./configure --with-fuse2
          - cd /tmp/bindfs && make
          - cd /tmp/bindfs && sudo make install
          - sudo install_name_tool -add_rpath /usr/local/lib /usr/local/bin/bindfs

    linux:kernel:*:
        label: 'linux:kernel:{{.ARCH}}'
        requires: {vars: [ARCH]}
        desc: builds the kernel
        sources:
          - ./linux/kernel/**
        generates:
          - "./{{.BUILD_OUT_DIR}}/linux_kernel_{{ .ARCH }}/**"
        vars:
            ARCH: "{{index .MATCH 0}}"
            PACKAGE: linux_kernel_{{ .ARCH }}
            OUT_DIR: "{{.BUILD_OUT_DIR}}/{{.PACKAGE}}"
            TMP_DIR:
                sh: mktemp -d
        cmds:
          - defer: rm -rf {{.TMP_DIR}}
          - cmd: mkdir -p {{.TMP_DIR}}
          - |-
            docker buildx build \
                --platform=linux/{{.ARCH}} \
                --target export \
                --output type=local,dest={{.TMP_DIR}} \
                linux/kernel
          - cmd: xz -k {{.TMP_DIR}}/kernel
          - cmd: sha256sum {{.TMP_DIR}}/kernel.xz > {{.TMP_DIR}}/kernel.xz.sha256
          - cmd: sha256sum {{.TMP_DIR}}/config > {{.TMP_DIR}}/config.sha256
          - cmd: rm {{.TMP_DIR}}/kernel
          - cmd: |-
                echo -e "package {{.PACKAGE}}\n\nimport _ \"embed\"\nimport \"github.com/walteh/runm/pkg/binembed\"\n" > {{.TMP_DIR}}/embed.gen.go
                echo -e "//go:embed kernel.xz\nvar BinaryXZ []byte\n" >> {{.TMP_DIR}}/embed.gen.go
                echo -e "const BinaryXZChecksum = \"$(cat {{.TMP_DIR}}/kernel.xz.sha256 | awk '{print $1}')\"\n" >> {{.TMP_DIR}}/embed.gen.go
                echo -e "//go:embed config\n\nvar Config []byte\n" >> {{.TMP_DIR}}/embed.gen.go
                echo -e "const ConfigChecksum = \"$(cat {{.TMP_DIR}}/config.sha256 | awk '{print $1}')\"\n" >> {{.TMP_DIR}}/embed.gen.go
                echo -e "func init() {\n\tbinembed.RegisterXZ(BinaryXZChecksum, BinaryXZ)\n\tbinembed.RegisterRaw(ConfigChecksum, Config)\n}\n" >> {{.TMP_DIR}}/embed.gen.go
          - cmd: go fmt {{.TMP_DIR}}/embed.gen.go
          - cmd: mkdir -p {{.OUT_DIR}}
          - cmd: mv -f {{.TMP_DIR}}/* {{.OUT_DIR}}

    go-build:*:*:*:
        label: 'go-build:{{.NAME}}:{{.OS}}:{{.ARCH}}'
        desc: builds a binary
        vars:
            OS: '{{index .MATCH 1}}'
            ARCH: '{{index .MATCH 2}}'
            NAME: '{{index .MATCH 0}}'
            SYMLINK: '{{.SYMLINK | default ""}}'
            EXTLDFLAGS: '{{.STATIC | eq "1" | ternary "-static" ""}} {{.EXTLDFLAGS}}'
            TAGS: '{{.TAGS}}'
            CMD_DIR:
                sh: test -d ./cmd/{{.NAME}} && echo "./cmd" || echo "./test/integration/cmd"
            LD_FLAGS: |-
                -extldflags={{.EXTLDFLAGS}} {{.DEBUG | eq "1" | ternary "-compressdwarf=false" "-s -w"}} {{.LD_FLAGS}}
            GC_FLAGS: '{{.DEBUG | eq "1" | ternary "all=-N -l" ""}}'
            OUT_DIR: ./gen/build/{{.OS}}_{{.ARCH}}_binaries
            BUILDMODE: '{{.BUILDMODE | default "default"}}'
            BUILD_FLAGS: |-
                -tags="{{.TAGS}}" -ldflags="{{.LD_FLAGS}}" -gcflags="{{.GC_FLAGS}}"  -o {{.OUT_DIR}}/{{.NAME}}
        env:
            CC: '{{.CC | default "clang"}}'
            CGO_ENABLED: '{{.CGO_ENABLED | default "0"}}'
            GOOS: '{{.OS}}'
            GOARCH: '{{.ARCH}}'
            CGO_LDFLAGS: '{{.CC | empty | ternary "-Wl,-no_warn_duplicate_libraries" ""}}' # https://stackoverflow.com/a/78585264/11025621
        generates:
          - '{{.OUT_DIR}}/{{.NAME}}'
        cmds:
          - cmd: go build {{.BUILD_FLAGS}} {{.CMD_DIR}}/{{.NAME}}
          - cmd: if [ "{{.DEBUG}}" != "1" ]; then strip {{.OUT_DIR}}/{{.NAME}}; fi
          - cmd: if [ "{{.CODESIGN}}" = "1" ]; then go tool codesign -target {{.OUT_DIR}}/{{.NAME}} -mode=sign; fi
          - cmd: if [ "{{.SYMLINK}}" != "" ]; then ln -laf {{.OUT_DIR}}/{{.NAME}} {{.OUT_DIR}}/{{.SYMLINK}}; fi

    test:binary:nerdctl-test:
        desc: builds the nerdctl test
        sources:
          - ./test/integration/**/*.go
          - ./../nerdctl/**/*.go
          - ./pkg/**/*.go
        cmds:
          - task: go-build:nerdctl-test:darwin:arm64
            vars:
                DEBUG: '1'

    test:binary:containerd-test:
        desc: builds the containerd test
        sources:
          - ./test/integration/**/*.go
          - ./../containerd/**/*.go
          - ./pkg/**/*.go
        cmds:
          - task: go-build:containerd-test:darwin:arm64
            vars:
                DEBUG: '1'

    test:binary:containerd-shim-runm-v2:
        desc: builds the containerd shim
        sources:
          - "**/*.go"
          - "../containerd/**/*.go"
          - "../go-runc/**/*.go"
        cmds:
          - task: go-build:containerd-shim-runm-v2:darwin:arm64
            vars:
                DEBUG: '1'
                CGO_ENABLED: '1'

    test:binary:containerd-shim-runm-v2-test:
        desc: builds the containerd shim test
        sources:
          - "**/*.go"
          - "../containerd/**/*.go"
          - "../go-runc/**/*.go"
        cmds:
          - task: go-build:containerd-shim-runm-v2-test:darwin:arm64
            vars:
                DEBUG: '1'
                CGO_ENABLED: '1'

    test:binary:runm-linux-init:
        desc: builds the runm-linux-init binary
        sources:
          - "**/*.go"
          - "../containerd/**/*.go"
          - "../go-runc/**/*.go"
        cmds:
          - task: go-build:runm-linux-init:linux:arm64
            vars:
                DEBUG: '1'
                STATIC: '1'

    test:binary:runm-linux-host-fork-exec-proxy:
        desc: builds the runm-linux-host-fork-exec-proxy binary
        sources:
          - "**/*.go"
        cmds:
          - task: go-build:runm-linux-host-fork-exec-proxy:linux:arm64
            vars:
                DEBUG: '1'
                STATIC: '1'

    test:binary:runm-linux-mounter:
        desc: builds the runm-linux-mounter binary
        sources:
          - "**/*.go"
        cmds:
          - task: go-build:runm-linux-mounter:linux:arm64
            vars:
                DEBUG: '1'
                STATIC: '1'

    test:binary:runc-test:
        desc: builds the runc binary
        sources:
          - "../runc/**/*.go"
          - "pkg/**/*.go"
          - "test/integration/**/*.go"
        vars:
            GIT_COMMIT:
                sh: git rev-parse HEAD
        cmds:
          - task: go-build:runc-test:linux:arm64
            vars:
                DEBUG: '1'
                STATIC: '1'
                LD_FLAGS: -X main.gitCommit={{.GIT_COMMIT}}
                TAGS: netgo osusergo
                CC: aarch64-linux-gnu-gcc
                CGO_ENABLED: 1

    test:binaries:
        deps:
          - test:binary:containerd-test
          - test:binary:nerdctl-test
          - test:binary:runc-test
          - test:binary:containerd-shim-runm-v2-test
          - test:binary:runm-linux-init
          - test:binary:runm-linux-host-fork-exec-proxy
          - test:binary:runm-linux-mounter
        desc: builds all test binaries

    linux:kernel:
        desc: builds the kernel
        cmds:
          - for: {var: SUPPORTED_ARCHS}
            task: linux:kernel:{{.ITEM}}

    linux:initramfs:*:
        label: 'linux:initramfs:{{.ARCH}}'
        requires: {vars: [ARCH]}
        desc: builds the initramfs
        sources:
          - ./linux/initramfs/**
        generates:
          - ./gen/build/initramfs_{{ .ARCH }}/**
        vars:
            ARCH: "{{index .MATCH 0}}"
            PACKAGE: linux_initramfs_{{ .ARCH }}
            OUT_DIR: ./gen/build/{{.PACKAGE}}
            TMP_DIR:
                sh: mktemp -d
        cmds:
          - defer: rm -rf {{.TMP_DIR}}
          - cmd: mkdir -p {{.TMP_DIR}}
          - cmd: mkdir -p {{.TMP_DIR}}/forks
          - for: {var: FORKS}
            cmd: rsync -a --exclude='vendor/' --exclude='tmp/' --exclude='.git/' {{.ITEM}} {{.TMP_DIR}}/forks/
          - |-
            docker buildx build \
                --platform=linux/{{.ARCH}} \
                --target export \
                --build-arg WORKDIR_REMAP=$(dirname $(pwd)) \
                --output type=local,dest={{.TMP_DIR}} \
                --build-context=runm=. \
                --build-context=go-path=$(go env GOPATH) \
                --build-context=forks={{.TMP_DIR}}/forks \
                linux/initramfs
          - cmd: xz -k {{.TMP_DIR}}/initramfs.cpio.gz
          - cmd: sha256sum {{.TMP_DIR}}/initramfs.cpio.gz.xz > {{.TMP_DIR}}/initramfs.cpio.gz.xz.sha256
          - cmd: rm {{.TMP_DIR}}/initramfs.cpio.gz
          - cmd: |-
                echo -e "package {{.PACKAGE}}\n\nimport _ \"embed\"\nimport \"github.com/walteh/runm/pkg/binembed\"\n" > {{.TMP_DIR}}/embed.gen.go
                echo -e "//go:embed initramfs.cpio.gz.xz\nvar BinaryXZ []byte\n" >> {{.TMP_DIR}}/embed.gen.go
                echo -e "const BinaryXZChecksum = \"$(cat {{.TMP_DIR}}/initramfs.cpio.gz.xz.sha256 | awk '{print $1}')\"\n" >> {{.TMP_DIR}}/embed.gen.go
                echo -e "func init() {\n\tbinembed.RegisterXZ(BinaryXZChecksum, BinaryXZ)\n}\n" >> {{.TMP_DIR}}/embed.gen.go
          - cmd: go fmt {{.TMP_DIR}}/embed.gen.go
          - cmd: mkdir -p {{.OUT_DIR}}
          - cmd: rm -rf {{.TMP_DIR}}/forks
          - cmd: mv -f {{.TMP_DIR}}/* {{.OUT_DIR}}

    linux:initramfs:
        desc: builds the initramfs
        cmds:
          - for: {var: SUPPORTED_ARCHS}
            task: linux:initramfs:{{.ITEM}}

    linux:vf:*:
        label: 'linux:vf:{{.ARCH}}'
        requires: {vars: [ARCH]}
        desc: builds the vf
        vars:
            ARCH: "{{index .MATCH 0}}"
            KERNEL_DIR: "{{.BUILD_OUT_DIR}}/linux_kernel_{{ .ARCH }}"
            INITRAMFS_DIR: "{{.BUILD_OUT_DIR}}/linux_initramfs_{{ .ARCH }}"
            OUT_DIR: "{{.BUILD_OUT_DIR}}/linux_vf_{{ .ARCH }}"
            TMP_DIR:
                sh: mktemp -d
        cmds:
          - task: linux:kernel:{{.ARCH}}
          - task: linux:initramfs:{{.ARCH}}
          - cmd: mkdir -p {{.TMP_DIR}} {{.OUT_DIR}}
          - defer: rm -rf {{.TMP_DIR}}
          - cmd: cp {{.KERNEL_DIR}}/kernel.xz {{.TMP_DIR}}/kernel.xz
          - cmd: cp {{.INITRAMFS_DIR}}/initramfs.cpio.gz.xz {{.TMP_DIR}}/initramfs.cpio.gz.xz
          - cmd: cp {{.INITRAMFS_DIR}}/mbin.squashfs {{.TMP_DIR}}/mbin.squashfs
          - cmd: unxz {{.TMP_DIR}}/kernel.xz
          - cmd: unxz {{.TMP_DIR}}/initramfs.cpio.gz.xz
          - cmd: mv -f {{.TMP_DIR}}/kernel {{.OUT_DIR}}/kernel
          - cmd: mv -f {{.TMP_DIR}}/initramfs.cpio.gz {{.OUT_DIR}}/initramfs.cpio.gz
          - cmd: mv -f {{.TMP_DIR}}/mbin.squashfs {{.OUT_DIR}}/mbin.squashfs

    linux:vf-offline:*:
        label: 'linux:vf-offline:{{.ARCH}}'
        requires: {vars: [ARCH]}
        desc: builds the vf-offline
        deps:
          - linux:binaries:{{.ARCH}}
          - darwin:binaries:{{.ARCH}}
        sources:
          - ./gen/build/linux_vf_{{ .ARCH }}/**
          - '**/*.go'
        generates:
          - ./gen/build/linux_vf_offline_{{ .ARCH }}/**
        vars:
            ARCH: "{{index .MATCH 0}}"
            VF_DIR: "{{.BUILD_OUT_DIR}}/linux_vf_{{ .ARCH }}"
            OUT_DIR: "{{.BUILD_OUT_DIR}}/linux_vf_offline_{{ .ARCH }}"
            TMP_DIR:
                sh: mktemp -d
        cmds:
          - defer: rm -rf {{.TMP_DIR}}
          - cmd: mkdir -p {{.TMP_DIR}} {{.TMP_DIR}}/initramfs {{.TMP_DIR}}/mbin {{.OUT_DIR}}

          - cmd: cp {{.VF_DIR}}/initramfs.cpio.gz {{.TMP_DIR}}/initramfs.cpio.gz
          - cmd: mkdir -p {{.TMP_DIR}}/initramfs
          - cmd: cd {{.TMP_DIR}}/initramfs && (cpio -idm < {{.TMP_DIR}}/initramfs.cpio.gz)

          - cmd: cp {{.VF_DIR}}/mbin.squashfs {{.TMP_DIR}}/mbin.squashfs
          - cmd: unsquashfs  -d {{.TMP_DIR}}/mbin {{.TMP_DIR}}/mbin.squashfs

          - cmd: mksquashfs {{.TMP_DIR}}/mbin/* {{.TMP_DIR}}/mbin-new.squashfs -quiet
          - cmd: cd {{.TMP_DIR}}/initramfs && find . -print0 | cpio --null -o --format=newc > {{.TMP_DIR}}/initramfs-new.cpio
          - cmd: gzip -1 -q {{.TMP_DIR}}/initramfs-new.cpio

          - cmd: cp {{.VF_DIR}}/kernel {{.OUT_DIR}}/kernel
          - cmd: cp {{.TMP_DIR}}/initramfs-new.cpio.gz {{.OUT_DIR}}/initramfs.cpio.gz
          - cmd: cp {{.TMP_DIR}}/mbin-new.squashfs {{.OUT_DIR}}/mbin.squashfs

    linux:all:
        desc: builds all linux components
        cmds:
          - task: linux:kernel
          - task: linux:initramfs

    dev:kill-existing-processes:
        desc: kills all running containers
        vars:
            NAMES:
              - containerd-shim-runm-v2
              - containerd-shim-runc-v2
              - nerdctl-test
        cmds:
          - for: {var: NAMES}
            cmd: (sudo -A pkill -f {{.ITEM}} || true) && (sudo -A killall -9 {{.ITEM}} || true)

    dev:nerdctl-test:run:
        desc: runs the nerdctl test
        vars:
            TIMEOUT: '{{.TIMEOUT | empty | ternary "" "timeout {{.TIMEOUT}}"}}'
            IMAGE: '{{.IMAGE | default "docker.io/library/alpine:latest"}}'
            ARGS: '{{.ARGS | default "echo ''hello world!''"}}'
            DETACHED: '{{.DETACHED | default ""}}'
        cmds:
          - task: dev:kill-existing-processes
          - task: darwin:binaries:arm64
          - cmd: |-
                {{.TIMEOUT}} sudo -A -E ./gen/build/darwin_binaries_arm64/nerdctl-test run \
                    --platform=linux/arm64 \
                    --network=host \
                    --runtime=containerd.shim.runc.v2 \
                    --pull=missing \
                    {{.DETACHED | empty | ternary "--rm" "-d"}} \
                    {{.IMAGE}} \
                    {{.ARGS}}

    dev:2025-06-18:01:
        desc: runs the shim for 2025-06-18
        env:
            LINUX_RUNTIME_BUILD_DIR:
                sh: realpath ./gen/build/linux_vf_arm64
        cmds:
          - task: dev:kill-existing-processes
          - task: linux:vf-offline:arm64
          - cmd: |-
                timeout 20s sudo -A -E go tool goshim run -codesign -log-file-to-append-in=.logs/containerd.log ./test/integration/cmd/nerdctl-test run \
                    --platform=linux/arm64 \
                    --network=host \
                    --runtime=containerd.shim.runc.v2 \
                    --pull=missing \
                    --rm \
                    docker.io/oven/bun:alpine \
                    --version

    dev:2025-07-02:01:
        desc: runs the shim for 2025-07-02 - complex TypeScript compilation and execution
        env:
            LINUX_RUNTIME_BUILD_DIR:
                sh: realpath ./gen/build/linux_vf_arm64
        vars:
            SCENARIO_DIR:
                sh: realpath ./test/integration/scenarios/2025-07-02
        cmds:
          - task: dev:kill-existing-processes
          - task: linux:vf-offline:arm64

          # Run the complex scenario using the prepared scenario directory
          - cmd: |-
                timeout 300s sudo -A -E go tool goshim run -codesign -log-file-to-append-in=.logs/containerd.log ./test/integration/cmd/nerdctl-test run \
                    --platform=linux/arm64 \
                    --network=host \
                    --runtime=containerd.shim.runc.v2 \
                    --pull=missing \
                    --rm \
                    --workdir=/app \
                    --mount=type=bind,src={{.SCENARIO_DIR}},dst=/app \
                    docker.io/oven/bun:alpine \
                    sh -c "echo '📦 Installing dependencies...' && bun install && echo '🧪 Running tests...' && bun test && echo '🔨 Building project...' && bun run build && echo '🏃 Running compiled app...' && bun run start"
    dev:2025-07-03:01:
        desc: runs the shim for 2025-07-03 - simple error return
        env:
            LINUX_RUNTIME_BUILD_DIR:
                sh: realpath ./gen/build/linux_vf_arm64
        vars:
            SCENARIO_DIR:
                sh: realpath ./test/integration/scenarios/2025-07-02
        cmds:
          - task: dev:kill-existing-processes
          - task: linux:vf-offline:arm64

          # Run the complex scenario using the prepared scenario directory
          - cmd: |-
                timeout 300s sudo -A -E go tool goshim run -codesign -log-file-to-append-in=.logs/containerd.log ./test/integration/cmd/nerdctl-test run \
                    --platform=linux/arm64 \
                    --network=host \
                    --runtime=containerd.shim.runc.v2 \
                    --pull=missing \
                    --rm \
                    docker.io/alpine:latest \
                    sh -c "echo 'hi' && exit 42"

    containerd:2025-07-01:01:
        desc: runs the shim for 2025-07-01
        cmds:
          - task: dev:kill-existing-processes
          - task: test:binary:containerd-test
          - cmd: sudo -A ./gen/build/darwin_binaries_arm64/containerd-test

    claude:
        desc: runs the claude agent
        cmds:
          - cmd: bunx --bun @anthropic-ai/claude-code

    setup:
        desc: sets up the environment
        cmds:
          - task: fork:sync

    fork:sync:
        desc: syncs the forks
        dir: ../
        vars:
            FORKS:
              - branch: main
                repo: "github.com/Code-Hex/vz"

              - branch: main
                repo: "github.com/walteh/containerd"

              - branch: main
                repo: "github.com/walteh/nerdctl"

              - branch: main
                repo: "github.com/walteh/gvisor-tap-vsock"

              - branch: main
                repo: "github.com/walteh/tint"

              - branch: main
                repo: "github.com/walteh/buildkit"

              - branch: main
                repo: "github.com/walteh/ttrpc"

              - branch: main
                repo: "github.com/walteh/nerdctl"

        cmds:
          - for: {var: FORKS}
            cmd: git clone {{.ITEM.repo}} --depth 1 && git fetch origin {{.ITEM.branch}} && git checkout {{.ITEM.branch}}

    signoz:git:
        desc: sets up the git repository for the signoz agent
        vars:
            DIR: ./gen/build/signoz-standalone/signoz
        status:
          - test -d {{.DIR}}/.git.sub
        cmds:
          - cmd: rm -rf {{.DIR}}
          - cmd: mkdir -p {{.DIR}}
          - cmd: git clone -b main https://github.com/SigNoz/signoz.git {{.DIR}} --depth 1;
          - cmd: mv -f {{.DIR}}/.git {{.DIR}}/.git.sub

    signoz:stop:
        desc: kills all signoz processes
        dir: ./gen/build/signoz-standalone/signoz
        status:
          - test -d ./deploy/docker
          - cd ./deploy/docker && docker compose ps | grep -vqz signoz
        cmds:
          - cmd: cd ./deploy/docker && docker compose down -v

    signoz:start:
        desc: starts the signoz agent
        dir: ./gen/build/signoz-standalone/signoz
        cmds:
          - task: signoz:git
          - task: signoz:stop
          - cmd: git --git-dir=.git.sub pull
          - cmd: cd ./deploy && sudo -A ./install.sh
            # go build -tags="netgo osusergo" -ldflags="-extldflags=-static -X main.gitCommit=81e1ea710f323d9310dfd85b731e894184e1bcbd" -o ./gen/build/linux_binaries_arm64/runc-test ./test/integration/cmd/runc-test
            #  go build -tags="netgo osusergo" -ldflags="-compressdwarf=false -X main.gitCommit=81e1ea710f323d9310dfd85b731e894184e1bcbd -extldflags=-static " -gcflags="all=-N -l" -buildmode=default -o ./gen/build/linux_arm64_binaries/runc-test ./test/integration/cmd/runc-test
