version: "3"

vars:
    GO_MODULES:
        sh: cat go.work | grep -oEh  '\t+(\./*[^[:space:]]*)' | tr -d '\t'
    GO_ROOT_PKG:
        sh: cat go.mod | grep -oE '^module[^\S]+' | cut -d' ' -f2
    GO_COMMAND: go
    SUPPORTED_ARCHS:
      - arm64
    FORKS:
      # replace (
      # 	github.com/Code-Hex/vz/v3 => ../vz
      # 	github.com/containerd/console => ../console
      # 	github.com/containerd/containerd/api => ../containerd/api
      # 	github.com/containerd/containerd/v2 => ../containerd
      # 	github.com/containerd/containerd/v2/pkg/sys => ../containerd/pkg/sys
      # 	github.com/containerd/go-runc => ../go-runc
      # 	github.com/containerd/nerdctl/mod/tigron => ../nerdctl/mod/tigron
      # 	github.com/containerd/nerdctl/v2 => ../nerdctl
      # 	github.com/containerd/ttrpc => ../ttrpc
      # 	github.com/containers/gvisor-tap-vsock => ../gvisor-tap-vsock
      # 	github.com/moby/buildkit => ../buildkit
      # 	github.com/opencontainers/runc => ../runc
      # 	github.com/tonistiigi/fsutil => ../fsutil
      # 	gitlab.com/tozd/go/errors => ../go-errors
      # )
      - branch: main
        repo: "github.com/Code-Hex/vz"
        upstream: "github.com/Code-Hex/vz"
        path: "../vz"

      - branch: main
        repo: "github.com/walteh/ttrpc"
        upstream: "github.com/containerd/ttrpc"
        path: "../ttrpc"

      - branch: main
        repo: "github.com/walteh/containerd"
        upstream: "github.com/containerd/containerd"
        path: "../containerd"

      - branch: main
        repo: "github.com/walteh/nerdctl"
        upstream: "github.com/containerd/nerdctl"
        path: "../nerdctl"

      - branch: main
        repo: "github.com/walteh/runc"
        upstream: "github.com/opencontainers/runc"
        path: "../runc"

      - branch: main
        repo: "github.com/walteh/gvisor-tap-vsock"
        upstream: "github.com/containers/gvisor-tap-vsock"
        path: "../gvisor-tap-vsock"

      - branch: master
        repo: "github.com/walteh/buildkit"
        upstream: "github.com/moby/buildkit"
        path: "../buildkit"

      - branch: main
        repo: "github.com/walteh/ttrpc"
        upstream: "github.com/containerd/ttrpc"
        path: "../ttrpc"

      - branch: main
        repo: "github.com/walteh/console"
        upstream: "github.com/containerd/console"
        path: "../console"

      - branch: main
        repo: "github.com/walteh/go-runc"
        upstream: "github.com/containerd/go-runc"
        path: "../go-runc"

      - branch: main
        repo: "github.com/walteh/go-errors"
        upstream: "gitlab.com/tozd/go/errors"
        path: "../go-errors"

      - branch: main
        repo: "github.com/walteh/fsutil"
        upstream: "github.com/tonistiigi/fsutil"
        path: "../fsutil"

      - branch: main
        repo: "github.com/walteh/ttrpc"
        upstream: "github.com/containerd/ttrpc"
        path: "../ttrpc"

      - branch: main
        repo: "github.com/walteh/task"
        upstream: "github.com/go-task/task"
        path: "../task"

    BUILD_OUT_DIR: gen/build
    TEST_BIN_DIR: ./gen/build/test-bin
    LINUX_RUNTIME_DIR: ./gen/build/linux-runtime
    CLAUDE_FLOW_PROJECT_DIR: .claude/claude-flow
    NERDCTL_CMD: '{{.SUDO_CMD}} {{.TEST_BIN_DIR}}/nerdctl-test'
    # NERDCTL_CMD: 'docker'
    SUDO_CMD: '' # 'sudo -A -E'

env:
    COMPOSE_BAKE: true
    GOPROXY: 'https://proxy.golang.org'
    GOSUMDB: sum.golang.org
    GOPRIVATE: github.com/walteh
    CODE_EDITOR_FILE_REF_PREFIX: cursor://file/
    # OTEL_EXPORTER_OTLP_ENDPOINT: localhost:4317
    DOCKER_BUILDKIT: 1
    PAGER: less
    DEBUG_CONTAINERD_TEST: 0
    DEBUG_BUILDKITD_TEST: 0
    DEBUG_NERDCTL_TEST: 0
    DEBUG_CONTAINERD_SHIM_RUNM_V2_TEST:
        sh: mkdir -p /tmp/tcontainerd-fs-env && echo '0' | tee /tmp/tcontainerd-fs-env/DEBUG_CONTAINERD_SHIM_RUNM_V2_TEST

tasks:
    #=================================================================================
    #=================================================================================
    #=================================================================================
    #region MISC
    #=================================================================================
    #=================================================================================
    #=================================================================================
    claude:
        desc: runs the claude agent
        vars:
            CLI_ARGS:
                sh: echo "{{.CLI_ARGS | default ""}}"

        cmds:
          - cmd: bun install -g @anthropic-ai/claude-code
          - cmd: bun --bun run claude --ide {{.CLI_ARGS}}

    term:
        desc: opens a terminal in the project root
        platforms: [darwin]
        cmds:
          - cmd: open -a Terminal $(pwd)

    otel:tui:run:
        desc: runs the otel tui
        cmds:
          - cmd: otel-tui

    otel:grafana:run:
        desc: runs tempo
        dir: test/integration/grafana
        cmds:
          - cmd: docker compose up -d --build --force-recreate --always-recreate-deps --remove-orphans --renew-anon-volumes
          - cmd: docker compose ps

    zellij:
        desc: opens zellij
        platforms: [darwin]
        cmds:
          - cmd: zellij --config-dir .zellij

    #endregion

    #=================================================================================
    #=================================================================================
    #=================================================================================
    #region GO
    #=================================================================================
    #=================================================================================
    #=================================================================================

    go:tidy:
        run: once
        aliases: [go-mod-tidy]
        cmds:
          - for: {var: GO_MODULES}
            cmd: cd {{.ITEM}} && go mod tidy -e

    go:upgrade:
        aliases: [go-mod-upgrade]
        run: once
        cmds:
          - cmd: go tool go-mod-upgrade --force
          - task: go-mod-tidy

    go:update:
        aliases: [go-mod-update]
        requires: {vars: [CLI_ARGS]}
        run: once
        cmds:
          - task: go:tidy
          - for: {var: GO_MODULES}
            cmd: cd {{.ITEM}} && go get -u {{.CLI_ARGS}}
          - task: go:tidy

    go:lint:
        desc: runs the linters
        vars:
            GO_FILES:
                sh: find . -type f -name '*.go' -not -path '*/gen/*' -not -path '*/proto/*'
        cmds:
          - for: {var: GO_FILES}
            cmd: |-
                tmp=$(mktemp); cat {{.ITEM}} | go tool goshim retab > $tmp; mv $tmp {{.ITEM}}
          - cmd: go tool golangci-lint run --fix ./...

    go:test:
        desc: runs the tests
        vars:
            ARGS: '{{.CLI_ARGS | default "./..."}}'
        cmds:
          - cmd: go tool goshim test -function-coverage {{.ARGS}}

    #endregion

    #=================================================================================
    #=================================================================================
    #=================================================================================
    #region GENERATE
    #=================================================================================
    #=================================================================================
    #=================================================================================

    gen:all:
        desc: generates all
        cmds:
          - task: gen:options
          - task: gen:buf
          - task: gen:mockery

    gen:options:
        desc: generates options for structs with '//go:opts' comment
        vars:
            OPTION_GEN_DATA:
                sh: |-
                    go tool findcodetag --tag=//go:opts --type=struct .
            OPTION_GEN_SOURCE_FILES:
                sh: |-
                    grep -rl "//go:opts" --include="*.go" . || true
        generates:
          - "**/*_opts.gen.go"
        sources:
          - '{{.OPTION_GEN_SOURCE_FILES | join ","}}'
        cmds:
          - for: {var: OPTION_GEN_DATA, split: "\n"}
            cmd: |-
                set -e
                if [ -z "{{.OPTION_GEN_DATA}}" ]; then echo "no options to generate"; exit 0; fi
                STRUCT_NAME="{{ splitList " " .ITEM | last }}"
                if [[ ! "$STRUCT_NAME" == *"Opts" ]]; then
                  echo "Error: Struct '$STRUCT_NAME' must have 'Opts' suffix for options generation"
                  exit 1
                fi
                {{.GO_COMMAND}} tool github.com/kazhuravlev/options-gen/cmd/options-gen \
                  -out-filename={{splitList " " .ITEM | first}}/{{ splitList " " .ITEM | last | lower | trimSuffix "opts" }}_opts.gen.go \
                  -filename={{ splitList " " .ITEM | rest | first }} \
                  -from-struct={{ splitList " " .ITEM | last }} \
                  -out-setter-name={{ splitList " " .ITEM | last | trimSuffix "Opts" }}Opt \
                  -constructor=private \
                  -all-variadic \
                  -public-getters \
                  -pkg={{ splitList " " .ITEM | first | splitList "/" | last }}
          - for: {var: OPTION_GEN_DATA, split: "\n"}
            cmd: |-
                gofmt -w {{ splitList " " .ITEM | first }}/{{ splitList " " .ITEM | last | lower | trimSuffix "opts" }}_opts.gen.go

    gen:mockery:
        desc: generates mocks for interfaces with '//go:mock' comment
        vars:
            TMP_DIR:
                sh: mktemp -d
            MOCKERY_INTERFACE_DATA:
                sh: |-
                    go tool findcodetag . --tag=//go:mock --type=interface
            MOCKERY_SOURCE_FILES:
                sh: |-
                    grep -rl "//go:mock" --include="*.go" . || true
            ALL_MOCKERY_INTERFACE_DATA:
                sh: |-
                    echo "{{.MOCKERY_INTERFACE_DATA}}"
        sources:
          - '{{.MOCKERY_SOURCE_FILES | join ","}}'
          - .mockery.yaml
          - proto/**/*.pb.go
        generates:
          - ./gen/mocks/**/*_mock.gen.go
        cmds:
          - cmd: mkdir -p {{.TMP_DIR}}
          - defer: rm -rf {{.TMP_DIR}}
          - cmd: cp .mockery.yaml {{.TMP_DIR}}/.mockery.yaml

          - for: {var: "ALL_MOCKERY_INTERFACE_DATA", split: "\n", as: ITEM}
            cmd: |-
                set -e
                if [ -z "{{.ITEM}}" ]; then echo "no mockery to generate"; exit 0; fi
                yq -i ".packages.\"{{ .GO_ROOT_PKG }}/{{ splitList " " .ITEM | first }}\".interfaces.{{ splitList " " .ITEM | last }} = {}" {{.TMP_DIR}}/.mockery.yaml
          - cmd: cat {{.TMP_DIR}}/.mockery.yaml
          - cmd: |-
                {{.GO_COMMAND}} tool github.com/vektra/mockery/v3 --config={{.TMP_DIR}}/.mockery.yaml

    gen:buf:
        desc: generates protobuf files
        dir: proto
        sources:
          - '**/*.proto'
          - 'buf.*'
          - '../tools/cmd/**/*.go'
        generates:
          - '**/*.pb.go'
        cmds:
          - |-
            {{.GO_COMMAND}} tool github.com/bufbuild/buf/cmd/buf generate

    #endregion

    #=================================================================================
    #=================================================================================
    #=================================================================================
    #region BUILD
    #=================================================================================
    #=================================================================================
    #=================================================================================

    build:go:*:*:*:
        label: 'build:go:{{.NAME}}:{{.OS}}:{{.ARCH}}'
        requires: {vars: []}
        desc: builds a binary
        vars:
            OS: '{{index .MATCH 1}}'
            ARCH: '{{index .MATCH 2}}'
            NAME: '{{index .MATCH 0}}'
            BIN_DIR: '{{.TEST_BIN_DIR}}'
            SYMLINK: '{{.SYMLINK | default ""}}'
            EXTLDFLAGS: '{{.STATIC | eq "1" | ternary "-static" ""}} {{.EXTLDFLAGS}}'
            TAGS: '{{.TAGS}}'
            CMD_DIR:
                sh: test -d ./cmd/{{.NAME}} && echo "./cmd" || echo "./test/integration/cmd"
            LD_FLAGS: |-
                -extldflags={{.EXTLDFLAGS}} {{.DEBUG | eq "1" | ternary "-compressdwarf=false" "-s -w"}} {{.LD_FLAGS}}
            GC_FLAGS: '{{.DEBUG | eq "1" | ternary "all=-N -l" ""}}'
            OUT_DIR: '{{.BIN_DIR | default "./gen/build/{{.OS}}_{{.ARCH}}_binaries"}}'
            BUILDMODE: '{{.BUILDMODE | default "default"}}'
            CGO_ENABLED: '{{.CGO_ENABLED | default "0"}}'

            # Build flags with Go 1.25 improvements
            ASAN_FLAG: |-
                {{.ASAN | default .DEBUG | eq "1" | and (.CGO_ENABLED | eq "1") | and (.CC | eq "clang") | ternary "-asan" ""}}
            RACE_FLAG: |-
                {{.RACE | default .DEBUG | eq "1" | and (.ASAN | ne "1") | and (.CGO_ENABLED | eq "1") | and (.CC | eq "clang") | ternary "-race" ""}}

            BUILD_FLAGS: |-
                -mod=mod -tags="{{.TAGS}}" -ldflags="{{.LD_FLAGS}}" -gcflags="{{.GC_FLAGS}}" {{.ASAN_FLAG}} {{.RACE_FLAG}} -o="{{.OUT_DIR}}/{{.NAME}}"

        env:
            CC: '{{.CC | default "clang"}}'
            CGO_ENABLED: '{{.CGO_ENABLED}}'
            GOOS: '{{.OS}}'
            GOARCH: '{{.ARCH}}'
            CGO_LDFLAGS: '{{.CC | empty | ternary "-Wl,-no_warn_duplicate_libraries" ""}}' # https://stackoverflow.com/a/78585264/11025621
            # Go 1.25 environment variables
            GOEXPERIMENT: |-
                greenteagc,jsonv2
            GOWORK: 'off'

            ASAN_OPTIONS: '{{.ASAN_OPTIONS}}'
        generates:
          - '{{.OUT_DIR}}/{{.NAME}}'
        cmds:
          - cmd: go build {{.BUILD_FLAGS}} {{.CMD_DIR}}/{{.NAME}}
          - cmd: if [ "{{.DEBUG}}" != "1" ]; then strip {{.OUT_DIR}}/{{.NAME}}; fi
            silent: true
          - cmd: |-
                if [ "{{.CODESIGN}}" = "1" ]; then cd ./tools && go tool codesign -target ../{{.OUT_DIR}}/{{.NAME}} -quiet -mode=sign --force --entitlement=com.apple.security.virtualization; fi
            silent: true
          - cmd: if [ "{{.SYMLINK}}" != "" ]; then ln -laf {{.OUT_DIR}}/{{.NAME}} {{.OUT_DIR}}/{{.SYMLINK}}; fi
            silent: true

    build:buildctl-test:
        desc: builds the buildctl test
        run: once
        sources:
          - test/integration/**
          - ../buildkit/**
          - pkg/**
        generates:
          - '{{.TEST_BIN_DIR}}/buildctl-test'
        cmds:
          - task: build:go:buildctl-test:darwin:arm64
            vars:
                DEBUG: '1'
                BIN_DIR: '{{.TEST_BIN_DIR}}'

    build:nerdctl-test:
        desc: builds the nerdctl test
        run: once
        sources:
          - test/integration/**
          - ../nerdctl/**
          - pkg/**
        generates:
          - '{{.TEST_BIN_DIR}}/nerdctl-test'
        cmds:
          - task: build:go:nerdctl-test:darwin:arm64
            vars:
                DEBUG: '1'
                BIN_DIR: '{{.TEST_BIN_DIR}}'

    build:buildkitd-test:
        desc: builds the buildkitd test binary
        run: once
        sources:
          - test/integration/**
          - ../buildkit/**
          - pkg/**
        generates:
          - '{{.TEST_BIN_DIR}}/buildkitd-test'
        cmds:
          - task: build:go:buildkitd-test:darwin:arm64
            vars:
                DEBUG: '1'
                BIN_DIR: '{{.TEST_BIN_DIR}}'

    build:containerd-test:
        desc: builds the containerd test
        run: once
        sources:
          - ./test/integration/**/*.go
          - ./../containerd/**/*.go
          - ./pkg/**/*.go
        generates:
          - '{{.TEST_BIN_DIR}}/containerd-test'
        cmds:
          - task: build:go:containerd-test:darwin:arm64
            vars:
                DEBUG: '1'
                BIN_DIR: '{{.TEST_BIN_DIR}}'

    build:containerd-shim-runm-v2:
        desc: builds the containerd shim
        run: once
        sources:
          - "**/*.go"
          - "../containerd/**/*.go"
          - "../go-runc/**/*.go"
        generates:
          - '{{.TEST_BIN_DIR}}/containerd-shim-runm-v2'
        cmds:
          - task: build:go:containerd-shim-runm-v2:darwin:arm64
            vars:
                DEBUG: '1'
                CGO_ENABLED: '1'
                BIN_DIR: '{{.TEST_BIN_DIR}}'

    build:containerd-shim-runm-v2-test:
        desc: builds the containerd shim test
        run: once
        sources:
          - "./**/*.go"
          - "../containerd/**/*.go"
          - "../go-runc/**/*.go"
        generates:
          - '{{.TEST_BIN_DIR}}/containerd-shim-runm-v2-test'
        cmds:
          - task: build:go:containerd-shim-runm-v2-test:darwin:arm64
            vars:
                DEBUG: '1'
                CGO_ENABLED: '1'
                CODESIGN: '1'
                BIN_DIR: '{{.TEST_BIN_DIR}}'

    build:runm-linux-init:
        desc: builds the runm-linux-init binary
        run: once
        sources:
          - "**/*.go"
          - ../containerd/**
          - ../go-runc/**
        generates:
          - '{{.TEST_BIN_DIR}}/runm-linux-init'
        cmds:
          - task: build:go:runm-linux-init:linux:arm64
            vars:
                DEBUG: '1'
                STATIC: '1'
                BIN_DIR: '{{.TEST_BIN_DIR}}'

    build:runm-linux-host-fork-exec-proxy:
        desc: builds the runm-linux-host-fork-exec-proxy binary
        run: once
        sources:
          - "**/*.go"
        generates:
          - '{{.TEST_BIN_DIR}}/runm-linux-host-fork-exec-proxy'
        cmds:
          - task: build:go:runm-linux-host-fork-exec-proxy:linux:arm64
            vars:
                DEBUG: '1'
                STATIC: '1'
                BIN_DIR: '{{.TEST_BIN_DIR}}'

    build:runm-linux-mounter:
        desc: builds the runm-linux-mounter binary
        run: once
        sources:
          - "**/*.go"
        generates:
          - '{{.TEST_BIN_DIR}}/runm-linux-mounter'
        cmds:
          - task: build:go:runm-linux-mounter:linux:arm64
            vars:
                DEBUG: '0'
                STATIC: '1'
                BIN_DIR: '{{.TEST_BIN_DIR}}'

    build:vmfuse-init:
        desc: builds the vmfuse-init binary (Linux guest)
        run: once
        sources:
          - "**/*.go"
          - "proto/vmfuse/**/*.proto"
        generates:
          - '{{.TEST_BIN_DIR}}/vmfuse-init'
        cmds:
          - task: build:go:vmfuse-init:linux:arm64
            vars:
                DEBUG: '1'
                STATIC: '1'
                BIN_DIR: '{{.TEST_BIN_DIR}}'

    build:vmfused:
        desc: builds the vmfused daemon (macOS host)
        run: once
        sources:
          - "**/*.go"
          - "proto/vmfuse/**/*.proto"
        generates:
          - '{{.TEST_BIN_DIR}}/vmfused'
        cmds:
          - task: build:go:vmfused:darwin:arm64
            vars:
                DEBUG: '1'
                CGO_ENABLED: '1'
                CODESIGN: '1'
                BIN_DIR: '{{.TEST_BIN_DIR}}'

    build:vmfusectl:
        desc: builds the vmfusectl CLI client (macOS host)
        run: once
        sources:
          - "**/*.go"
          - "proto/vmfuse/**/*.proto"
        generates:
          - '{{.TEST_BIN_DIR}}/vmfusectl'
        cmds:
          - task: build:go:vmfusectl:darwin:arm64
            vars:
                DEBUG: '1'
                BIN_DIR: '{{.TEST_BIN_DIR}}'

    build:runc-test:
        desc: builds the runc binary
        run: once
        sources:
          - "../runc/**/*.go"
          - "pkg/**/*.go"
          - "test/integration/**/*.go"
        generates:
          - '{{.TEST_BIN_DIR}}/runc-test'
        vars:
            GIT_COMMIT:
                sh: git rev-parse HEAD
        cmds:
          - task: build:go:runc-test:linux:arm64
            vars:
                DEBUG: '1'
                STATIC: '1'
                LD_FLAGS: -X main.gitCommit={{.GIT_COMMIT}}
                TAGS: netgo osusergo
                CC: aarch64-linux-gnu-gcc
                CGO_ENABLED: 1
                BIN_DIR: '{{.TEST_BIN_DIR}}'

    build:busybox:
        desc: builds the busybox binary
        run: once
        sources:
          - ./linux/initramfs/*
        generates:
          - '{{.TEST_BIN_DIR}}/busybox'
        cmds:
          - cmd: |-
                docker buildx build \
                    --platform=linux/arm64 \
                    --progress=plain \
                    --target=busybox-export \
                    --output=type=local,dest={{.TEST_BIN_DIR}} \
                    ./linux/initramfs

    build:ganesha:
        desc: builds the ganesha binary
        run: once
        sources:
          - ./linux/initramfs/*
        generates:
          - '{{.TEST_BIN_DIR}}/ganesha/*'
        cmds:
          - cmd: |-
                docker buildx build \
                    --platform=linux/arm64 \
                    --progress=plain \
                    --file=linux/initramfs/Dockerfile.ganesha \
                    --target=ganesha-staticx-export \
                    --output=type=local,dest={{.TEST_BIN_DIR}} \
                    ./linux/initramfs

    build:all-test-binaries:
        run: once
        deps:
          - build:containerd-test
          - build:nerdctl-test
          - build:runc-test
          - build:containerd-shim-runm-v2-test
          - build:runm-linux-init
          - build:runm-linux-host-fork-exec-proxy
          - build:runm-linux-mounter
          - build:vmfuse-init
          - build:vmfused
          - build:vmfusectl
          - build:busybox
          - build:buildkitd-test
          - build:buildctl-test
        desc: builds all test binaries

    #endregion

    #=================================================================================
    #=================================================================================
    #=================================================================================
    #region RUN
    #=================================================================================
    #=================================================================================
    #=================================================================================
    run:containerd-test:
        desc: runs the shim for 2025-07-01
        deps:
          - linux:runtime:all
          - build:all-test-binaries

        env:
            SHIM_BINARY_PATH:
                sh: echo $(pwd)/{{.TEST_BIN_DIR}}/containerd-shim-runm-v2-test
            LINUX_RUNTIME_DIR:
                sh: echo $(pwd)/{{.LINUX_RUNTIME_DIR}}
        cmds:
          - task: dev:cleanup-running-shims
          - task: dev:cleanup-containerd-processes
          - cmd: |-
                {{.TEST_BIN_DIR}}/containerd-test

    run:buildkitd-test:
        desc: runs the buildkitd test
        deps:
          - linux:runtime:all
          - build:all-test-binaries
        cmds:
          - cmd: |-
                {{.SUDO_CMD}} {{.TEST_BIN_DIR}}/buildkitd-test

    run:containerd-test:pipe-to-file:
        desc: runs the shim for 2025-07-01
        deps:
          - linux:runtime:all
          - build:all-test-binaries
        env:
            SHIM_BINARY_PATH:
                sh: echo $(pwd)/{{.TEST_BIN_DIR}}/containerd-shim-runm-v2-test
            LINUX_RUNTIME_DIR:
                sh: echo $(pwd)/{{.LINUX_RUNTIME_DIR}}
        vars:
            FILE: '{{.CLI_ARGS | default "./.logs/containerd-test-pipe-to-file.log"}}'
        cmds:
          - task: dev:cleanup-running-shims
          - cmd: |-
                {{.SUDO_CMD}} {{.TEST_BIN_DIR}}/containerd-test > {{.FILE}}

    #endregion run

    #=================================================================================
    #=================================================================================
    #=================================================================================
    #region RUN:NERDCTL-TEST
    #=================================================================================

    run:nerdctl-test:rm-all-running-containers:
        desc: kills all running containers
        run: once
        cmds:
          - cmd: |-
                {{.NERDCTL_CMD}} ps -q | xargs -I {} {{.NERDCTL_CMD}} rm -f {}

    run:nerdctl-test:kill:
        desc: kills a running container
        deps: ['build:nerdctl-test', 'build:containerd-shim-runm-v2-test']
        requires: {vars: [CONTAINER_ID]}
        vars:
            CONTAINER_ID: '{{.CONTAINER_ID | default ""}}'
            PRETTY_FORMAT: '{{.STDOUT_FILE | empty | ternary " | bat --language=txt --file-name=nerdctl-kill-stdout" ""}}'
        cmds:
          - cmd: |-
                {{.NERDCTL_CMD}} kill {{.CONTAINER_ID}} {{.PRETTY_FORMAT}}

    run:nerdctl-test:run:
        desc: runs the nerdctl test
        deps: ['build:nerdctl-test', 'build:containerd-shim-runm-v2-test']
        vars:
            TIMEOUT: '{{.TIMEOUT | empty | ternary "" "timeout {{.TIMEOUT}}"}}'
            IMAGE: '{{.IMAGE | default "docker.io/library/alpine:latest"}}'
            ARGS: '{{.ARGS | default "echo ''hello world!''"}}'
            FLAGS: '{{.FLAGS | default ""}}'
            STDOUT_FILE_PIPE: '{{.STDOUT_FILE | empty | ternary "" ">"}}'
            STATIC_FLAGS: '--platform=linux/arm64 --network=host --runtime=containerd.shim.runc.v2 --pull=missing'
        # env:
        # DEBUG_NERDCTL_TEST: '12348'
        cmds:
          - cmd: |-
                {{.TIMEOUT}} {{.NERDCTL_CMD}} run {{.STATIC_FLAGS}} {{.FLAGS}} {{.IMAGE}} {{.ARGS}} {{.STDOUT_FILE_PIPE}} {{.STDOUT_FILE}}

    run:nerdctl-test:exec:
        desc: executes a command in a running container
        deps: ['build:nerdctl-test', 'build:containerd-shim-runm-v2-test']
        requires: {vars: [CONTAINER_ID]}
        vars:
            TIMEOUT: '{{.TIMEOUT | default ""}}'
            TIMEOUT_CMD: '{{.TIMEOUT | empty | ternary "" "timeout"}}'
            CONTAINER_ID: '{{.CONTAINER_ID | default ""}}'
            COMMAND: '{{.COMMAND | default "sh"}}'
            FLAGS: '{{.FLAGS | default "-it"}}'
            PRETTY_FORMAT: |-
                {{.STDOUT_FILE | empty | ternary " | bat --language=txt --file-name=nerdctl-exec-stdout" ""}}

        # interactive: true
        cmds:
          - cmd: |-
                {{.TIMEOUT_CMD}} {{.TIMEOUT}} {{.NERDCTL_CMD}} exec {{.FLAGS}} {{.CONTAINER_ID}} {{.COMMAND}} {{.PRETTY_FORMAT}}

    run:nerdctl-test:stop:
        desc: stops a running container
        deps: ['build:nerdctl-test', 'build:containerd-shim-runm-v2-test']
        requires: {vars: [CONTAINER_ID]}
        vars:
            TIMEOUT: '{{.TIMEOUT | empty | ternary "" "timeout {{.TIMEOUT}}"}}'
            CONTAINER_ID: '{{.CONTAINER_ID | default ""}}'
        cmds:
          - cmd: |-
                {{.TIMEOUT}} {{.NERDCTL_CMD}} stop {{.FLAGS}} {{.CONTAINER_ID}}

    run:nerdctl-test:rm:
        desc: deletes a container
        deps: ['build:nerdctl-test']
        requires: {vars: [CONTAINER_ID]}
        vars:
            CONTAINER_ID: '{{.CONTAINER_ID | default ""}}'
            FLAGS: '{{.FLAGS | default "-f"}}'
        cmds:
          - cmd: |-
                {{.NERDCTL_CMD}} rm {{.FLAGS}} {{.CONTAINER_ID}}

    run:nerdctl-test:ps:
        desc: lists running containers
        deps: ['build:nerdctl-test']
        vars:
            FLAGS: '{{.FLAGS | default ""}}'
            STDOUT_FILE: '{{.STDOUT_FILE | default ""}}'
            STDOUT_FILE_PIPE: '{{.STDOUT_FILE | empty | ternary "" ">"}}'
            PRETTY_FORMAT: '{{.STDOUT_FILE | empty | ternary " | bat --language=txt --file-name=nerdctl-ps-stdout" ""}}'
        cmds:
          - cmd: |-
                {{.NERDCTL_CMD}} ps {{.FLAGS}} {{.STDOUT_FILE_PIPE}} {{.STDOUT_FILE}} {{.PRETTY_FORMAT}}

    run:nerdctl-test:ps:ensure-container:
        desc: ensures a container is running
        deps: ['build:nerdctl-test']
        vars:
            FLAGS: '{{.FLAGS | default ""}}'
            CONTAINER_ID: '{{.CONTAINER_ID | default ""}}'
            STATUS: '{{.STATUS | default "Up"}}'
        cmds:
          - cmd: |-
                {{.NERDCTL_CMD}} ps {{.FLAGS}} | grep $(echo {{.CONTAINER_ID}} | cut -c1-12)  | grep {{.STATUS}} > /dev/null || (echo "container not found in ps output" && exit 1)
            silent: true

    #endregion

    #=================================================================================
    #=================================================================================
    #=================================================================================
    #region LINUX:RUNTIME
    #=================================================================================

    linux:runtime:all:
        desc: builds the linux runtime
        deps: ['linux:runtime:kernel', 'linux:runtime:initramfs', 'linux:runtime:mbins', 'linux:runtime:mbins:vmfuse']

    linux:runtime:mbins:
        desc: builds the mbin squashfs
        deps: ['build:all-test-binaries']
        run: once
        sources:
          - '{{.TEST_BIN_DIR}}/runm-linux-init'
          - '{{.TEST_BIN_DIR}}/runm-linux-host-fork-exec-proxy'
          - '{{.TEST_BIN_DIR}}/runc-test'
        generates:
          - '{{.LINUX_RUNTIME_DIR}}/mbin.squashfs'
        vars:
            TMP_DIR:
                sh: mktemp -d -t runm-linux-runtime-mbin-XXXXXX
            FS:
                map:
                    runm-linux-init: '{{.TEST_BIN_DIR}}/runm-linux-init'
                    runm-linux-host-fork-exec-proxy: '{{.TEST_BIN_DIR}}/runm-linux-host-fork-exec-proxy'
                    runc-test: '{{.TEST_BIN_DIR}}/runc-test'
        cmds:
          - defer: rm -rf {{.TMP_DIR}}
          - cmd: mkdir -p {{.TMP_DIR}}/wrk {{.LINUX_RUNTIME_DIR}}
          - for: {var: FS}
            cmd: mkdir -p $(dirname {{.TMP_DIR}}/wrk/{{.KEY}}) && cp {{.ITEM}} {{.TMP_DIR}}/wrk/{{.KEY}}
            silent: true
          - cmd: cd {{.TMP_DIR}}/wrk && mksquashfs . ../mbin.squashfs -quiet
            silent: true
          - cmd: cp {{.TMP_DIR}}/mbin.squashfs {{.LINUX_RUNTIME_DIR}}/mbin.squashfs
            silent: true

    linux:runtime:mbins:vmfuse:
        desc: builds the mbin squashfs
        deps: ['build:all-test-binaries']
        run: once
        sources:
          - '{{.TEST_BIN_DIR}}/vmfuse-init'
          - '{{.TEST_BIN_DIR}}/ganesha*'
        generates:
          - '{{.LINUX_RUNTIME_DIR}}/mbin-vmfuse.squashfs'
        vars:
            TMP_DIR:
                sh: mktemp -d -t runm-linux-runtime-mbin-vmfuse-XXXXXX
            FS:
                map:
                    vmfuse-init: '{{.TEST_BIN_DIR}}/vmfuse-init'
                    ganesha: '{{.TEST_BIN_DIR}}/ganesha'
                    ganesha-plugins.tar.gz: '{{.TEST_BIN_DIR}}/ganesha-plugins.tar.gz'
        cmds:
          - defer: rm -rf {{.TMP_DIR}}
          - cmd: mkdir -p {{.TMP_DIR}}/wrk {{.LINUX_RUNTIME_DIR}}
          - for: {var: FS}
            cmd: mkdir -p $(dirname {{.TMP_DIR}}/wrk/{{.KEY}}) && cp {{.ITEM}} {{.TMP_DIR}}/wrk/{{.KEY}}
            silent: true
          - cmd: cd {{.TMP_DIR}}/wrk && mksquashfs . ../mbin-vmfuse.squashfs -quiet
            silent: true
          - cmd: cp {{.TMP_DIR}}/mbin-vmfuse.squashfs {{.LINUX_RUNTIME_DIR}}/mbin-vmfuse.squashfs
            silent: true

    linux:runtime:initramfs:
        desc: builds the initramfs
        run: once
        deps: ['build:all-test-binaries']
        sources:
          - '{{.TEST_BIN_DIR}}/busybox'
          - '{{.TEST_BIN_DIR}}/runm-linux-mounter'
        generates:
          - '{{.LINUX_RUNTIME_DIR}}/initramfs.cpio.gz'
        vars:
            TMP_DIR:
                sh: mktemp -d -t runm-linux-runtime-initramfs-XXXXXX
            FS:
                map:
                    /bin/busybox: '{{.TEST_BIN_DIR}}/busybox'
                    /runm-linux-mounter: '{{.TEST_BIN_DIR}}/runm-linux-mounter'
            INIT_SYMLINK: "/runm-linux-mounter"
        cmds:
          - defer: 'rm -rf {{.TMP_DIR}}'
            silent: true
          - cmd: mkdir -p {{.TMP_DIR}}/initramfs {{.LINUX_RUNTIME_DIR}}
          - for: {var: FS}
            cmd: mkdir -p $(dirname {{.TMP_DIR}}/initramfs/{{.KEY}}) && cp {{.ITEM}} {{.TMP_DIR}}/initramfs/{{.KEY}}
          - cmd: cd {{.TMP_DIR}}/initramfs && ln -sf {{.INIT_SYMLINK}} init
          - cmd: ls -lahsr {{.TMP_DIR}}/initramfs
            #   - cmd: echo -e "#!/bin/busybox\nls -lahsr /\n" > {{.TMP_DIR}}/initramfs/init
          - cmd: cd {{.TMP_DIR}}/initramfs && find . -print0 | cpio --null -o --format=newc > {{.TMP_DIR}}/initramfs.cpio
            #   - cmd: chmod +x {{.TMP_DIR}}/initramfs/init
          - cmd: gzip -1 -q {{.TMP_DIR}}/initramfs.cpio
          - cmd: cp {{.TMP_DIR}}/initramfs.cpio.gz {{.LINUX_RUNTIME_DIR}}/initramfs.cpio.gz

    linux:runtime:kernel:
        desc: builds the kernel
        run: once
        sources:
          - ./linux/kernel/**
        generates:
          - "./{{.LINUX_RUNTIME_DIR}}/kernel"
        vars:
            TMP_DIR:
                sh: mktemp -d -t runm-linux-runtime-kernel-XXXXXX
        cmds:
          - defer: 'rm -rf {{.TMP_DIR}}'
            silent: true
          - cmd: mkdir -p {{.TMP_DIR}}
            silent: true
          - cmd: mkdir -p {{.LINUX_RUNTIME_DIR}}
            silent: true
          - |-
            docker buildx build --platform=linux/arm64 --target=export --progress=plain --output=type=local,dest={{.TMP_DIR}} ./linux/kernel
          - cmd: mv -f {{.TMP_DIR}}/* {{.LINUX_RUNTIME_DIR}}
            silent: true

    #endregion linux:runtime

    #=================================================================================
    #=================================================================================
    #=================================================================================
    #region FORKS
    #=================================================================================

    fork:sync:*:
        desc: syncs the forks
        dir: '{{.ITEM.path}}'
        cmds:
          # create the upstream remote if it doesn't exist
          - cmd: git remote add upstream {{.ITEM.upstream}}
          - cmd: git fetch upstream

          - cmd: git checkout {{.ITEM.branch}}
          - cmd: git branch -b backup/$(date +%Y-%m-%d)
          - cmd: git push
          - cmd: git checkout {{.ITEM.branch}}
          - cmd: git rebase upstream/{{.ITEM.branch}} || echo "manual rebase required for {{.ITEM.repo}}" && exit 1
          - cmd: git push origin {{.ITEM.branch}} --force
            # pull the branch

    fork:sync:all:
        desc: syncs the forks
        cmds:
          # first loop thorugh all and if any are dirty throw an error
          - for: {var: FORKS}
            cmd: |-
                cd {{.DIR}} && git checkout {{.ITEM.branch}} && git status --porcelain | grep -q '^M' && echo "{{.DIR}} is dirty" && exit 1
          - for: {var: FORKS}
            task: fork:sync:{{.ITEM.repo}}
            vars:
                DIR: '{{.DIR}}'
                BRANCH: '{{.ITEM.branch}}'
                UPSTREAM: '{{.ITEM.upstream}}'

    #endregion fork:sync

    #=================================================================================
    #=================================================================================
    #=================================================================================
    #region DEV
    #=================================================================================

    dev:kill-process:*:
        label: 'dev:kill-process:{{.NAME}}'
        # internal: true
        desc: kills a process
        vars:
            NAME: '{{index .MATCH 0}}'
        status:
          - ps aux | grep | grep -qv {{.NAME}}
        cmds:
          - defer: '{{if .EXIT_CODE}}echo "{{.TASK_NAME}} exited with code {{.EXIT_CODE}}!"{{end}}'
            silent: true
          - cmd: sudo -A pkill -f {{.NAME}} || true
            silent: true
          - cmd: sudo -A killall -9 {{.NAME}} || true
            silent: true

    dev:cleanup-running-shims:
        desc: kills all running containers
        run: once
        cmds:
          - task: dev:kill-process:containerd-shim-runm-v2-test
          - task: dev:kill-process:containerd-shim-runc-v2
          - task: dev:kill-process:nerdctl-test
          - task: dev:kill-process:com.apple.Virtualization.VirtualMachine

    dev:cleanup-containerd-processes:
        desc: kills all running containers
        run: once
        cmds:
          - task: dev:kill-process:containerd-test
          - task: dev:kill-process:buildkitd-test
          - task: dev:kill-process:dlv
          - cmd: rm /tmp/tcontainerd-persistent/lock.pid || true

    dev:2025-06-18:01:
        desc: runs the shim for 2025-06-18 - bun version from entrypoint
        deps: ['linux:runtime:all']
        vars:
            TEST_SCENARIO_DIR:
                sh: realpath ./test/integration/scenarios/2025-07-02
        cmds:
          - task: dev:cleanup-running-shims
          - task: run:nerdctl-test:run
            vars:
                FLAGS: '-rm'
                IMAGE: 'docker.io/oven/bun:alpine'
                ARGS: |-
                    --version

    dev:2025-07-12:01:
        desc: runs the nerd fonts patcher
        deps: ['linux:runtime:all', 'build:all-test-binaries']
        interactive: true
        vars:
            TMP_DIR:
                sh: mktemp -d -t runm-2025-07-12-XXXXXX
        cmds:
          - cmd: mkdir -p ./tmp/fonts-raw/origin ./tmp/fonts-patched
          - task: run:nerdctl-test:rm-all-running-containers
          - task: run:nerdctl-test:run
            vars:
                IMAGE: 'docker.io/nerdfonts/patcher:latest'
                FLAGS: |-
                    --rm \
                    -v ./tmp/fonts-raw:/in \
                    -v ./tmp/fonts-patched:/out
                ARGS: |-
                    --progressbars \
                        --mono \
                        --adjust-line-height \
                    --fontawesome \
                    --fontawesomeext \
                    --fontlogos \
                    --octicons \
                    --codicons \
                    --powersymbols \
                    --pomicons \
                    --powerline \
                    --powerlineextra \
                    --material \
                    --weather

    dev:compare-nerdctl-docker:single:
        desc: compares the nerdctl and docker commands
        deps: ['linux:runtime:all', 'build:all-test-binaries']
        requires: {vars: [CMD, VOLUME_FLAGS, IMAGE]}
        interactive: true
        vars:
            DOCKER_CMD: docker
            CUSTOM_ENTRYPOINT_FLAG: '{{.CUSTOM_ENTRYPOINT | empty | ternary "" "--entrypoint="}}'
            SH_MODE: '{{.CUSTOM_ENTRYPOINT | eq "/bin/sh" | ternary "1" "0"}}'
            COMMAND_TEMPLATE: |-
                run \
                    --platform=linux/arm64 \
                    --network=host \
                    --runtime=containerd.shim.runc.v2 \
                    --pull=missing \
                    {{.VOLUME_FLAGS}} --rm {{.CUSTOM_ENTRYPOINT_FLAG}}{{.CUSTOM_ENTRYPOINT}} \
                    {{.IMAGE}} \
                    {{.SH_MODE | eq "1" | ternary "-c" " "}} {{.CMD | quote}}
        cmds:
          - cmd: |-
                echo -e - "=================== docker vs nerdctl ==================="
                echo -e "image:      {{.IMAGE}}"
                echo -e "entrypoint: {{.CUSTOM_ENTRYPOINT | empty | ternary "default" .CUSTOM_ENTRYPOINT}}"
                echo -e "command:    {{.CMD}}"
                echo -e "------------------------ nerdctl ------------------------"
                {{.NERDCTL_CMD}} {{.COMMAND_TEMPLATE}} || echo "exit code: $?"
                echo -e "------------------------ docker -------------------------"
                {{.DOCKER_CMD}} {{.COMMAND_TEMPLATE}} || echo "exit code: $?"
                echo -e "========================================================="
                echo -e ""
            # silent: true

    dev:compare-nerdctl-docker:nerd-fonts-patcher:
        desc: runs the nerd fonts patcher
        deps: ['linux:runtime:all', 'build:all-test-binaries']
        vars:
            COMMANDS:
              - cmd: |-
                    python3 -c 'import math; print(math.sqrt(16))'
                entrypoint: /bin/sh
              - cmd: |-
                    echo 'import math; print("FontForge Python OK")' > /tmp/ff_test.py && parallel --verbose --jobs=0 'fontforge -script /tmp/ff_test.py' ::: 1 2 3 4 5 6 7 8 9 10
                entrypoint: /bin/sh
              - cmd: |-
                    fontforge -script /nerd/font-patcher -out /out  --progressbars --mono --adjust-line-height --fontawesome --fontawesomeext --fontlogos --octicons --codicons --powersymbols --pomicons --powerline --powerlineextra --material  --weather /in/TX-02-Variable.otf
                entrypoint: /bin/sh
              - cmd: |-
                    --progressbars --mono --adjust-line-height --fontawesome --fontawesomeext --fontlogos --octicons --codicons --powersymbols --pomicons --powerline --powerlineextra --material  --weather

        cmds:
          - for: {var: COMMANDS}
            task: dev:compare-nerdctl-docker
            vars:
                CMD: '{{.ITEM.cmd}}'
                CUSTOM_ENTRYPOINT: '{{.ITEM.entrypoint}}'
                VOLUME_FLAGS: -v ./tmp/fonts-raw:/in -v ./tmp/fonts-patched:/out
                IMAGE: docker.io/nerdfonts/patcher:latest

                # Check Python path and modules

    dev:pty-resize-test:
        desc: Test PTY resize functionality using custom PTY environment
        aliases: [pty-resize-test]
        deps: ['linux:runtime:all', 'build:all-test-binaries']

        vars:
            CONTAINER_ID: '{{.CONTAINER_ID | default ""}}'
            FLAGS: '{{.FLAGS | default "-it"}}'
            TIMEOUT: '{{.TIMEOUT | default ""}}'
            TIMEOUT_CMD: '{{.TIMEOUT | empty | ternary "" "timeout"}}'
            SEQUENCE: '{{.SEQUENCE | default "22x55@0s,81x230@2s,100x300@2s,120x400@2s,82x290@2s"}}'

            COMMAND_TO_RUN:
                sh: |-
                    go tool pty-resize-test {{.SEQUENCE}} -generate-shell-script
            BASE_CMD: |-
                {{.TIMEOUT_CMD}} {{.TIMEOUT}} {{.TEST_BIN_DIR}}/nerdctl-test exec {{.FLAGS}} {{.CONTAINER_ID}} sh -c '{{.COMMAND_TO_RUN}}'
            PTY_RESIZE_TEST_CMD: |-
                go tool pty-resize-test {{.SEQUENCE}} {{.BASE_CMD}}

        cmds:
          - task: run:nerdctl-test:rm-all-running-containers
          - cmd: >-
                {{.SUDO_CMD}} {{.PTY_RESIZE_TEST_CMD}}

    dev:2025-07-02:01:
        desc: runs the shim for 2025-07-02 - complex TypeScript compilation and execution
        deps: ['linux:runtime:all']
        vars:
            TEST_SCENARIO_DIR:
                sh: realpath ./test/integration/scenarios/2025-07-02
        cmds:
          - task: dev:cleanup-running-shims
          - task: run:nerdctl-test:run
            vars:
                IMAGE: 'docker.io/oven/bun:alpine'
                FLAGS: '--rm --workdir=/app --mount=type=bind,src={{.TEST_SCENARIO_DIR}},dst=/app,ro=true'
                ARGS: |-
                    sh -c "cat '/proc/self/mountinfo' && echo '📦 Installing dependencies...' && \
                    bun install --verbose && echo '🧪 Running tests...' && \
                    bun test && echo '🔨 Building project...' && \
                    bun run build && echo '🏃 Running compiled app...' && \
                    bun run start"

    dev:2025-07-05:01:
        desc: runs the shim for 2025-07-05 - detached mode
        deps: ['linux:runtime:all', 'build:all-test-binaries']
        # interactive: true
        vars:
            TMP_DIR:
                sh: mktemp -d -t runm-2025-07-05-XXXXXX
        cmds:
          - defer: 'rm -rf {{.TMP_DIR}}'
            silent: true
          - task: run:nerdctl-test:rm-all-running-containers
          - task: run:nerdctl-test:run
            vars:
                FLAGS: '-d'
                IMAGE: 'docker.io/library/alpine:latest'
                STDOUT_FILE: '{{.TMP_DIR}}/stdout.txt'
                ARGS: |-
                    sh -c 'echo "Container PID 1: $$"; ps aux; sleep 300'
          - cmd: bat {{.TMP_DIR}}/stdout.txt
            silent: true
          - task: run:nerdctl-test:ps
          - task: run:nerdctl-test:ps:ensure-container
            vars:
                CONTAINER_ID:
                    sh: cat {{.TMP_DIR}}/stdout.txt
                STATUS: 'Up'
          - task: dev:pty-resize-test
            vars:
                COMMAND: 'echo "hello world! this is a test"'
                CONTAINER_ID:
                    sh: cat {{.TMP_DIR}}/stdout.txt
                FLAGS: '--tty'
          - task: run:nerdctl-test:exec
            vars:
                COMMAND: 'echo "hello world! this is a test"'
                CONTAINER_ID:
                    sh: cat {{.TMP_DIR}}/stdout.txt
                FLAGS: '--tty'

          - task: run:nerdctl-test:rm
            vars:
                CONTAINER_ID:
                    sh: cat {{.TMP_DIR}}/stdout.txt

          - task: run:nerdctl-test:ps

    dev:2025-07-17:01:
        desc: runs the shim for 2025-07-17 - runm-linux-mounter
        deps: ['linux:runtime:all', 'build:all-test-binaries']
        vars:
            TEST_SCENARIO_DIR:
                sh: realpath ./test/integration/scenarios/2025-07-17
            TMP_DIR:
                sh: mktemp -d
        cmds:
          - defer: rm -rf {{.TMP_DIR}}
          - cmd: mkdir -p {{.TMP_DIR}}
          - cmd: mkdir -p {{.TMP_DIR}}/forks
          - for: {var: FORKS}
            cmd: rsync -a --exclude='vendor/' --exclude='tmp/' --exclude='.git/' {{.ITEM.path}} {{.TMP_DIR}}/forks/
          - task: run:nerdctl-test:rm-all-running-containers
          - cmd: |-
                {{.NERDCTL_CMD}} build \
                    --platform=linux/arm64 \
                    --progress=plain \
                    --build-context=runm=. \
                    --build-context=go-path=$(go env GOPATH) \
                    --build-context=forks={{.TMP_DIR}}/forks \
                    --target=runm-linux-mounter-builder \
                    --output=type=local,dest={{.TEST_BIN_DIR}} \
                    {{.TEST_SCENARIO_DIR}}

    dev:2025-07-20:01:
        desc: runs the shim for 2025-07-20
        deps: ['linux:runtime:all', 'build:all-test-binaries']
        vars:
            TEST_SCENARIO_DIR:
                sh: realpath ./test/integration/scenarios/2025-07-20
            TMP_DIR:
                sh: mktemp -d
        cmds:
          - defer: rm -rf {{.TMP_DIR}}
          - task: run:nerdctl-test:rm-all-running-containers
          - cmd: |-
                {{.NERDCTL_CMD}} build \
                    --platform=linux/arm64 \
                    --progress=plain \
                    --build-context=data={{.TEST_SCENARIO_DIR}}/data \
                    --target=export \
                    --output=type=local,dest={{.TEST_BIN_DIR}}/buildtest \
                    {{.TEST_SCENARIO_DIR}}

    dev:vmfuse:2025-07-21:01:
        desc: vmfuse POC end-to-end test - mount directory via Linux VM and NFS
        deps: ['linux:runtime:all', 'build:all-test-binaries']
        interactive: true
        vars:
            TMP_DIR:
                sh: mktemp -d
            TEST_DIR:
                sh: echo "{{.TMP_DIR}}/test-source"
            MOUNT_TARGET:
                sh: echo "{{.TMP_DIR}}/test-mount"
            VMFUSED_SOCK:
                sh: echo "{{.TMP_DIR}}/vmfused.sock"
        env:
            LINUX_RUNTIME_BUILD_DIR: '{{.LINUX_RUNTIME_DIR}}'
            VMFUSED_ADDRESS: 'unix://{{.VMFUSED_SOCK}}'
        cmds:
          - defer: |-
                echo "Cleaning up vmfuse test..."
                pkill -f vmfused || true
                {{.TEST_BIN_DIR}}/vmfusectl  list || true
                sleep 2
                rm -rf {{.TMP_DIR}} || true
          - cmd: |-
                mkdir -p {{.TEST_DIR}} {{.MOUNT_TARGET}}
                echo "Hello from vmfuse test!" > {{.TEST_DIR}}/test-file.txt
                echo "This is a bind mount test via Linux VM and NFS" >> {{.TEST_DIR}}/test-file.txt
                ls -la {{.TEST_DIR}}
          - cmd: |-
                {{.TEST_BIN_DIR}}/vmfused  &
                VMFUSED_PID=$!
                sleep 3
          - cmd: |-
                {{.TEST_BIN_DIR}}/vmfusectl  mount -t bind {{.TEST_DIR}} {{.MOUNT_TARGET}}
          - cmd: |-
                {{.TEST_BIN_DIR}}/vmfusectl  status {{.MOUNT_TARGET}}
          - cmd: |-
                {{.TEST_BIN_DIR}}/vmfusectl  list
          - cmd: |-
                for i in {1..15}; do
                    # {{.TEST_BIN_DIR}}/vmfusectl  status {{.MOUNT_TARGET}}
                    sleep 1
                done
          - cmd: |-
                echo "Testing mounted directory access..."
                if [ -d "{{.MOUNT_TARGET}}" ]; then
                    echo "Mount target exists"
                    if [ -f "{{.MOUNT_TARGET}}/test-file.txt" ]; then
                        echo "SUCCESS: Test file accessible through vmfuse mount!"
                        echo "File contents:"
                        cat "{{.MOUNT_TARGET}}/test-file.txt"
                    else
                        echo "FAIL: Test file not found in mount target"
                        echo "Mount target contents:"
                        ls -la "{{.MOUNT_TARGET}}" || echo "Cannot list mount target"
                    fi
                else
                    echo "FAIL: Mount target directory not accessible"
                fi
          - cmd: |-
                echo "Unmounting..."
                {{.TEST_BIN_DIR}}/vmfusectl  umount {{.MOUNT_TARGET}}
                sleep 2
          - cmd: |-
                echo "Final status check..."
                {{.TEST_BIN_DIR}}/vmfusectl  list
                echo "vmfuse test completed!"

    dev:vmfuse:2025-07-23:01:
        desc: vmfuse POC end-to-end test - mount directory via Linux VM and NFS
        deps: ['linux:runtime:all', 'build:all-test-binaries']
        interactive: true
        vars:
            TMP_DIR:
                sh: mktemp -d
            TEST_DIR:
                sh: echo "{{.TMP_DIR}}/test-source"
            MOUNT_TARGET:
                sh: echo "{{.TMP_DIR}}/test-mount"
            VMFUSED_SOCK:
                sh: echo "{{.TMP_DIR}}/vmfused.sock"
        env:
            LINUX_RUNTIME_BUILD_DIR:
                sh: realpath '{{.LINUX_RUNTIME_DIR}}'
            VMFUSED_ADDRESS: 'unix://{{.VMFUSED_SOCK}}'
            VMFUSED_BIN:
                sh: realpath '{{.TEST_BIN_DIR}}/vmfused'
            VMFUSECTL_BIN:
                sh: realpath '{{.TEST_BIN_DIR}}/vmfusectl'
        cmds:
          - cmd: |-
                go run ./test/integration/vmfuse/cmd/vmfuse_t1

    #endregion dev

    end-of-file:
        internal: true
        desc: end of file
        cmds:
          - cmd: echo "end of file"
