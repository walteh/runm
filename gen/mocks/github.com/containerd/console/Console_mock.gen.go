// Code generated by mockery. DO NOT EDIT.

package mockconsole

import (
	console "github.com/containerd/console"
	mock "github.com/stretchr/testify/mock"
)

// MockConsole is an autogenerated mock type for the Console type
type MockConsole struct {
	mock.Mock
}

type MockConsole_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsole) EXPECT() *MockConsole_Expecter {
	return &MockConsole_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockConsole) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsole_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConsole_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConsole_Expecter) Close() *MockConsole_Close_Call {
	return &MockConsole_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConsole_Close_Call) Run(run func()) *MockConsole_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsole_Close_Call) Return(_a0 error) *MockConsole_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsole_Close_Call) RunAndReturn(run func() error) *MockConsole_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DisableEcho provides a mock function with no fields
func (_m *MockConsole) DisableEcho() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DisableEcho")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsole_DisableEcho_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableEcho'
type MockConsole_DisableEcho_Call struct {
	*mock.Call
}

// DisableEcho is a helper method to define mock.On call
func (_e *MockConsole_Expecter) DisableEcho() *MockConsole_DisableEcho_Call {
	return &MockConsole_DisableEcho_Call{Call: _e.mock.On("DisableEcho")}
}

func (_c *MockConsole_DisableEcho_Call) Run(run func()) *MockConsole_DisableEcho_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsole_DisableEcho_Call) Return(_a0 error) *MockConsole_DisableEcho_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsole_DisableEcho_Call) RunAndReturn(run func() error) *MockConsole_DisableEcho_Call {
	_c.Call.Return(run)
	return _c
}

// Fd provides a mock function with no fields
func (_m *MockConsole) Fd() uintptr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fd")
	}

	var r0 uintptr
	if rf, ok := ret.Get(0).(func() uintptr); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uintptr)
	}

	return r0
}

// MockConsole_Fd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fd'
type MockConsole_Fd_Call struct {
	*mock.Call
}

// Fd is a helper method to define mock.On call
func (_e *MockConsole_Expecter) Fd() *MockConsole_Fd_Call {
	return &MockConsole_Fd_Call{Call: _e.mock.On("Fd")}
}

func (_c *MockConsole_Fd_Call) Run(run func()) *MockConsole_Fd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsole_Fd_Call) Return(_a0 uintptr) *MockConsole_Fd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsole_Fd_Call) RunAndReturn(run func() uintptr) *MockConsole_Fd_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockConsole) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockConsole_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockConsole_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockConsole_Expecter) Name() *MockConsole_Name_Call {
	return &MockConsole_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockConsole_Name_Call) Run(run func()) *MockConsole_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsole_Name_Call) Return(_a0 string) *MockConsole_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsole_Name_Call) RunAndReturn(run func() string) *MockConsole_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: p
func (_m *MockConsole) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsole_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockConsole_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - p []byte
func (_e *MockConsole_Expecter) Read(p interface{}) *MockConsole_Read_Call {
	return &MockConsole_Read_Call{Call: _e.mock.On("Read", p)}
}

func (_c *MockConsole_Read_Call) Run(run func(p []byte)) *MockConsole_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockConsole_Read_Call) Return(n int, err error) *MockConsole_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockConsole_Read_Call) RunAndReturn(run func([]byte) (int, error)) *MockConsole_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with no fields
func (_m *MockConsole) Reset() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsole_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockConsole_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockConsole_Expecter) Reset() *MockConsole_Reset_Call {
	return &MockConsole_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockConsole_Reset_Call) Run(run func()) *MockConsole_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsole_Reset_Call) Return(_a0 error) *MockConsole_Reset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsole_Reset_Call) RunAndReturn(run func() error) *MockConsole_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// Resize provides a mock function with given fields: _a0
func (_m *MockConsole) Resize(_a0 console.WinSize) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Resize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(console.WinSize) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsole_Resize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resize'
type MockConsole_Resize_Call struct {
	*mock.Call
}

// Resize is a helper method to define mock.On call
//   - _a0 console.WinSize
func (_e *MockConsole_Expecter) Resize(_a0 interface{}) *MockConsole_Resize_Call {
	return &MockConsole_Resize_Call{Call: _e.mock.On("Resize", _a0)}
}

func (_c *MockConsole_Resize_Call) Run(run func(_a0 console.WinSize)) *MockConsole_Resize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(console.WinSize))
	})
	return _c
}

func (_c *MockConsole_Resize_Call) Return(_a0 error) *MockConsole_Resize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsole_Resize_Call) RunAndReturn(run func(console.WinSize) error) *MockConsole_Resize_Call {
	_c.Call.Return(run)
	return _c
}

// ResizeFrom provides a mock function with given fields: _a0
func (_m *MockConsole) ResizeFrom(_a0 console.Console) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ResizeFrom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(console.Console) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsole_ResizeFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResizeFrom'
type MockConsole_ResizeFrom_Call struct {
	*mock.Call
}

// ResizeFrom is a helper method to define mock.On call
//   - _a0 console.Console
func (_e *MockConsole_Expecter) ResizeFrom(_a0 interface{}) *MockConsole_ResizeFrom_Call {
	return &MockConsole_ResizeFrom_Call{Call: _e.mock.On("ResizeFrom", _a0)}
}

func (_c *MockConsole_ResizeFrom_Call) Run(run func(_a0 console.Console)) *MockConsole_ResizeFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(console.Console))
	})
	return _c
}

func (_c *MockConsole_ResizeFrom_Call) Return(_a0 error) *MockConsole_ResizeFrom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsole_ResizeFrom_Call) RunAndReturn(run func(console.Console) error) *MockConsole_ResizeFrom_Call {
	_c.Call.Return(run)
	return _c
}

// SetRaw provides a mock function with no fields
func (_m *MockConsole) SetRaw() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SetRaw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsole_SetRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRaw'
type MockConsole_SetRaw_Call struct {
	*mock.Call
}

// SetRaw is a helper method to define mock.On call
func (_e *MockConsole_Expecter) SetRaw() *MockConsole_SetRaw_Call {
	return &MockConsole_SetRaw_Call{Call: _e.mock.On("SetRaw")}
}

func (_c *MockConsole_SetRaw_Call) Run(run func()) *MockConsole_SetRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsole_SetRaw_Call) Return(_a0 error) *MockConsole_SetRaw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsole_SetRaw_Call) RunAndReturn(run func() error) *MockConsole_SetRaw_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockConsole) Size() (console.WinSize, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 console.WinSize
	var r1 error
	if rf, ok := ret.Get(0).(func() (console.WinSize, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() console.WinSize); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(console.WinSize)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsole_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockConsole_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockConsole_Expecter) Size() *MockConsole_Size_Call {
	return &MockConsole_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockConsole_Size_Call) Run(run func()) *MockConsole_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsole_Size_Call) Return(_a0 console.WinSize, _a1 error) *MockConsole_Size_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsole_Size_Call) RunAndReturn(run func() (console.WinSize, error)) *MockConsole_Size_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: p
func (_m *MockConsole) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsole_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockConsole_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - p []byte
func (_e *MockConsole_Expecter) Write(p interface{}) *MockConsole_Write_Call {
	return &MockConsole_Write_Call{Call: _e.mock.On("Write", p)}
}

func (_c *MockConsole_Write_Call) Run(run func(p []byte)) *MockConsole_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockConsole_Write_Call) Return(n int, err error) *MockConsole_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockConsole_Write_Call) RunAndReturn(run func([]byte) (int, error)) *MockConsole_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConsole creates a new instance of MockConsole. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsole(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsole {
	mock := &MockConsole{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
