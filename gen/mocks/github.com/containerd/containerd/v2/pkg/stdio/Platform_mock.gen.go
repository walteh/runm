// Code generated by mockery. DO NOT EDIT.

package mockstdio

import (
	context "context"

	console "github.com/containerd/console"

	mock "github.com/stretchr/testify/mock"

	sync "sync"
)

// MockPlatform is an autogenerated mock type for the Platform type
type MockPlatform struct {
	mock.Mock
}

type MockPlatform_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlatform) EXPECT() *MockPlatform_Expecter {
	return &MockPlatform_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockPlatform) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPlatform_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockPlatform_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockPlatform_Expecter) Close() *MockPlatform_Close_Call {
	return &MockPlatform_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockPlatform_Close_Call) Run(run func()) *MockPlatform_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlatform_Close_Call) Return(_a0 error) *MockPlatform_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlatform_Close_Call) RunAndReturn(run func() error) *MockPlatform_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CopyConsole provides a mock function with given fields: ctx, _a1, id, stdin, stdout, stderr, wg
func (_m *MockPlatform) CopyConsole(ctx context.Context, _a1 console.Console, id string, stdin string, stdout string, stderr string, wg *sync.WaitGroup) (console.Console, error) {
	ret := _m.Called(ctx, _a1, id, stdin, stdout, stderr, wg)

	if len(ret) == 0 {
		panic("no return value specified for CopyConsole")
	}

	var r0 console.Console
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, console.Console, string, string, string, string, *sync.WaitGroup) (console.Console, error)); ok {
		return rf(ctx, _a1, id, stdin, stdout, stderr, wg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, console.Console, string, string, string, string, *sync.WaitGroup) console.Console); ok {
		r0 = rf(ctx, _a1, id, stdin, stdout, stderr, wg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(console.Console)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, console.Console, string, string, string, string, *sync.WaitGroup) error); ok {
		r1 = rf(ctx, _a1, id, stdin, stdout, stderr, wg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlatform_CopyConsole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyConsole'
type MockPlatform_CopyConsole_Call struct {
	*mock.Call
}

// CopyConsole is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 console.Console
//   - id string
//   - stdin string
//   - stdout string
//   - stderr string
//   - wg *sync.WaitGroup
func (_e *MockPlatform_Expecter) CopyConsole(ctx interface{}, _a1 interface{}, id interface{}, stdin interface{}, stdout interface{}, stderr interface{}, wg interface{}) *MockPlatform_CopyConsole_Call {
	return &MockPlatform_CopyConsole_Call{Call: _e.mock.On("CopyConsole", ctx, _a1, id, stdin, stdout, stderr, wg)}
}

func (_c *MockPlatform_CopyConsole_Call) Run(run func(ctx context.Context, _a1 console.Console, id string, stdin string, stdout string, stderr string, wg *sync.WaitGroup)) *MockPlatform_CopyConsole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(console.Console), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(*sync.WaitGroup))
	})
	return _c
}

func (_c *MockPlatform_CopyConsole_Call) Return(_a0 console.Console, _a1 error) *MockPlatform_CopyConsole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlatform_CopyConsole_Call) RunAndReturn(run func(context.Context, console.Console, string, string, string, string, *sync.WaitGroup) (console.Console, error)) *MockPlatform_CopyConsole_Call {
	_c.Call.Return(run)
	return _c
}

// ShutdownConsole provides a mock function with given fields: ctx, _a1
func (_m *MockPlatform) ShutdownConsole(ctx context.Context, _a1 console.Console) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ShutdownConsole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, console.Console) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPlatform_ShutdownConsole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutdownConsole'
type MockPlatform_ShutdownConsole_Call struct {
	*mock.Call
}

// ShutdownConsole is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 console.Console
func (_e *MockPlatform_Expecter) ShutdownConsole(ctx interface{}, _a1 interface{}) *MockPlatform_ShutdownConsole_Call {
	return &MockPlatform_ShutdownConsole_Call{Call: _e.mock.On("ShutdownConsole", ctx, _a1)}
}

func (_c *MockPlatform_ShutdownConsole_Call) Run(run func(ctx context.Context, _a1 console.Console)) *MockPlatform_ShutdownConsole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(console.Console))
	})
	return _c
}

func (_c *MockPlatform_ShutdownConsole_Call) Return(_a0 error) *MockPlatform_ShutdownConsole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlatform_ShutdownConsole_Call) RunAndReturn(run func(context.Context, console.Console) error) *MockPlatform_ShutdownConsole_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPlatform creates a new instance of MockPlatform. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlatform(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlatform {
	mock := &MockPlatform{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
