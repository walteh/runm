// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockruntime

import (
	"context"
	"sync"

	"github.com/walteh/runm/core/runc/runtime"
)

// Ensure that MockSocketAllocator does implement runtime.SocketAllocator.
// If this is not the case, regenerate this file with mockery.
var _ runtime.SocketAllocator = &MockSocketAllocator{}

// MockSocketAllocator is a mock implementation of runtime.SocketAllocator.
//
//	func TestSomethingThatUsesSocketAllocator(t *testing.T) {
//
//		// make and configure a mocked runtime.SocketAllocator
//		mockedSocketAllocator := &MockSocketAllocator{
//			AllocateSocketFunc: func(ctx context.Context) (runtime.AllocatedSocket, error) {
//				panic("mock out the AllocateSocket method")
//			},
//		}
//
//		// use mockedSocketAllocator in code that requires runtime.SocketAllocator
//		// and then make assertions.
//
//	}
type MockSocketAllocator struct {
	// AllocateSocketFunc mocks the AllocateSocket method.
	AllocateSocketFunc func(ctx context.Context) (runtime.AllocatedSocket, error)

	// calls tracks calls to the methods.
	calls struct {
		// AllocateSocket holds details about calls to the AllocateSocket method.
		AllocateSocket []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockAllocateSocket sync.RWMutex
}

// AllocateSocket calls AllocateSocketFunc.
func (mock *MockSocketAllocator) AllocateSocket(ctx context.Context) (runtime.AllocatedSocket, error) {
	if mock.AllocateSocketFunc == nil {
		panic("MockSocketAllocator.AllocateSocketFunc: method is nil but SocketAllocator.AllocateSocket was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockAllocateSocket.Lock()
	mock.calls.AllocateSocket = append(mock.calls.AllocateSocket, callInfo)
	mock.lockAllocateSocket.Unlock()
	return mock.AllocateSocketFunc(ctx)
}

// AllocateSocketCalls gets all the calls that were made to AllocateSocket.
// Check the length with:
//
//	len(mockedSocketAllocator.AllocateSocketCalls())
func (mock *MockSocketAllocator) AllocateSocketCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockAllocateSocket.RLock()
	calls = mock.calls.AllocateSocket
	mock.lockAllocateSocket.RUnlock()
	return calls
}
