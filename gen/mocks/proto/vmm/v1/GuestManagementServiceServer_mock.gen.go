// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockvmmv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/vmm/v1"
)

// Ensure that MockGuestManagementServiceServer does implement vmmv1.GuestManagementServiceServer.
// If this is not the case, regenerate this file with mockery.
var _ vmmv1.GuestManagementServiceServer = &MockGuestManagementServiceServer{}

// MockGuestManagementServiceServer is a mock implementation of vmmv1.GuestManagementServiceServer.
//
//	func TestSomethingThatUsesGuestManagementServiceServer(t *testing.T) {
//
//		// make and configure a mocked vmmv1.GuestManagementServiceServer
//		mockedGuestManagementServiceServer := &MockGuestManagementServiceServer{
//			GuestReadinessFunc: func(context1 context.Context, guestReadinessRequest *vmmv1.GuestReadinessRequest) (*vmmv1.GuestReadinessResponse, error) {
//				panic("mock out the GuestReadiness method")
//			},
//			GuestRunCommandFunc: func(context1 context.Context, guestRunCommandRequest *vmmv1.GuestRunCommandRequest) (*vmmv1.GuestRunCommandResponse, error) {
//				panic("mock out the GuestRunCommand method")
//			},
//			GuestTimeSyncFunc: func(context1 context.Context, guestTimeSyncRequest *vmmv1.GuestTimeSyncRequest) (*vmmv1.GuestTimeSyncResponse, error) {
//				panic("mock out the GuestTimeSync method")
//			},
//		}
//
//		// use mockedGuestManagementServiceServer in code that requires vmmv1.GuestManagementServiceServer
//		// and then make assertions.
//
//	}
type MockGuestManagementServiceServer struct {
	// GuestReadinessFunc mocks the GuestReadiness method.
	GuestReadinessFunc func(context1 context.Context, guestReadinessRequest *vmmv1.GuestReadinessRequest) (*vmmv1.GuestReadinessResponse, error)

	// GuestRunCommandFunc mocks the GuestRunCommand method.
	GuestRunCommandFunc func(context1 context.Context, guestRunCommandRequest *vmmv1.GuestRunCommandRequest) (*vmmv1.GuestRunCommandResponse, error)

	// GuestTimeSyncFunc mocks the GuestTimeSync method.
	GuestTimeSyncFunc func(context1 context.Context, guestTimeSyncRequest *vmmv1.GuestTimeSyncRequest) (*vmmv1.GuestTimeSyncResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// GuestReadiness holds details about calls to the GuestReadiness method.
		GuestReadiness []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// GuestReadinessRequest is the guestReadinessRequest argument value.
			GuestReadinessRequest *vmmv1.GuestReadinessRequest
		}
		// GuestRunCommand holds details about calls to the GuestRunCommand method.
		GuestRunCommand []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// GuestRunCommandRequest is the guestRunCommandRequest argument value.
			GuestRunCommandRequest *vmmv1.GuestRunCommandRequest
		}
		// GuestTimeSync holds details about calls to the GuestTimeSync method.
		GuestTimeSync []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// GuestTimeSyncRequest is the guestTimeSyncRequest argument value.
			GuestTimeSyncRequest *vmmv1.GuestTimeSyncRequest
		}
	}
	lockGuestReadiness  sync.RWMutex
	lockGuestRunCommand sync.RWMutex
	lockGuestTimeSync   sync.RWMutex
}

// GuestReadiness calls GuestReadinessFunc.
func (mock *MockGuestManagementServiceServer) GuestReadiness(context1 context.Context, guestReadinessRequest *vmmv1.GuestReadinessRequest) (*vmmv1.GuestReadinessResponse, error) {
	if mock.GuestReadinessFunc == nil {
		panic("MockGuestManagementServiceServer.GuestReadinessFunc: method is nil but GuestManagementServiceServer.GuestReadiness was just called")
	}
	callInfo := struct {
		Context1              context.Context
		GuestReadinessRequest *vmmv1.GuestReadinessRequest
	}{
		Context1:              context1,
		GuestReadinessRequest: guestReadinessRequest,
	}
	mock.lockGuestReadiness.Lock()
	mock.calls.GuestReadiness = append(mock.calls.GuestReadiness, callInfo)
	mock.lockGuestReadiness.Unlock()
	return mock.GuestReadinessFunc(context1, guestReadinessRequest)
}

// GuestReadinessCalls gets all the calls that were made to GuestReadiness.
// Check the length with:
//
//	len(mockedGuestManagementServiceServer.GuestReadinessCalls())
func (mock *MockGuestManagementServiceServer) GuestReadinessCalls() []struct {
	Context1              context.Context
	GuestReadinessRequest *vmmv1.GuestReadinessRequest
} {
	var calls []struct {
		Context1              context.Context
		GuestReadinessRequest *vmmv1.GuestReadinessRequest
	}
	mock.lockGuestReadiness.RLock()
	calls = mock.calls.GuestReadiness
	mock.lockGuestReadiness.RUnlock()
	return calls
}

// GuestRunCommand calls GuestRunCommandFunc.
func (mock *MockGuestManagementServiceServer) GuestRunCommand(context1 context.Context, guestRunCommandRequest *vmmv1.GuestRunCommandRequest) (*vmmv1.GuestRunCommandResponse, error) {
	if mock.GuestRunCommandFunc == nil {
		panic("MockGuestManagementServiceServer.GuestRunCommandFunc: method is nil but GuestManagementServiceServer.GuestRunCommand was just called")
	}
	callInfo := struct {
		Context1               context.Context
		GuestRunCommandRequest *vmmv1.GuestRunCommandRequest
	}{
		Context1:               context1,
		GuestRunCommandRequest: guestRunCommandRequest,
	}
	mock.lockGuestRunCommand.Lock()
	mock.calls.GuestRunCommand = append(mock.calls.GuestRunCommand, callInfo)
	mock.lockGuestRunCommand.Unlock()
	return mock.GuestRunCommandFunc(context1, guestRunCommandRequest)
}

// GuestRunCommandCalls gets all the calls that were made to GuestRunCommand.
// Check the length with:
//
//	len(mockedGuestManagementServiceServer.GuestRunCommandCalls())
func (mock *MockGuestManagementServiceServer) GuestRunCommandCalls() []struct {
	Context1               context.Context
	GuestRunCommandRequest *vmmv1.GuestRunCommandRequest
} {
	var calls []struct {
		Context1               context.Context
		GuestRunCommandRequest *vmmv1.GuestRunCommandRequest
	}
	mock.lockGuestRunCommand.RLock()
	calls = mock.calls.GuestRunCommand
	mock.lockGuestRunCommand.RUnlock()
	return calls
}

// GuestTimeSync calls GuestTimeSyncFunc.
func (mock *MockGuestManagementServiceServer) GuestTimeSync(context1 context.Context, guestTimeSyncRequest *vmmv1.GuestTimeSyncRequest) (*vmmv1.GuestTimeSyncResponse, error) {
	if mock.GuestTimeSyncFunc == nil {
		panic("MockGuestManagementServiceServer.GuestTimeSyncFunc: method is nil but GuestManagementServiceServer.GuestTimeSync was just called")
	}
	callInfo := struct {
		Context1             context.Context
		GuestTimeSyncRequest *vmmv1.GuestTimeSyncRequest
	}{
		Context1:             context1,
		GuestTimeSyncRequest: guestTimeSyncRequest,
	}
	mock.lockGuestTimeSync.Lock()
	mock.calls.GuestTimeSync = append(mock.calls.GuestTimeSync, callInfo)
	mock.lockGuestTimeSync.Unlock()
	return mock.GuestTimeSyncFunc(context1, guestTimeSyncRequest)
}

// GuestTimeSyncCalls gets all the calls that were made to GuestTimeSync.
// Check the length with:
//
//	len(mockedGuestManagementServiceServer.GuestTimeSyncCalls())
func (mock *MockGuestManagementServiceServer) GuestTimeSyncCalls() []struct {
	Context1             context.Context
	GuestTimeSyncRequest *vmmv1.GuestTimeSyncRequest
} {
	var calls []struct {
		Context1             context.Context
		GuestTimeSyncRequest *vmmv1.GuestTimeSyncRequest
	}
	mock.lockGuestTimeSync.RLock()
	calls = mock.calls.GuestTimeSync
	mock.lockGuestTimeSync.RUnlock()
	return calls
}
