// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockdevlogv1

import (
	"sync"

	"github.com/walteh/runm/proto/devlog/v1"
	"google.golang.org/grpc"
)

// Ensure that MockDevlogServiceServer does implement devlogv1.DevlogServiceServer.
// If this is not the case, regenerate this file with mockery.
var _ devlogv1.DevlogServiceServer = &MockDevlogServiceServer{}

// MockDevlogServiceServer is a mock implementation of devlogv1.DevlogServiceServer.
//
//	func TestSomethingThatUsesDevlogServiceServer(t *testing.T) {
//
//		// make and configure a mocked devlogv1.DevlogServiceServer
//		mockedDevlogServiceServer := &MockDevlogServiceServer{
//			LogFunc: func(bidiStreamingServer grpc.BidiStreamingServer[devlogv1.LogRequest, devlogv1.LogResponse]) error {
//				panic("mock out the Log method")
//			},
//		}
//
//		// use mockedDevlogServiceServer in code that requires devlogv1.DevlogServiceServer
//		// and then make assertions.
//
//	}
type MockDevlogServiceServer struct {
	// LogFunc mocks the Log method.
	LogFunc func(bidiStreamingServer grpc.BidiStreamingServer[devlogv1.LogRequest, devlogv1.LogResponse]) error

	// calls tracks calls to the methods.
	calls struct {
		// Log holds details about calls to the Log method.
		Log []struct {
			// BidiStreamingServer is the bidiStreamingServer argument value.
			BidiStreamingServer grpc.BidiStreamingServer[devlogv1.LogRequest, devlogv1.LogResponse]
		}
	}
	lockLog sync.RWMutex
}

// Log calls LogFunc.
func (mock *MockDevlogServiceServer) Log(bidiStreamingServer grpc.BidiStreamingServer[devlogv1.LogRequest, devlogv1.LogResponse]) error {
	if mock.LogFunc == nil {
		panic("MockDevlogServiceServer.LogFunc: method is nil but DevlogServiceServer.Log was just called")
	}
	callInfo := struct {
		BidiStreamingServer grpc.BidiStreamingServer[devlogv1.LogRequest, devlogv1.LogResponse]
	}{
		BidiStreamingServer: bidiStreamingServer,
	}
	mock.lockLog.Lock()
	mock.calls.Log = append(mock.calls.Log, callInfo)
	mock.lockLog.Unlock()
	return mock.LogFunc(bidiStreamingServer)
}

// LogCalls gets all the calls that were made to Log.
// Check the length with:
//
//	len(mockedDevlogServiceServer.LogCalls())
func (mock *MockDevlogServiceServer) LogCalls() []struct {
	BidiStreamingServer grpc.BidiStreamingServer[devlogv1.LogRequest, devlogv1.LogResponse]
} {
	var calls []struct {
		BidiStreamingServer grpc.BidiStreamingServer[devlogv1.LogRequest, devlogv1.LogResponse]
	}
	mock.lockLog.RLock()
	calls = mock.calls.Log
	mock.lockLog.RUnlock()
	return calls
}
