// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockdevlogv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/devlog/v1"
	"google.golang.org/grpc"
)

// Ensure that MockDevlogServiceClient does implement devlogv1.DevlogServiceClient.
// If this is not the case, regenerate this file with mockery.
var _ devlogv1.DevlogServiceClient = &MockDevlogServiceClient{}

// MockDevlogServiceClient is a mock implementation of devlogv1.DevlogServiceClient.
//
//	func TestSomethingThatUsesDevlogServiceClient(t *testing.T) {
//
//		// make and configure a mocked devlogv1.DevlogServiceClient
//		mockedDevlogServiceClient := &MockDevlogServiceClient{
//			LogFunc: func(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[devlogv1.LogRequest, devlogv1.LogResponse], error) {
//				panic("mock out the Log method")
//			},
//		}
//
//		// use mockedDevlogServiceClient in code that requires devlogv1.DevlogServiceClient
//		// and then make assertions.
//
//	}
type MockDevlogServiceClient struct {
	// LogFunc mocks the Log method.
	LogFunc func(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[devlogv1.LogRequest, devlogv1.LogResponse], error)

	// calls tracks calls to the methods.
	calls struct {
		// Log holds details about calls to the Log method.
		Log []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockLog sync.RWMutex
}

// Log calls LogFunc.
func (mock *MockDevlogServiceClient) Log(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[devlogv1.LogRequest, devlogv1.LogResponse], error) {
	if mock.LogFunc == nil {
		panic("MockDevlogServiceClient.LogFunc: method is nil but DevlogServiceClient.Log was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		Opts: opts,
	}
	mock.lockLog.Lock()
	mock.calls.Log = append(mock.calls.Log, callInfo)
	mock.lockLog.Unlock()
	return mock.LogFunc(ctx, opts...)
}

// LogCalls gets all the calls that were made to Log.
// Check the length with:
//
//	len(mockedDevlogServiceClient.LogCalls())
func (mock *MockDevlogServiceClient) LogCalls() []struct {
	Ctx  context.Context
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		Opts []grpc.CallOption
	}
	mock.lockLog.RLock()
	calls = mock.calls.Log
	mock.lockLog.RUnlock()
	return calls
}
