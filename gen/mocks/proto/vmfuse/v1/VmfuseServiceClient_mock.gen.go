// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockvmfusev1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/vmfuse/v1"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

// Ensure that MockVmfuseServiceClient does implement vmfusev1.VmfuseServiceClient.
// If this is not the case, regenerate this file with mockery.
var _ vmfusev1.VmfuseServiceClient = &MockVmfuseServiceClient{}

// MockVmfuseServiceClient is a mock implementation of vmfusev1.VmfuseServiceClient.
//
//	func TestSomethingThatUsesVmfuseServiceClient(t *testing.T) {
//
//		// make and configure a mocked vmfusev1.VmfuseServiceClient
//		mockedVmfuseServiceClient := &MockVmfuseServiceClient{
//			ListFunc: func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*vmfusev1.ListResponse, error) {
//				panic("mock out the List method")
//			},
//			MountFunc: func(ctx context.Context, in *vmfusev1.MountRequest, opts ...grpc.CallOption) (*vmfusev1.MountResponse, error) {
//				panic("mock out the Mount method")
//			},
//			StatusFunc: func(ctx context.Context, in *vmfusev1.StatusRequest, opts ...grpc.CallOption) (*vmfusev1.StatusResponse, error) {
//				panic("mock out the Status method")
//			},
//			UnmountFunc: func(ctx context.Context, in *vmfusev1.UnmountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
//				panic("mock out the Unmount method")
//			},
//		}
//
//		// use mockedVmfuseServiceClient in code that requires vmfusev1.VmfuseServiceClient
//		// and then make assertions.
//
//	}
type MockVmfuseServiceClient struct {
	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*vmfusev1.ListResponse, error)

	// MountFunc mocks the Mount method.
	MountFunc func(ctx context.Context, in *vmfusev1.MountRequest, opts ...grpc.CallOption) (*vmfusev1.MountResponse, error)

	// StatusFunc mocks the Status method.
	StatusFunc func(ctx context.Context, in *vmfusev1.StatusRequest, opts ...grpc.CallOption) (*vmfusev1.StatusResponse, error)

	// UnmountFunc mocks the Unmount method.
	UnmountFunc func(ctx context.Context, in *vmfusev1.UnmountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)

	// calls tracks calls to the methods.
	calls struct {
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *emptypb.Empty
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Mount holds details about calls to the Mount method.
		Mount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *vmfusev1.MountRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Status holds details about calls to the Status method.
		Status []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *vmfusev1.StatusRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Unmount holds details about calls to the Unmount method.
		Unmount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *vmfusev1.UnmountRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockList    sync.RWMutex
	lockMount   sync.RWMutex
	lockStatus  sync.RWMutex
	lockUnmount sync.RWMutex
}

// List calls ListFunc.
func (mock *MockVmfuseServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*vmfusev1.ListResponse, error) {
	if mock.ListFunc == nil {
		panic("MockVmfuseServiceClient.ListFunc: method is nil but VmfuseServiceClient.List was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, in, opts...)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedVmfuseServiceClient.ListCalls())
func (mock *MockVmfuseServiceClient) ListCalls() []struct {
	Ctx  context.Context
	In   *emptypb.Empty
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Mount calls MountFunc.
func (mock *MockVmfuseServiceClient) Mount(ctx context.Context, in *vmfusev1.MountRequest, opts ...grpc.CallOption) (*vmfusev1.MountResponse, error) {
	if mock.MountFunc == nil {
		panic("MockVmfuseServiceClient.MountFunc: method is nil but VmfuseServiceClient.Mount was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *vmfusev1.MountRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockMount.Lock()
	mock.calls.Mount = append(mock.calls.Mount, callInfo)
	mock.lockMount.Unlock()
	return mock.MountFunc(ctx, in, opts...)
}

// MountCalls gets all the calls that were made to Mount.
// Check the length with:
//
//	len(mockedVmfuseServiceClient.MountCalls())
func (mock *MockVmfuseServiceClient) MountCalls() []struct {
	Ctx  context.Context
	In   *vmfusev1.MountRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *vmfusev1.MountRequest
		Opts []grpc.CallOption
	}
	mock.lockMount.RLock()
	calls = mock.calls.Mount
	mock.lockMount.RUnlock()
	return calls
}

// Status calls StatusFunc.
func (mock *MockVmfuseServiceClient) Status(ctx context.Context, in *vmfusev1.StatusRequest, opts ...grpc.CallOption) (*vmfusev1.StatusResponse, error) {
	if mock.StatusFunc == nil {
		panic("MockVmfuseServiceClient.StatusFunc: method is nil but VmfuseServiceClient.Status was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *vmfusev1.StatusRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockStatus.Lock()
	mock.calls.Status = append(mock.calls.Status, callInfo)
	mock.lockStatus.Unlock()
	return mock.StatusFunc(ctx, in, opts...)
}

// StatusCalls gets all the calls that were made to Status.
// Check the length with:
//
//	len(mockedVmfuseServiceClient.StatusCalls())
func (mock *MockVmfuseServiceClient) StatusCalls() []struct {
	Ctx  context.Context
	In   *vmfusev1.StatusRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *vmfusev1.StatusRequest
		Opts []grpc.CallOption
	}
	mock.lockStatus.RLock()
	calls = mock.calls.Status
	mock.lockStatus.RUnlock()
	return calls
}

// Unmount calls UnmountFunc.
func (mock *MockVmfuseServiceClient) Unmount(ctx context.Context, in *vmfusev1.UnmountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	if mock.UnmountFunc == nil {
		panic("MockVmfuseServiceClient.UnmountFunc: method is nil but VmfuseServiceClient.Unmount was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *vmfusev1.UnmountRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUnmount.Lock()
	mock.calls.Unmount = append(mock.calls.Unmount, callInfo)
	mock.lockUnmount.Unlock()
	return mock.UnmountFunc(ctx, in, opts...)
}

// UnmountCalls gets all the calls that were made to Unmount.
// Check the length with:
//
//	len(mockedVmfuseServiceClient.UnmountCalls())
func (mock *MockVmfuseServiceClient) UnmountCalls() []struct {
	Ctx  context.Context
	In   *vmfusev1.UnmountRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *vmfusev1.UnmountRequest
		Opts []grpc.CallOption
	}
	mock.lockUnmount.RLock()
	calls = mock.calls.Unmount
	mock.lockUnmount.RUnlock()
	return calls
}
