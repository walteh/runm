// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockvmfusev1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/vmfuse/v1"
	"google.golang.org/protobuf/types/known/emptypb"
)

// Ensure that MockVmfuseServiceServer does implement vmfusev1.VmfuseServiceServer.
// If this is not the case, regenerate this file with mockery.
var _ vmfusev1.VmfuseServiceServer = &MockVmfuseServiceServer{}

// MockVmfuseServiceServer is a mock implementation of vmfusev1.VmfuseServiceServer.
//
//	func TestSomethingThatUsesVmfuseServiceServer(t *testing.T) {
//
//		// make and configure a mocked vmfusev1.VmfuseServiceServer
//		mockedVmfuseServiceServer := &MockVmfuseServiceServer{
//			ListFunc: func(context1 context.Context, empty *emptypb.Empty) (*vmfusev1.ListResponse, error) {
//				panic("mock out the List method")
//			},
//			MountFunc: func(context1 context.Context, mountRequest *vmfusev1.MountRequest) (*vmfusev1.MountResponse, error) {
//				panic("mock out the Mount method")
//			},
//			StatusFunc: func(context1 context.Context, statusRequest *vmfusev1.StatusRequest) (*vmfusev1.StatusResponse, error) {
//				panic("mock out the Status method")
//			},
//			UnmountFunc: func(context1 context.Context, unmountRequest *vmfusev1.UnmountRequest) (*emptypb.Empty, error) {
//				panic("mock out the Unmount method")
//			},
//		}
//
//		// use mockedVmfuseServiceServer in code that requires vmfusev1.VmfuseServiceServer
//		// and then make assertions.
//
//	}
type MockVmfuseServiceServer struct {
	// ListFunc mocks the List method.
	ListFunc func(context1 context.Context, empty *emptypb.Empty) (*vmfusev1.ListResponse, error)

	// MountFunc mocks the Mount method.
	MountFunc func(context1 context.Context, mountRequest *vmfusev1.MountRequest) (*vmfusev1.MountResponse, error)

	// StatusFunc mocks the Status method.
	StatusFunc func(context1 context.Context, statusRequest *vmfusev1.StatusRequest) (*vmfusev1.StatusResponse, error)

	// UnmountFunc mocks the Unmount method.
	UnmountFunc func(context1 context.Context, unmountRequest *vmfusev1.UnmountRequest) (*emptypb.Empty, error)

	// calls tracks calls to the methods.
	calls struct {
		// List holds details about calls to the List method.
		List []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// Empty is the empty argument value.
			Empty *emptypb.Empty
		}
		// Mount holds details about calls to the Mount method.
		Mount []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// MountRequest is the mountRequest argument value.
			MountRequest *vmfusev1.MountRequest
		}
		// Status holds details about calls to the Status method.
		Status []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// StatusRequest is the statusRequest argument value.
			StatusRequest *vmfusev1.StatusRequest
		}
		// Unmount holds details about calls to the Unmount method.
		Unmount []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// UnmountRequest is the unmountRequest argument value.
			UnmountRequest *vmfusev1.UnmountRequest
		}
	}
	lockList    sync.RWMutex
	lockMount   sync.RWMutex
	lockStatus  sync.RWMutex
	lockUnmount sync.RWMutex
}

// List calls ListFunc.
func (mock *MockVmfuseServiceServer) List(context1 context.Context, empty *emptypb.Empty) (*vmfusev1.ListResponse, error) {
	if mock.ListFunc == nil {
		panic("MockVmfuseServiceServer.ListFunc: method is nil but VmfuseServiceServer.List was just called")
	}
	callInfo := struct {
		Context1 context.Context
		Empty    *emptypb.Empty
	}{
		Context1: context1,
		Empty:    empty,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(context1, empty)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedVmfuseServiceServer.ListCalls())
func (mock *MockVmfuseServiceServer) ListCalls() []struct {
	Context1 context.Context
	Empty    *emptypb.Empty
} {
	var calls []struct {
		Context1 context.Context
		Empty    *emptypb.Empty
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Mount calls MountFunc.
func (mock *MockVmfuseServiceServer) Mount(context1 context.Context, mountRequest *vmfusev1.MountRequest) (*vmfusev1.MountResponse, error) {
	if mock.MountFunc == nil {
		panic("MockVmfuseServiceServer.MountFunc: method is nil but VmfuseServiceServer.Mount was just called")
	}
	callInfo := struct {
		Context1     context.Context
		MountRequest *vmfusev1.MountRequest
	}{
		Context1:     context1,
		MountRequest: mountRequest,
	}
	mock.lockMount.Lock()
	mock.calls.Mount = append(mock.calls.Mount, callInfo)
	mock.lockMount.Unlock()
	return mock.MountFunc(context1, mountRequest)
}

// MountCalls gets all the calls that were made to Mount.
// Check the length with:
//
//	len(mockedVmfuseServiceServer.MountCalls())
func (mock *MockVmfuseServiceServer) MountCalls() []struct {
	Context1     context.Context
	MountRequest *vmfusev1.MountRequest
} {
	var calls []struct {
		Context1     context.Context
		MountRequest *vmfusev1.MountRequest
	}
	mock.lockMount.RLock()
	calls = mock.calls.Mount
	mock.lockMount.RUnlock()
	return calls
}

// Status calls StatusFunc.
func (mock *MockVmfuseServiceServer) Status(context1 context.Context, statusRequest *vmfusev1.StatusRequest) (*vmfusev1.StatusResponse, error) {
	if mock.StatusFunc == nil {
		panic("MockVmfuseServiceServer.StatusFunc: method is nil but VmfuseServiceServer.Status was just called")
	}
	callInfo := struct {
		Context1      context.Context
		StatusRequest *vmfusev1.StatusRequest
	}{
		Context1:      context1,
		StatusRequest: statusRequest,
	}
	mock.lockStatus.Lock()
	mock.calls.Status = append(mock.calls.Status, callInfo)
	mock.lockStatus.Unlock()
	return mock.StatusFunc(context1, statusRequest)
}

// StatusCalls gets all the calls that were made to Status.
// Check the length with:
//
//	len(mockedVmfuseServiceServer.StatusCalls())
func (mock *MockVmfuseServiceServer) StatusCalls() []struct {
	Context1      context.Context
	StatusRequest *vmfusev1.StatusRequest
} {
	var calls []struct {
		Context1      context.Context
		StatusRequest *vmfusev1.StatusRequest
	}
	mock.lockStatus.RLock()
	calls = mock.calls.Status
	mock.lockStatus.RUnlock()
	return calls
}

// Unmount calls UnmountFunc.
func (mock *MockVmfuseServiceServer) Unmount(context1 context.Context, unmountRequest *vmfusev1.UnmountRequest) (*emptypb.Empty, error) {
	if mock.UnmountFunc == nil {
		panic("MockVmfuseServiceServer.UnmountFunc: method is nil but VmfuseServiceServer.Unmount was just called")
	}
	callInfo := struct {
		Context1       context.Context
		UnmountRequest *vmfusev1.UnmountRequest
	}{
		Context1:       context1,
		UnmountRequest: unmountRequest,
	}
	mock.lockUnmount.Lock()
	mock.calls.Unmount = append(mock.calls.Unmount, callInfo)
	mock.lockUnmount.Unlock()
	return mock.UnmountFunc(context1, unmountRequest)
}

// UnmountCalls gets all the calls that were made to Unmount.
// Check the length with:
//
//	len(mockedVmfuseServiceServer.UnmountCalls())
func (mock *MockVmfuseServiceServer) UnmountCalls() []struct {
	Context1       context.Context
	UnmountRequest *vmfusev1.UnmountRequest
} {
	var calls []struct {
		Context1       context.Context
		UnmountRequest *vmfusev1.UnmountRequest
	}
	mock.lockUnmount.RLock()
	calls = mock.calls.Unmount
	mock.lockUnmount.RUnlock()
	return calls
}
