// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockdapmuxv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/dapmux/v1"
	"google.golang.org/grpc"
)

// Ensure that MockDAPMuxServiceClient does implement dapmuxv1.DAPMuxServiceClient.
// If this is not the case, regenerate this file with mockery.
var _ dapmuxv1.DAPMuxServiceClient = &MockDAPMuxServiceClient{}

// MockDAPMuxServiceClient is a mock implementation of dapmuxv1.DAPMuxServiceClient.
//
//	func TestSomethingThatUsesDAPMuxServiceClient(t *testing.T) {
//
//		// make and configure a mocked dapmuxv1.DAPMuxServiceClient
//		mockedDAPMuxServiceClient := &MockDAPMuxServiceClient{
//			ForwardDAPMessageFunc: func(ctx context.Context, in *dapmuxv1.ForwardDAPMessageRequest, opts ...grpc.CallOption) (*dapmuxv1.ForwardDAPMessageResponse, error) {
//				panic("mock out the ForwardDAPMessage method")
//			},
//			ListTargetsFunc: func(ctx context.Context, in *dapmuxv1.ListTargetsRequest, opts ...grpc.CallOption) (*dapmuxv1.ListTargetsResponse, error) {
//				panic("mock out the ListTargets method")
//			},
//			RegisterTargetFunc: func(ctx context.Context, in *dapmuxv1.RegisterTargetRequest, opts ...grpc.CallOption) (*dapmuxv1.RegisterTargetResponse, error) {
//				panic("mock out the RegisterTarget method")
//			},
//			SetActiveTargetFunc: func(ctx context.Context, in *dapmuxv1.SetActiveTargetRequest, opts ...grpc.CallOption) (*dapmuxv1.SetActiveTargetResponse, error) {
//				panic("mock out the SetActiveTarget method")
//			},
//			StreamTargetEventsFunc: func(ctx context.Context, in *dapmuxv1.StreamTargetEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[dapmuxv1.TargetEvent], error) {
//				panic("mock out the StreamTargetEvents method")
//			},
//			UnregisterTargetFunc: func(ctx context.Context, in *dapmuxv1.UnregisterTargetRequest, opts ...grpc.CallOption) (*dapmuxv1.UnregisterTargetResponse, error) {
//				panic("mock out the UnregisterTarget method")
//			},
//		}
//
//		// use mockedDAPMuxServiceClient in code that requires dapmuxv1.DAPMuxServiceClient
//		// and then make assertions.
//
//	}
type MockDAPMuxServiceClient struct {
	// ForwardDAPMessageFunc mocks the ForwardDAPMessage method.
	ForwardDAPMessageFunc func(ctx context.Context, in *dapmuxv1.ForwardDAPMessageRequest, opts ...grpc.CallOption) (*dapmuxv1.ForwardDAPMessageResponse, error)

	// ListTargetsFunc mocks the ListTargets method.
	ListTargetsFunc func(ctx context.Context, in *dapmuxv1.ListTargetsRequest, opts ...grpc.CallOption) (*dapmuxv1.ListTargetsResponse, error)

	// RegisterTargetFunc mocks the RegisterTarget method.
	RegisterTargetFunc func(ctx context.Context, in *dapmuxv1.RegisterTargetRequest, opts ...grpc.CallOption) (*dapmuxv1.RegisterTargetResponse, error)

	// SetActiveTargetFunc mocks the SetActiveTarget method.
	SetActiveTargetFunc func(ctx context.Context, in *dapmuxv1.SetActiveTargetRequest, opts ...grpc.CallOption) (*dapmuxv1.SetActiveTargetResponse, error)

	// StreamTargetEventsFunc mocks the StreamTargetEvents method.
	StreamTargetEventsFunc func(ctx context.Context, in *dapmuxv1.StreamTargetEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[dapmuxv1.TargetEvent], error)

	// UnregisterTargetFunc mocks the UnregisterTarget method.
	UnregisterTargetFunc func(ctx context.Context, in *dapmuxv1.UnregisterTargetRequest, opts ...grpc.CallOption) (*dapmuxv1.UnregisterTargetResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// ForwardDAPMessage holds details about calls to the ForwardDAPMessage method.
		ForwardDAPMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *dapmuxv1.ForwardDAPMessageRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// ListTargets holds details about calls to the ListTargets method.
		ListTargets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *dapmuxv1.ListTargetsRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// RegisterTarget holds details about calls to the RegisterTarget method.
		RegisterTarget []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *dapmuxv1.RegisterTargetRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// SetActiveTarget holds details about calls to the SetActiveTarget method.
		SetActiveTarget []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *dapmuxv1.SetActiveTargetRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// StreamTargetEvents holds details about calls to the StreamTargetEvents method.
		StreamTargetEvents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *dapmuxv1.StreamTargetEventsRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// UnregisterTarget holds details about calls to the UnregisterTarget method.
		UnregisterTarget []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *dapmuxv1.UnregisterTargetRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockForwardDAPMessage  sync.RWMutex
	lockListTargets        sync.RWMutex
	lockRegisterTarget     sync.RWMutex
	lockSetActiveTarget    sync.RWMutex
	lockStreamTargetEvents sync.RWMutex
	lockUnregisterTarget   sync.RWMutex
}

// ForwardDAPMessage calls ForwardDAPMessageFunc.
func (mock *MockDAPMuxServiceClient) ForwardDAPMessage(ctx context.Context, in *dapmuxv1.ForwardDAPMessageRequest, opts ...grpc.CallOption) (*dapmuxv1.ForwardDAPMessageResponse, error) {
	if mock.ForwardDAPMessageFunc == nil {
		panic("MockDAPMuxServiceClient.ForwardDAPMessageFunc: method is nil but DAPMuxServiceClient.ForwardDAPMessage was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *dapmuxv1.ForwardDAPMessageRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockForwardDAPMessage.Lock()
	mock.calls.ForwardDAPMessage = append(mock.calls.ForwardDAPMessage, callInfo)
	mock.lockForwardDAPMessage.Unlock()
	return mock.ForwardDAPMessageFunc(ctx, in, opts...)
}

// ForwardDAPMessageCalls gets all the calls that were made to ForwardDAPMessage.
// Check the length with:
//
//	len(mockedDAPMuxServiceClient.ForwardDAPMessageCalls())
func (mock *MockDAPMuxServiceClient) ForwardDAPMessageCalls() []struct {
	Ctx  context.Context
	In   *dapmuxv1.ForwardDAPMessageRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *dapmuxv1.ForwardDAPMessageRequest
		Opts []grpc.CallOption
	}
	mock.lockForwardDAPMessage.RLock()
	calls = mock.calls.ForwardDAPMessage
	mock.lockForwardDAPMessage.RUnlock()
	return calls
}

// ListTargets calls ListTargetsFunc.
func (mock *MockDAPMuxServiceClient) ListTargets(ctx context.Context, in *dapmuxv1.ListTargetsRequest, opts ...grpc.CallOption) (*dapmuxv1.ListTargetsResponse, error) {
	if mock.ListTargetsFunc == nil {
		panic("MockDAPMuxServiceClient.ListTargetsFunc: method is nil but DAPMuxServiceClient.ListTargets was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *dapmuxv1.ListTargetsRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockListTargets.Lock()
	mock.calls.ListTargets = append(mock.calls.ListTargets, callInfo)
	mock.lockListTargets.Unlock()
	return mock.ListTargetsFunc(ctx, in, opts...)
}

// ListTargetsCalls gets all the calls that were made to ListTargets.
// Check the length with:
//
//	len(mockedDAPMuxServiceClient.ListTargetsCalls())
func (mock *MockDAPMuxServiceClient) ListTargetsCalls() []struct {
	Ctx  context.Context
	In   *dapmuxv1.ListTargetsRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *dapmuxv1.ListTargetsRequest
		Opts []grpc.CallOption
	}
	mock.lockListTargets.RLock()
	calls = mock.calls.ListTargets
	mock.lockListTargets.RUnlock()
	return calls
}

// RegisterTarget calls RegisterTargetFunc.
func (mock *MockDAPMuxServiceClient) RegisterTarget(ctx context.Context, in *dapmuxv1.RegisterTargetRequest, opts ...grpc.CallOption) (*dapmuxv1.RegisterTargetResponse, error) {
	if mock.RegisterTargetFunc == nil {
		panic("MockDAPMuxServiceClient.RegisterTargetFunc: method is nil but DAPMuxServiceClient.RegisterTarget was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *dapmuxv1.RegisterTargetRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockRegisterTarget.Lock()
	mock.calls.RegisterTarget = append(mock.calls.RegisterTarget, callInfo)
	mock.lockRegisterTarget.Unlock()
	return mock.RegisterTargetFunc(ctx, in, opts...)
}

// RegisterTargetCalls gets all the calls that were made to RegisterTarget.
// Check the length with:
//
//	len(mockedDAPMuxServiceClient.RegisterTargetCalls())
func (mock *MockDAPMuxServiceClient) RegisterTargetCalls() []struct {
	Ctx  context.Context
	In   *dapmuxv1.RegisterTargetRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *dapmuxv1.RegisterTargetRequest
		Opts []grpc.CallOption
	}
	mock.lockRegisterTarget.RLock()
	calls = mock.calls.RegisterTarget
	mock.lockRegisterTarget.RUnlock()
	return calls
}

// SetActiveTarget calls SetActiveTargetFunc.
func (mock *MockDAPMuxServiceClient) SetActiveTarget(ctx context.Context, in *dapmuxv1.SetActiveTargetRequest, opts ...grpc.CallOption) (*dapmuxv1.SetActiveTargetResponse, error) {
	if mock.SetActiveTargetFunc == nil {
		panic("MockDAPMuxServiceClient.SetActiveTargetFunc: method is nil but DAPMuxServiceClient.SetActiveTarget was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *dapmuxv1.SetActiveTargetRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockSetActiveTarget.Lock()
	mock.calls.SetActiveTarget = append(mock.calls.SetActiveTarget, callInfo)
	mock.lockSetActiveTarget.Unlock()
	return mock.SetActiveTargetFunc(ctx, in, opts...)
}

// SetActiveTargetCalls gets all the calls that were made to SetActiveTarget.
// Check the length with:
//
//	len(mockedDAPMuxServiceClient.SetActiveTargetCalls())
func (mock *MockDAPMuxServiceClient) SetActiveTargetCalls() []struct {
	Ctx  context.Context
	In   *dapmuxv1.SetActiveTargetRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *dapmuxv1.SetActiveTargetRequest
		Opts []grpc.CallOption
	}
	mock.lockSetActiveTarget.RLock()
	calls = mock.calls.SetActiveTarget
	mock.lockSetActiveTarget.RUnlock()
	return calls
}

// StreamTargetEvents calls StreamTargetEventsFunc.
func (mock *MockDAPMuxServiceClient) StreamTargetEvents(ctx context.Context, in *dapmuxv1.StreamTargetEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[dapmuxv1.TargetEvent], error) {
	if mock.StreamTargetEventsFunc == nil {
		panic("MockDAPMuxServiceClient.StreamTargetEventsFunc: method is nil but DAPMuxServiceClient.StreamTargetEvents was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *dapmuxv1.StreamTargetEventsRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockStreamTargetEvents.Lock()
	mock.calls.StreamTargetEvents = append(mock.calls.StreamTargetEvents, callInfo)
	mock.lockStreamTargetEvents.Unlock()
	return mock.StreamTargetEventsFunc(ctx, in, opts...)
}

// StreamTargetEventsCalls gets all the calls that were made to StreamTargetEvents.
// Check the length with:
//
//	len(mockedDAPMuxServiceClient.StreamTargetEventsCalls())
func (mock *MockDAPMuxServiceClient) StreamTargetEventsCalls() []struct {
	Ctx  context.Context
	In   *dapmuxv1.StreamTargetEventsRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *dapmuxv1.StreamTargetEventsRequest
		Opts []grpc.CallOption
	}
	mock.lockStreamTargetEvents.RLock()
	calls = mock.calls.StreamTargetEvents
	mock.lockStreamTargetEvents.RUnlock()
	return calls
}

// UnregisterTarget calls UnregisterTargetFunc.
func (mock *MockDAPMuxServiceClient) UnregisterTarget(ctx context.Context, in *dapmuxv1.UnregisterTargetRequest, opts ...grpc.CallOption) (*dapmuxv1.UnregisterTargetResponse, error) {
	if mock.UnregisterTargetFunc == nil {
		panic("MockDAPMuxServiceClient.UnregisterTargetFunc: method is nil but DAPMuxServiceClient.UnregisterTarget was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *dapmuxv1.UnregisterTargetRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUnregisterTarget.Lock()
	mock.calls.UnregisterTarget = append(mock.calls.UnregisterTarget, callInfo)
	mock.lockUnregisterTarget.Unlock()
	return mock.UnregisterTargetFunc(ctx, in, opts...)
}

// UnregisterTargetCalls gets all the calls that were made to UnregisterTarget.
// Check the length with:
//
//	len(mockedDAPMuxServiceClient.UnregisterTargetCalls())
func (mock *MockDAPMuxServiceClient) UnregisterTargetCalls() []struct {
	Ctx  context.Context
	In   *dapmuxv1.UnregisterTargetRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *dapmuxv1.UnregisterTargetRequest
		Opts []grpc.CallOption
	}
	mock.lockUnregisterTarget.RLock()
	calls = mock.calls.UnregisterTarget
	mock.lockUnregisterTarget.RUnlock()
	return calls
}
