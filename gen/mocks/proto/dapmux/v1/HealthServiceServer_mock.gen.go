// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockdapmuxv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/dapmux/v1"
	"google.golang.org/grpc"
)

// Ensure that MockHealthServiceServer does implement dapmuxv1.HealthServiceServer.
// If this is not the case, regenerate this file with mockery.
var _ dapmuxv1.HealthServiceServer = &MockHealthServiceServer{}

// MockHealthServiceServer is a mock implementation of dapmuxv1.HealthServiceServer.
//
//	func TestSomethingThatUsesHealthServiceServer(t *testing.T) {
//
//		// make and configure a mocked dapmuxv1.HealthServiceServer
//		mockedHealthServiceServer := &MockHealthServiceServer{
//			CheckFunc: func(context1 context.Context, healthCheckRequest *dapmuxv1.HealthCheckRequest) (*dapmuxv1.HealthCheckResponse, error) {
//				panic("mock out the Check method")
//			},
//			WatchFunc: func(healthCheckRequest *dapmuxv1.HealthCheckRequest, serverStreamingServer grpc.ServerStreamingServer[dapmuxv1.HealthCheckResponse]) error {
//				panic("mock out the Watch method")
//			},
//		}
//
//		// use mockedHealthServiceServer in code that requires dapmuxv1.HealthServiceServer
//		// and then make assertions.
//
//	}
type MockHealthServiceServer struct {
	// CheckFunc mocks the Check method.
	CheckFunc func(context1 context.Context, healthCheckRequest *dapmuxv1.HealthCheckRequest) (*dapmuxv1.HealthCheckResponse, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(healthCheckRequest *dapmuxv1.HealthCheckRequest, serverStreamingServer grpc.ServerStreamingServer[dapmuxv1.HealthCheckResponse]) error

	// calls tracks calls to the methods.
	calls struct {
		// Check holds details about calls to the Check method.
		Check []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// HealthCheckRequest is the healthCheckRequest argument value.
			HealthCheckRequest *dapmuxv1.HealthCheckRequest
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// HealthCheckRequest is the healthCheckRequest argument value.
			HealthCheckRequest *dapmuxv1.HealthCheckRequest
			// ServerStreamingServer is the serverStreamingServer argument value.
			ServerStreamingServer grpc.ServerStreamingServer[dapmuxv1.HealthCheckResponse]
		}
	}
	lockCheck sync.RWMutex
	lockWatch sync.RWMutex
}

// Check calls CheckFunc.
func (mock *MockHealthServiceServer) Check(context1 context.Context, healthCheckRequest *dapmuxv1.HealthCheckRequest) (*dapmuxv1.HealthCheckResponse, error) {
	if mock.CheckFunc == nil {
		panic("MockHealthServiceServer.CheckFunc: method is nil but HealthServiceServer.Check was just called")
	}
	callInfo := struct {
		Context1           context.Context
		HealthCheckRequest *dapmuxv1.HealthCheckRequest
	}{
		Context1:           context1,
		HealthCheckRequest: healthCheckRequest,
	}
	mock.lockCheck.Lock()
	mock.calls.Check = append(mock.calls.Check, callInfo)
	mock.lockCheck.Unlock()
	return mock.CheckFunc(context1, healthCheckRequest)
}

// CheckCalls gets all the calls that were made to Check.
// Check the length with:
//
//	len(mockedHealthServiceServer.CheckCalls())
func (mock *MockHealthServiceServer) CheckCalls() []struct {
	Context1           context.Context
	HealthCheckRequest *dapmuxv1.HealthCheckRequest
} {
	var calls []struct {
		Context1           context.Context
		HealthCheckRequest *dapmuxv1.HealthCheckRequest
	}
	mock.lockCheck.RLock()
	calls = mock.calls.Check
	mock.lockCheck.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *MockHealthServiceServer) Watch(healthCheckRequest *dapmuxv1.HealthCheckRequest, serverStreamingServer grpc.ServerStreamingServer[dapmuxv1.HealthCheckResponse]) error {
	if mock.WatchFunc == nil {
		panic("MockHealthServiceServer.WatchFunc: method is nil but HealthServiceServer.Watch was just called")
	}
	callInfo := struct {
		HealthCheckRequest    *dapmuxv1.HealthCheckRequest
		ServerStreamingServer grpc.ServerStreamingServer[dapmuxv1.HealthCheckResponse]
	}{
		HealthCheckRequest:    healthCheckRequest,
		ServerStreamingServer: serverStreamingServer,
	}
	mock.lockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	mock.lockWatch.Unlock()
	return mock.WatchFunc(healthCheckRequest, serverStreamingServer)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//
//	len(mockedHealthServiceServer.WatchCalls())
func (mock *MockHealthServiceServer) WatchCalls() []struct {
	HealthCheckRequest    *dapmuxv1.HealthCheckRequest
	ServerStreamingServer grpc.ServerStreamingServer[dapmuxv1.HealthCheckResponse]
} {
	var calls []struct {
		HealthCheckRequest    *dapmuxv1.HealthCheckRequest
		ServerStreamingServer grpc.ServerStreamingServer[dapmuxv1.HealthCheckResponse]
	}
	mock.lockWatch.RLock()
	calls = mock.calls.Watch
	mock.lockWatch.RUnlock()
	return calls
}
