// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockdapmuxv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/dapmux/v1"
	"google.golang.org/grpc"
)

// Ensure that MockHealthServiceClient does implement dapmuxv1.HealthServiceClient.
// If this is not the case, regenerate this file with mockery.
var _ dapmuxv1.HealthServiceClient = &MockHealthServiceClient{}

// MockHealthServiceClient is a mock implementation of dapmuxv1.HealthServiceClient.
//
//	func TestSomethingThatUsesHealthServiceClient(t *testing.T) {
//
//		// make and configure a mocked dapmuxv1.HealthServiceClient
//		mockedHealthServiceClient := &MockHealthServiceClient{
//			CheckFunc: func(ctx context.Context, in *dapmuxv1.HealthCheckRequest, opts ...grpc.CallOption) (*dapmuxv1.HealthCheckResponse, error) {
//				panic("mock out the Check method")
//			},
//			WatchFunc: func(ctx context.Context, in *dapmuxv1.HealthCheckRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[dapmuxv1.HealthCheckResponse], error) {
//				panic("mock out the Watch method")
//			},
//		}
//
//		// use mockedHealthServiceClient in code that requires dapmuxv1.HealthServiceClient
//		// and then make assertions.
//
//	}
type MockHealthServiceClient struct {
	// CheckFunc mocks the Check method.
	CheckFunc func(ctx context.Context, in *dapmuxv1.HealthCheckRequest, opts ...grpc.CallOption) (*dapmuxv1.HealthCheckResponse, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(ctx context.Context, in *dapmuxv1.HealthCheckRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[dapmuxv1.HealthCheckResponse], error)

	// calls tracks calls to the methods.
	calls struct {
		// Check holds details about calls to the Check method.
		Check []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *dapmuxv1.HealthCheckRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *dapmuxv1.HealthCheckRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockCheck sync.RWMutex
	lockWatch sync.RWMutex
}

// Check calls CheckFunc.
func (mock *MockHealthServiceClient) Check(ctx context.Context, in *dapmuxv1.HealthCheckRequest, opts ...grpc.CallOption) (*dapmuxv1.HealthCheckResponse, error) {
	if mock.CheckFunc == nil {
		panic("MockHealthServiceClient.CheckFunc: method is nil but HealthServiceClient.Check was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *dapmuxv1.HealthCheckRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockCheck.Lock()
	mock.calls.Check = append(mock.calls.Check, callInfo)
	mock.lockCheck.Unlock()
	return mock.CheckFunc(ctx, in, opts...)
}

// CheckCalls gets all the calls that were made to Check.
// Check the length with:
//
//	len(mockedHealthServiceClient.CheckCalls())
func (mock *MockHealthServiceClient) CheckCalls() []struct {
	Ctx  context.Context
	In   *dapmuxv1.HealthCheckRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *dapmuxv1.HealthCheckRequest
		Opts []grpc.CallOption
	}
	mock.lockCheck.RLock()
	calls = mock.calls.Check
	mock.lockCheck.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *MockHealthServiceClient) Watch(ctx context.Context, in *dapmuxv1.HealthCheckRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[dapmuxv1.HealthCheckResponse], error) {
	if mock.WatchFunc == nil {
		panic("MockHealthServiceClient.WatchFunc: method is nil but HealthServiceClient.Watch was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *dapmuxv1.HealthCheckRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	mock.lockWatch.Unlock()
	return mock.WatchFunc(ctx, in, opts...)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//
//	len(mockedHealthServiceClient.WatchCalls())
func (mock *MockHealthServiceClient) WatchCalls() []struct {
	Ctx  context.Context
	In   *dapmuxv1.HealthCheckRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *dapmuxv1.HealthCheckRequest
		Opts []grpc.CallOption
	}
	mock.lockWatch.RLock()
	calls = mock.calls.Watch
	mock.lockWatch.RUnlock()
	return calls
}
