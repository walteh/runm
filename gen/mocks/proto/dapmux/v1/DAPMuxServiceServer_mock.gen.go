// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockdapmuxv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/dapmux/v1"
	"google.golang.org/grpc"
)

// Ensure that MockDAPMuxServiceServer does implement dapmuxv1.DAPMuxServiceServer.
// If this is not the case, regenerate this file with mockery.
var _ dapmuxv1.DAPMuxServiceServer = &MockDAPMuxServiceServer{}

// MockDAPMuxServiceServer is a mock implementation of dapmuxv1.DAPMuxServiceServer.
//
//	func TestSomethingThatUsesDAPMuxServiceServer(t *testing.T) {
//
//		// make and configure a mocked dapmuxv1.DAPMuxServiceServer
//		mockedDAPMuxServiceServer := &MockDAPMuxServiceServer{
//			ForwardDAPMessageFunc: func(context1 context.Context, forwardDAPMessageRequest *dapmuxv1.ForwardDAPMessageRequest) (*dapmuxv1.ForwardDAPMessageResponse, error) {
//				panic("mock out the ForwardDAPMessage method")
//			},
//			ListTargetsFunc: func(context1 context.Context, listTargetsRequest *dapmuxv1.ListTargetsRequest) (*dapmuxv1.ListTargetsResponse, error) {
//				panic("mock out the ListTargets method")
//			},
//			RegisterTargetFunc: func(context1 context.Context, registerTargetRequest *dapmuxv1.RegisterTargetRequest) (*dapmuxv1.RegisterTargetResponse, error) {
//				panic("mock out the RegisterTarget method")
//			},
//			SetActiveTargetFunc: func(context1 context.Context, setActiveTargetRequest *dapmuxv1.SetActiveTargetRequest) (*dapmuxv1.SetActiveTargetResponse, error) {
//				panic("mock out the SetActiveTarget method")
//			},
//			StreamTargetEventsFunc: func(streamTargetEventsRequest *dapmuxv1.StreamTargetEventsRequest, serverStreamingServer grpc.ServerStreamingServer[dapmuxv1.TargetEvent]) error {
//				panic("mock out the StreamTargetEvents method")
//			},
//			UnregisterTargetFunc: func(context1 context.Context, unregisterTargetRequest *dapmuxv1.UnregisterTargetRequest) (*dapmuxv1.UnregisterTargetResponse, error) {
//				panic("mock out the UnregisterTarget method")
//			},
//		}
//
//		// use mockedDAPMuxServiceServer in code that requires dapmuxv1.DAPMuxServiceServer
//		// and then make assertions.
//
//	}
type MockDAPMuxServiceServer struct {
	// ForwardDAPMessageFunc mocks the ForwardDAPMessage method.
	ForwardDAPMessageFunc func(context1 context.Context, forwardDAPMessageRequest *dapmuxv1.ForwardDAPMessageRequest) (*dapmuxv1.ForwardDAPMessageResponse, error)

	// ListTargetsFunc mocks the ListTargets method.
	ListTargetsFunc func(context1 context.Context, listTargetsRequest *dapmuxv1.ListTargetsRequest) (*dapmuxv1.ListTargetsResponse, error)

	// RegisterTargetFunc mocks the RegisterTarget method.
	RegisterTargetFunc func(context1 context.Context, registerTargetRequest *dapmuxv1.RegisterTargetRequest) (*dapmuxv1.RegisterTargetResponse, error)

	// SetActiveTargetFunc mocks the SetActiveTarget method.
	SetActiveTargetFunc func(context1 context.Context, setActiveTargetRequest *dapmuxv1.SetActiveTargetRequest) (*dapmuxv1.SetActiveTargetResponse, error)

	// StreamTargetEventsFunc mocks the StreamTargetEvents method.
	StreamTargetEventsFunc func(streamTargetEventsRequest *dapmuxv1.StreamTargetEventsRequest, serverStreamingServer grpc.ServerStreamingServer[dapmuxv1.TargetEvent]) error

	// UnregisterTargetFunc mocks the UnregisterTarget method.
	UnregisterTargetFunc func(context1 context.Context, unregisterTargetRequest *dapmuxv1.UnregisterTargetRequest) (*dapmuxv1.UnregisterTargetResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// ForwardDAPMessage holds details about calls to the ForwardDAPMessage method.
		ForwardDAPMessage []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// ForwardDAPMessageRequest is the forwardDAPMessageRequest argument value.
			ForwardDAPMessageRequest *dapmuxv1.ForwardDAPMessageRequest
		}
		// ListTargets holds details about calls to the ListTargets method.
		ListTargets []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// ListTargetsRequest is the listTargetsRequest argument value.
			ListTargetsRequest *dapmuxv1.ListTargetsRequest
		}
		// RegisterTarget holds details about calls to the RegisterTarget method.
		RegisterTarget []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RegisterTargetRequest is the registerTargetRequest argument value.
			RegisterTargetRequest *dapmuxv1.RegisterTargetRequest
		}
		// SetActiveTarget holds details about calls to the SetActiveTarget method.
		SetActiveTarget []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// SetActiveTargetRequest is the setActiveTargetRequest argument value.
			SetActiveTargetRequest *dapmuxv1.SetActiveTargetRequest
		}
		// StreamTargetEvents holds details about calls to the StreamTargetEvents method.
		StreamTargetEvents []struct {
			// StreamTargetEventsRequest is the streamTargetEventsRequest argument value.
			StreamTargetEventsRequest *dapmuxv1.StreamTargetEventsRequest
			// ServerStreamingServer is the serverStreamingServer argument value.
			ServerStreamingServer grpc.ServerStreamingServer[dapmuxv1.TargetEvent]
		}
		// UnregisterTarget holds details about calls to the UnregisterTarget method.
		UnregisterTarget []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// UnregisterTargetRequest is the unregisterTargetRequest argument value.
			UnregisterTargetRequest *dapmuxv1.UnregisterTargetRequest
		}
	}
	lockForwardDAPMessage  sync.RWMutex
	lockListTargets        sync.RWMutex
	lockRegisterTarget     sync.RWMutex
	lockSetActiveTarget    sync.RWMutex
	lockStreamTargetEvents sync.RWMutex
	lockUnregisterTarget   sync.RWMutex
}

// ForwardDAPMessage calls ForwardDAPMessageFunc.
func (mock *MockDAPMuxServiceServer) ForwardDAPMessage(context1 context.Context, forwardDAPMessageRequest *dapmuxv1.ForwardDAPMessageRequest) (*dapmuxv1.ForwardDAPMessageResponse, error) {
	if mock.ForwardDAPMessageFunc == nil {
		panic("MockDAPMuxServiceServer.ForwardDAPMessageFunc: method is nil but DAPMuxServiceServer.ForwardDAPMessage was just called")
	}
	callInfo := struct {
		Context1                 context.Context
		ForwardDAPMessageRequest *dapmuxv1.ForwardDAPMessageRequest
	}{
		Context1:                 context1,
		ForwardDAPMessageRequest: forwardDAPMessageRequest,
	}
	mock.lockForwardDAPMessage.Lock()
	mock.calls.ForwardDAPMessage = append(mock.calls.ForwardDAPMessage, callInfo)
	mock.lockForwardDAPMessage.Unlock()
	return mock.ForwardDAPMessageFunc(context1, forwardDAPMessageRequest)
}

// ForwardDAPMessageCalls gets all the calls that were made to ForwardDAPMessage.
// Check the length with:
//
//	len(mockedDAPMuxServiceServer.ForwardDAPMessageCalls())
func (mock *MockDAPMuxServiceServer) ForwardDAPMessageCalls() []struct {
	Context1                 context.Context
	ForwardDAPMessageRequest *dapmuxv1.ForwardDAPMessageRequest
} {
	var calls []struct {
		Context1                 context.Context
		ForwardDAPMessageRequest *dapmuxv1.ForwardDAPMessageRequest
	}
	mock.lockForwardDAPMessage.RLock()
	calls = mock.calls.ForwardDAPMessage
	mock.lockForwardDAPMessage.RUnlock()
	return calls
}

// ListTargets calls ListTargetsFunc.
func (mock *MockDAPMuxServiceServer) ListTargets(context1 context.Context, listTargetsRequest *dapmuxv1.ListTargetsRequest) (*dapmuxv1.ListTargetsResponse, error) {
	if mock.ListTargetsFunc == nil {
		panic("MockDAPMuxServiceServer.ListTargetsFunc: method is nil but DAPMuxServiceServer.ListTargets was just called")
	}
	callInfo := struct {
		Context1           context.Context
		ListTargetsRequest *dapmuxv1.ListTargetsRequest
	}{
		Context1:           context1,
		ListTargetsRequest: listTargetsRequest,
	}
	mock.lockListTargets.Lock()
	mock.calls.ListTargets = append(mock.calls.ListTargets, callInfo)
	mock.lockListTargets.Unlock()
	return mock.ListTargetsFunc(context1, listTargetsRequest)
}

// ListTargetsCalls gets all the calls that were made to ListTargets.
// Check the length with:
//
//	len(mockedDAPMuxServiceServer.ListTargetsCalls())
func (mock *MockDAPMuxServiceServer) ListTargetsCalls() []struct {
	Context1           context.Context
	ListTargetsRequest *dapmuxv1.ListTargetsRequest
} {
	var calls []struct {
		Context1           context.Context
		ListTargetsRequest *dapmuxv1.ListTargetsRequest
	}
	mock.lockListTargets.RLock()
	calls = mock.calls.ListTargets
	mock.lockListTargets.RUnlock()
	return calls
}

// RegisterTarget calls RegisterTargetFunc.
func (mock *MockDAPMuxServiceServer) RegisterTarget(context1 context.Context, registerTargetRequest *dapmuxv1.RegisterTargetRequest) (*dapmuxv1.RegisterTargetResponse, error) {
	if mock.RegisterTargetFunc == nil {
		panic("MockDAPMuxServiceServer.RegisterTargetFunc: method is nil but DAPMuxServiceServer.RegisterTarget was just called")
	}
	callInfo := struct {
		Context1              context.Context
		RegisterTargetRequest *dapmuxv1.RegisterTargetRequest
	}{
		Context1:              context1,
		RegisterTargetRequest: registerTargetRequest,
	}
	mock.lockRegisterTarget.Lock()
	mock.calls.RegisterTarget = append(mock.calls.RegisterTarget, callInfo)
	mock.lockRegisterTarget.Unlock()
	return mock.RegisterTargetFunc(context1, registerTargetRequest)
}

// RegisterTargetCalls gets all the calls that were made to RegisterTarget.
// Check the length with:
//
//	len(mockedDAPMuxServiceServer.RegisterTargetCalls())
func (mock *MockDAPMuxServiceServer) RegisterTargetCalls() []struct {
	Context1              context.Context
	RegisterTargetRequest *dapmuxv1.RegisterTargetRequest
} {
	var calls []struct {
		Context1              context.Context
		RegisterTargetRequest *dapmuxv1.RegisterTargetRequest
	}
	mock.lockRegisterTarget.RLock()
	calls = mock.calls.RegisterTarget
	mock.lockRegisterTarget.RUnlock()
	return calls
}

// SetActiveTarget calls SetActiveTargetFunc.
func (mock *MockDAPMuxServiceServer) SetActiveTarget(context1 context.Context, setActiveTargetRequest *dapmuxv1.SetActiveTargetRequest) (*dapmuxv1.SetActiveTargetResponse, error) {
	if mock.SetActiveTargetFunc == nil {
		panic("MockDAPMuxServiceServer.SetActiveTargetFunc: method is nil but DAPMuxServiceServer.SetActiveTarget was just called")
	}
	callInfo := struct {
		Context1               context.Context
		SetActiveTargetRequest *dapmuxv1.SetActiveTargetRequest
	}{
		Context1:               context1,
		SetActiveTargetRequest: setActiveTargetRequest,
	}
	mock.lockSetActiveTarget.Lock()
	mock.calls.SetActiveTarget = append(mock.calls.SetActiveTarget, callInfo)
	mock.lockSetActiveTarget.Unlock()
	return mock.SetActiveTargetFunc(context1, setActiveTargetRequest)
}

// SetActiveTargetCalls gets all the calls that were made to SetActiveTarget.
// Check the length with:
//
//	len(mockedDAPMuxServiceServer.SetActiveTargetCalls())
func (mock *MockDAPMuxServiceServer) SetActiveTargetCalls() []struct {
	Context1               context.Context
	SetActiveTargetRequest *dapmuxv1.SetActiveTargetRequest
} {
	var calls []struct {
		Context1               context.Context
		SetActiveTargetRequest *dapmuxv1.SetActiveTargetRequest
	}
	mock.lockSetActiveTarget.RLock()
	calls = mock.calls.SetActiveTarget
	mock.lockSetActiveTarget.RUnlock()
	return calls
}

// StreamTargetEvents calls StreamTargetEventsFunc.
func (mock *MockDAPMuxServiceServer) StreamTargetEvents(streamTargetEventsRequest *dapmuxv1.StreamTargetEventsRequest, serverStreamingServer grpc.ServerStreamingServer[dapmuxv1.TargetEvent]) error {
	if mock.StreamTargetEventsFunc == nil {
		panic("MockDAPMuxServiceServer.StreamTargetEventsFunc: method is nil but DAPMuxServiceServer.StreamTargetEvents was just called")
	}
	callInfo := struct {
		StreamTargetEventsRequest *dapmuxv1.StreamTargetEventsRequest
		ServerStreamingServer     grpc.ServerStreamingServer[dapmuxv1.TargetEvent]
	}{
		StreamTargetEventsRequest: streamTargetEventsRequest,
		ServerStreamingServer:     serverStreamingServer,
	}
	mock.lockStreamTargetEvents.Lock()
	mock.calls.StreamTargetEvents = append(mock.calls.StreamTargetEvents, callInfo)
	mock.lockStreamTargetEvents.Unlock()
	return mock.StreamTargetEventsFunc(streamTargetEventsRequest, serverStreamingServer)
}

// StreamTargetEventsCalls gets all the calls that were made to StreamTargetEvents.
// Check the length with:
//
//	len(mockedDAPMuxServiceServer.StreamTargetEventsCalls())
func (mock *MockDAPMuxServiceServer) StreamTargetEventsCalls() []struct {
	StreamTargetEventsRequest *dapmuxv1.StreamTargetEventsRequest
	ServerStreamingServer     grpc.ServerStreamingServer[dapmuxv1.TargetEvent]
} {
	var calls []struct {
		StreamTargetEventsRequest *dapmuxv1.StreamTargetEventsRequest
		ServerStreamingServer     grpc.ServerStreamingServer[dapmuxv1.TargetEvent]
	}
	mock.lockStreamTargetEvents.RLock()
	calls = mock.calls.StreamTargetEvents
	mock.lockStreamTargetEvents.RUnlock()
	return calls
}

// UnregisterTarget calls UnregisterTargetFunc.
func (mock *MockDAPMuxServiceServer) UnregisterTarget(context1 context.Context, unregisterTargetRequest *dapmuxv1.UnregisterTargetRequest) (*dapmuxv1.UnregisterTargetResponse, error) {
	if mock.UnregisterTargetFunc == nil {
		panic("MockDAPMuxServiceServer.UnregisterTargetFunc: method is nil but DAPMuxServiceServer.UnregisterTarget was just called")
	}
	callInfo := struct {
		Context1                context.Context
		UnregisterTargetRequest *dapmuxv1.UnregisterTargetRequest
	}{
		Context1:                context1,
		UnregisterTargetRequest: unregisterTargetRequest,
	}
	mock.lockUnregisterTarget.Lock()
	mock.calls.UnregisterTarget = append(mock.calls.UnregisterTarget, callInfo)
	mock.lockUnregisterTarget.Unlock()
	return mock.UnregisterTargetFunc(context1, unregisterTargetRequest)
}

// UnregisterTargetCalls gets all the calls that were made to UnregisterTarget.
// Check the length with:
//
//	len(mockedDAPMuxServiceServer.UnregisterTargetCalls())
func (mock *MockDAPMuxServiceServer) UnregisterTargetCalls() []struct {
	Context1                context.Context
	UnregisterTargetRequest *dapmuxv1.UnregisterTargetRequest
} {
	var calls []struct {
		Context1                context.Context
		UnregisterTargetRequest *dapmuxv1.UnregisterTargetRequest
	}
	mock.lockUnregisterTarget.RLock()
	calls = mock.calls.UnregisterTarget
	mock.lockUnregisterTarget.RUnlock()
	return calls
}
