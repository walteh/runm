// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockrunmv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/v1"
	"google.golang.org/grpc"
)

// Ensure that MockCgroupAdapterServiceServer does implement runmv1.CgroupAdapterServiceServer.
// If this is not the case, regenerate this file with mockery.
var _ runmv1.CgroupAdapterServiceServer = &MockCgroupAdapterServiceServer{}

// MockCgroupAdapterServiceServer is a mock implementation of runmv1.CgroupAdapterServiceServer.
//
//	func TestSomethingThatUsesCgroupAdapterServiceServer(t *testing.T) {
//
//		// make and configure a mocked runmv1.CgroupAdapterServiceServer
//		mockedCgroupAdapterServiceServer := &MockCgroupAdapterServiceServer{
//			GetCgroupStatsFunc: func(context1 context.Context, getCgroupStatsRequest *runmv1.GetCgroupStatsRequest) (*runmv1.GetCgroupStatsResponse, error) {
//				panic("mock out the GetCgroupStats method")
//			},
//			StreamCgroupEventsFunc: func(streamCgroupEventsRequest *runmv1.StreamCgroupEventsRequest, serverStreamingServer grpc.ServerStreamingServer[runmv1.StreamCgroupEventsResponse]) error {
//				panic("mock out the StreamCgroupEvents method")
//			},
//			ToggleAllControllersFunc: func(context1 context.Context, toggleAllControllersRequest *runmv1.ToggleAllControllersRequest) (*runmv1.ToggleAllControllersResponse, error) {
//				panic("mock out the ToggleAllControllers method")
//			},
//		}
//
//		// use mockedCgroupAdapterServiceServer in code that requires runmv1.CgroupAdapterServiceServer
//		// and then make assertions.
//
//	}
type MockCgroupAdapterServiceServer struct {
	// GetCgroupStatsFunc mocks the GetCgroupStats method.
	GetCgroupStatsFunc func(context1 context.Context, getCgroupStatsRequest *runmv1.GetCgroupStatsRequest) (*runmv1.GetCgroupStatsResponse, error)

	// StreamCgroupEventsFunc mocks the StreamCgroupEvents method.
	StreamCgroupEventsFunc func(streamCgroupEventsRequest *runmv1.StreamCgroupEventsRequest, serverStreamingServer grpc.ServerStreamingServer[runmv1.StreamCgroupEventsResponse]) error

	// ToggleAllControllersFunc mocks the ToggleAllControllers method.
	ToggleAllControllersFunc func(context1 context.Context, toggleAllControllersRequest *runmv1.ToggleAllControllersRequest) (*runmv1.ToggleAllControllersResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCgroupStats holds details about calls to the GetCgroupStats method.
		GetCgroupStats []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// GetCgroupStatsRequest is the getCgroupStatsRequest argument value.
			GetCgroupStatsRequest *runmv1.GetCgroupStatsRequest
		}
		// StreamCgroupEvents holds details about calls to the StreamCgroupEvents method.
		StreamCgroupEvents []struct {
			// StreamCgroupEventsRequest is the streamCgroupEventsRequest argument value.
			StreamCgroupEventsRequest *runmv1.StreamCgroupEventsRequest
			// ServerStreamingServer is the serverStreamingServer argument value.
			ServerStreamingServer grpc.ServerStreamingServer[runmv1.StreamCgroupEventsResponse]
		}
		// ToggleAllControllers holds details about calls to the ToggleAllControllers method.
		ToggleAllControllers []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// ToggleAllControllersRequest is the toggleAllControllersRequest argument value.
			ToggleAllControllersRequest *runmv1.ToggleAllControllersRequest
		}
	}
	lockGetCgroupStats       sync.RWMutex
	lockStreamCgroupEvents   sync.RWMutex
	lockToggleAllControllers sync.RWMutex
}

// GetCgroupStats calls GetCgroupStatsFunc.
func (mock *MockCgroupAdapterServiceServer) GetCgroupStats(context1 context.Context, getCgroupStatsRequest *runmv1.GetCgroupStatsRequest) (*runmv1.GetCgroupStatsResponse, error) {
	if mock.GetCgroupStatsFunc == nil {
		panic("MockCgroupAdapterServiceServer.GetCgroupStatsFunc: method is nil but CgroupAdapterServiceServer.GetCgroupStats was just called")
	}
	callInfo := struct {
		Context1              context.Context
		GetCgroupStatsRequest *runmv1.GetCgroupStatsRequest
	}{
		Context1:              context1,
		GetCgroupStatsRequest: getCgroupStatsRequest,
	}
	mock.lockGetCgroupStats.Lock()
	mock.calls.GetCgroupStats = append(mock.calls.GetCgroupStats, callInfo)
	mock.lockGetCgroupStats.Unlock()
	return mock.GetCgroupStatsFunc(context1, getCgroupStatsRequest)
}

// GetCgroupStatsCalls gets all the calls that were made to GetCgroupStats.
// Check the length with:
//
//	len(mockedCgroupAdapterServiceServer.GetCgroupStatsCalls())
func (mock *MockCgroupAdapterServiceServer) GetCgroupStatsCalls() []struct {
	Context1              context.Context
	GetCgroupStatsRequest *runmv1.GetCgroupStatsRequest
} {
	var calls []struct {
		Context1              context.Context
		GetCgroupStatsRequest *runmv1.GetCgroupStatsRequest
	}
	mock.lockGetCgroupStats.RLock()
	calls = mock.calls.GetCgroupStats
	mock.lockGetCgroupStats.RUnlock()
	return calls
}

// StreamCgroupEvents calls StreamCgroupEventsFunc.
func (mock *MockCgroupAdapterServiceServer) StreamCgroupEvents(streamCgroupEventsRequest *runmv1.StreamCgroupEventsRequest, serverStreamingServer grpc.ServerStreamingServer[runmv1.StreamCgroupEventsResponse]) error {
	if mock.StreamCgroupEventsFunc == nil {
		panic("MockCgroupAdapterServiceServer.StreamCgroupEventsFunc: method is nil but CgroupAdapterServiceServer.StreamCgroupEvents was just called")
	}
	callInfo := struct {
		StreamCgroupEventsRequest *runmv1.StreamCgroupEventsRequest
		ServerStreamingServer     grpc.ServerStreamingServer[runmv1.StreamCgroupEventsResponse]
	}{
		StreamCgroupEventsRequest: streamCgroupEventsRequest,
		ServerStreamingServer:     serverStreamingServer,
	}
	mock.lockStreamCgroupEvents.Lock()
	mock.calls.StreamCgroupEvents = append(mock.calls.StreamCgroupEvents, callInfo)
	mock.lockStreamCgroupEvents.Unlock()
	return mock.StreamCgroupEventsFunc(streamCgroupEventsRequest, serverStreamingServer)
}

// StreamCgroupEventsCalls gets all the calls that were made to StreamCgroupEvents.
// Check the length with:
//
//	len(mockedCgroupAdapterServiceServer.StreamCgroupEventsCalls())
func (mock *MockCgroupAdapterServiceServer) StreamCgroupEventsCalls() []struct {
	StreamCgroupEventsRequest *runmv1.StreamCgroupEventsRequest
	ServerStreamingServer     grpc.ServerStreamingServer[runmv1.StreamCgroupEventsResponse]
} {
	var calls []struct {
		StreamCgroupEventsRequest *runmv1.StreamCgroupEventsRequest
		ServerStreamingServer     grpc.ServerStreamingServer[runmv1.StreamCgroupEventsResponse]
	}
	mock.lockStreamCgroupEvents.RLock()
	calls = mock.calls.StreamCgroupEvents
	mock.lockStreamCgroupEvents.RUnlock()
	return calls
}

// ToggleAllControllers calls ToggleAllControllersFunc.
func (mock *MockCgroupAdapterServiceServer) ToggleAllControllers(context1 context.Context, toggleAllControllersRequest *runmv1.ToggleAllControllersRequest) (*runmv1.ToggleAllControllersResponse, error) {
	if mock.ToggleAllControllersFunc == nil {
		panic("MockCgroupAdapterServiceServer.ToggleAllControllersFunc: method is nil but CgroupAdapterServiceServer.ToggleAllControllers was just called")
	}
	callInfo := struct {
		Context1                    context.Context
		ToggleAllControllersRequest *runmv1.ToggleAllControllersRequest
	}{
		Context1:                    context1,
		ToggleAllControllersRequest: toggleAllControllersRequest,
	}
	mock.lockToggleAllControllers.Lock()
	mock.calls.ToggleAllControllers = append(mock.calls.ToggleAllControllers, callInfo)
	mock.lockToggleAllControllers.Unlock()
	return mock.ToggleAllControllersFunc(context1, toggleAllControllersRequest)
}

// ToggleAllControllersCalls gets all the calls that were made to ToggleAllControllers.
// Check the length with:
//
//	len(mockedCgroupAdapterServiceServer.ToggleAllControllersCalls())
func (mock *MockCgroupAdapterServiceServer) ToggleAllControllersCalls() []struct {
	Context1                    context.Context
	ToggleAllControllersRequest *runmv1.ToggleAllControllersRequest
} {
	var calls []struct {
		Context1                    context.Context
		ToggleAllControllersRequest *runmv1.ToggleAllControllersRequest
	}
	mock.lockToggleAllControllers.RLock()
	calls = mock.calls.ToggleAllControllers
	mock.lockToggleAllControllers.RUnlock()
	return calls
}
