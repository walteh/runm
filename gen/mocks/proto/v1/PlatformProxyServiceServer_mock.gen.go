// Code generated by mockery. DO NOT EDIT.

package mockrunvv1

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	runvv1 "github.com/walteh/runv/proto/v1"
)

// MockPlatformProxyServiceServer is an autogenerated mock type for the PlatformProxyServiceServer type
type MockPlatformProxyServiceServer struct {
	mock.Mock
}

type MockPlatformProxyServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlatformProxyServiceServer) EXPECT() *MockPlatformProxyServiceServer_Expecter {
	return &MockPlatformProxyServiceServer_Expecter{mock: &_m.Mock}
}

// ClosePlatform provides a mock function with given fields: _a0, _a1
func (_m *MockPlatformProxyServiceServer) ClosePlatform(_a0 context.Context, _a1 *runvv1.ClosePlatformRequest) (*runvv1.ClosePlatformResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ClosePlatform")
	}

	var r0 *runvv1.ClosePlatformResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.ClosePlatformRequest) (*runvv1.ClosePlatformResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.ClosePlatformRequest) *runvv1.ClosePlatformResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.ClosePlatformResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.ClosePlatformRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlatformProxyServiceServer_ClosePlatform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClosePlatform'
type MockPlatformProxyServiceServer_ClosePlatform_Call struct {
	*mock.Call
}

// ClosePlatform is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *runvv1.ClosePlatformRequest
func (_e *MockPlatformProxyServiceServer_Expecter) ClosePlatform(_a0 interface{}, _a1 interface{}) *MockPlatformProxyServiceServer_ClosePlatform_Call {
	return &MockPlatformProxyServiceServer_ClosePlatform_Call{Call: _e.mock.On("ClosePlatform", _a0, _a1)}
}

func (_c *MockPlatformProxyServiceServer_ClosePlatform_Call) Run(run func(_a0 context.Context, _a1 *runvv1.ClosePlatformRequest)) *MockPlatformProxyServiceServer_ClosePlatform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*runvv1.ClosePlatformRequest))
	})
	return _c
}

func (_c *MockPlatformProxyServiceServer_ClosePlatform_Call) Return(_a0 *runvv1.ClosePlatformResponse, _a1 error) *MockPlatformProxyServiceServer_ClosePlatform_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlatformProxyServiceServer_ClosePlatform_Call) RunAndReturn(run func(context.Context, *runvv1.ClosePlatformRequest) (*runvv1.ClosePlatformResponse, error)) *MockPlatformProxyServiceServer_ClosePlatform_Call {
	_c.Call.Return(run)
	return _c
}

// CopyConsole provides a mock function with given fields: _a0, _a1
func (_m *MockPlatformProxyServiceServer) CopyConsole(_a0 context.Context, _a1 *runvv1.CopyConsoleRequest) (*runvv1.CopyConsoleResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CopyConsole")
	}

	var r0 *runvv1.CopyConsoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.CopyConsoleRequest) (*runvv1.CopyConsoleResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.CopyConsoleRequest) *runvv1.CopyConsoleResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.CopyConsoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.CopyConsoleRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlatformProxyServiceServer_CopyConsole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyConsole'
type MockPlatformProxyServiceServer_CopyConsole_Call struct {
	*mock.Call
}

// CopyConsole is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *runvv1.CopyConsoleRequest
func (_e *MockPlatformProxyServiceServer_Expecter) CopyConsole(_a0 interface{}, _a1 interface{}) *MockPlatformProxyServiceServer_CopyConsole_Call {
	return &MockPlatformProxyServiceServer_CopyConsole_Call{Call: _e.mock.On("CopyConsole", _a0, _a1)}
}

func (_c *MockPlatformProxyServiceServer_CopyConsole_Call) Run(run func(_a0 context.Context, _a1 *runvv1.CopyConsoleRequest)) *MockPlatformProxyServiceServer_CopyConsole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*runvv1.CopyConsoleRequest))
	})
	return _c
}

func (_c *MockPlatformProxyServiceServer_CopyConsole_Call) Return(_a0 *runvv1.CopyConsoleResponse, _a1 error) *MockPlatformProxyServiceServer_CopyConsole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlatformProxyServiceServer_CopyConsole_Call) RunAndReturn(run func(context.Context, *runvv1.CopyConsoleRequest) (*runvv1.CopyConsoleResponse, error)) *MockPlatformProxyServiceServer_CopyConsole_Call {
	_c.Call.Return(run)
	return _c
}

// ShutdownConsole provides a mock function with given fields: _a0, _a1
func (_m *MockPlatformProxyServiceServer) ShutdownConsole(_a0 context.Context, _a1 *runvv1.ShutdownConsoleRequest) (*runvv1.ShutdownConsoleResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ShutdownConsole")
	}

	var r0 *runvv1.ShutdownConsoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.ShutdownConsoleRequest) (*runvv1.ShutdownConsoleResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.ShutdownConsoleRequest) *runvv1.ShutdownConsoleResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.ShutdownConsoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.ShutdownConsoleRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlatformProxyServiceServer_ShutdownConsole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutdownConsole'
type MockPlatformProxyServiceServer_ShutdownConsole_Call struct {
	*mock.Call
}

// ShutdownConsole is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *runvv1.ShutdownConsoleRequest
func (_e *MockPlatformProxyServiceServer_Expecter) ShutdownConsole(_a0 interface{}, _a1 interface{}) *MockPlatformProxyServiceServer_ShutdownConsole_Call {
	return &MockPlatformProxyServiceServer_ShutdownConsole_Call{Call: _e.mock.On("ShutdownConsole", _a0, _a1)}
}

func (_c *MockPlatformProxyServiceServer_ShutdownConsole_Call) Run(run func(_a0 context.Context, _a1 *runvv1.ShutdownConsoleRequest)) *MockPlatformProxyServiceServer_ShutdownConsole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*runvv1.ShutdownConsoleRequest))
	})
	return _c
}

func (_c *MockPlatformProxyServiceServer_ShutdownConsole_Call) Return(_a0 *runvv1.ShutdownConsoleResponse, _a1 error) *MockPlatformProxyServiceServer_ShutdownConsole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlatformProxyServiceServer_ShutdownConsole_Call) RunAndReturn(run func(context.Context, *runvv1.ShutdownConsoleRequest) (*runvv1.ShutdownConsoleResponse, error)) *MockPlatformProxyServiceServer_ShutdownConsole_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedPlatformProxyServiceServer provides a mock function with no fields
func (_m *MockPlatformProxyServiceServer) mustEmbedUnimplementedPlatformProxyServiceServer() {
	_m.Called()
}

// MockPlatformProxyServiceServer_mustEmbedUnimplementedPlatformProxyServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedPlatformProxyServiceServer'
type MockPlatformProxyServiceServer_mustEmbedUnimplementedPlatformProxyServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedPlatformProxyServiceServer is a helper method to define mock.On call
func (_e *MockPlatformProxyServiceServer_Expecter) mustEmbedUnimplementedPlatformProxyServiceServer() *MockPlatformProxyServiceServer_mustEmbedUnimplementedPlatformProxyServiceServer_Call {
	return &MockPlatformProxyServiceServer_mustEmbedUnimplementedPlatformProxyServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedPlatformProxyServiceServer")}
}

func (_c *MockPlatformProxyServiceServer_mustEmbedUnimplementedPlatformProxyServiceServer_Call) Run(run func()) *MockPlatformProxyServiceServer_mustEmbedUnimplementedPlatformProxyServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlatformProxyServiceServer_mustEmbedUnimplementedPlatformProxyServiceServer_Call) Return() *MockPlatformProxyServiceServer_mustEmbedUnimplementedPlatformProxyServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPlatformProxyServiceServer_mustEmbedUnimplementedPlatformProxyServiceServer_Call) RunAndReturn(run func()) *MockPlatformProxyServiceServer_mustEmbedUnimplementedPlatformProxyServiceServer_Call {
	_c.Run(run)
	return _c
}

// NewMockPlatformProxyServiceServer creates a new instance of MockPlatformProxyServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlatformProxyServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlatformProxyServiceServer {
	mock := &MockPlatformProxyServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
