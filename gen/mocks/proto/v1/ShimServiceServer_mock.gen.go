// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockrunmv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/v1"
)

// Ensure that MockShimServiceServer does implement runmv1.ShimServiceServer.
// If this is not the case, regenerate this file with mockery.
var _ runmv1.ShimServiceServer = &MockShimServiceServer{}

// MockShimServiceServer is a mock implementation of runmv1.ShimServiceServer.
//
//	func TestSomethingThatUsesShimServiceServer(t *testing.T) {
//
//		// make and configure a mocked runmv1.ShimServiceServer
//		mockedShimServiceServer := &MockShimServiceServer{
//			ShimKillFunc: func(context1 context.Context, shimKillRequest *runmv1.ShimKillRequest) (*runmv1.ShimKillResponse, error) {
//				panic("mock out the ShimKill method")
//			},
//		}
//
//		// use mockedShimServiceServer in code that requires runmv1.ShimServiceServer
//		// and then make assertions.
//
//	}
type MockShimServiceServer struct {
	// ShimKillFunc mocks the ShimKill method.
	ShimKillFunc func(context1 context.Context, shimKillRequest *runmv1.ShimKillRequest) (*runmv1.ShimKillResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// ShimKill holds details about calls to the ShimKill method.
		ShimKill []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// ShimKillRequest is the shimKillRequest argument value.
			ShimKillRequest *runmv1.ShimKillRequest
		}
	}
	lockShimKill sync.RWMutex
}

// ShimKill calls ShimKillFunc.
func (mock *MockShimServiceServer) ShimKill(context1 context.Context, shimKillRequest *runmv1.ShimKillRequest) (*runmv1.ShimKillResponse, error) {
	if mock.ShimKillFunc == nil {
		panic("MockShimServiceServer.ShimKillFunc: method is nil but ShimServiceServer.ShimKill was just called")
	}
	callInfo := struct {
		Context1        context.Context
		ShimKillRequest *runmv1.ShimKillRequest
	}{
		Context1:        context1,
		ShimKillRequest: shimKillRequest,
	}
	mock.lockShimKill.Lock()
	mock.calls.ShimKill = append(mock.calls.ShimKill, callInfo)
	mock.lockShimKill.Unlock()
	return mock.ShimKillFunc(context1, shimKillRequest)
}

// ShimKillCalls gets all the calls that were made to ShimKill.
// Check the length with:
//
//	len(mockedShimServiceServer.ShimKillCalls())
func (mock *MockShimServiceServer) ShimKillCalls() []struct {
	Context1        context.Context
	ShimKillRequest *runmv1.ShimKillRequest
} {
	var calls []struct {
		Context1        context.Context
		ShimKillRequest *runmv1.ShimKillRequest
	}
	mock.lockShimKill.RLock()
	calls = mock.calls.ShimKill
	mock.lockShimKill.RUnlock()
	return calls
}
