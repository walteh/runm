// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockrunvv1

import (
	"context"
	"sync"

	"github.com/walteh/runv/proto/v1"
	"google.golang.org/grpc"
)

// Ensure that MockPrctlServiceClient does implement runvv1.PrctlServiceClient.
// If this is not the case, regenerate this file with mockery.
var _ runvv1.PrctlServiceClient = &MockPrctlServiceClient{}

// MockPrctlServiceClient is a mock implementation of runvv1.PrctlServiceClient.
//
//	func TestSomethingThatUsesPrctlServiceClient(t *testing.T) {
//
//		// make and configure a mocked runvv1.PrctlServiceClient
//		mockedPrctlServiceClient := &MockPrctlServiceClient{
//			CreateFunc: func(ctx context.Context, in *runvv1.CreateRequest, opts ...grpc.CallOption) (*runvv1.CreateResponse, error) {
//				panic("mock out the Create method")
//			},
//			ShareFromFunc: func(ctx context.Context, in *runvv1.ShareFromRequest, opts ...grpc.CallOption) (*runvv1.ShareFromResponse, error) {
//				panic("mock out the ShareFrom method")
//			},
//		}
//
//		// use mockedPrctlServiceClient in code that requires runvv1.PrctlServiceClient
//		// and then make assertions.
//
//	}
type MockPrctlServiceClient struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, in *runvv1.CreateRequest, opts ...grpc.CallOption) (*runvv1.CreateResponse, error)

	// ShareFromFunc mocks the ShareFrom method.
	ShareFromFunc func(ctx context.Context, in *runvv1.ShareFromRequest, opts ...grpc.CallOption) (*runvv1.ShareFromResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *runvv1.CreateRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// ShareFrom holds details about calls to the ShareFrom method.
		ShareFrom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *runvv1.ShareFromRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockCreate    sync.RWMutex
	lockShareFrom sync.RWMutex
}

// Create calls CreateFunc.
func (mock *MockPrctlServiceClient) Create(ctx context.Context, in *runvv1.CreateRequest, opts ...grpc.CallOption) (*runvv1.CreateResponse, error) {
	if mock.CreateFunc == nil {
		panic("MockPrctlServiceClient.CreateFunc: method is nil but PrctlServiceClient.Create was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *runvv1.CreateRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, in, opts...)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedPrctlServiceClient.CreateCalls())
func (mock *MockPrctlServiceClient) CreateCalls() []struct {
	Ctx  context.Context
	In   *runvv1.CreateRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *runvv1.CreateRequest
		Opts []grpc.CallOption
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// ShareFrom calls ShareFromFunc.
func (mock *MockPrctlServiceClient) ShareFrom(ctx context.Context, in *runvv1.ShareFromRequest, opts ...grpc.CallOption) (*runvv1.ShareFromResponse, error) {
	if mock.ShareFromFunc == nil {
		panic("MockPrctlServiceClient.ShareFromFunc: method is nil but PrctlServiceClient.ShareFrom was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *runvv1.ShareFromRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockShareFrom.Lock()
	mock.calls.ShareFrom = append(mock.calls.ShareFrom, callInfo)
	mock.lockShareFrom.Unlock()
	return mock.ShareFromFunc(ctx, in, opts...)
}

// ShareFromCalls gets all the calls that were made to ShareFrom.
// Check the length with:
//
//	len(mockedPrctlServiceClient.ShareFromCalls())
func (mock *MockPrctlServiceClient) ShareFromCalls() []struct {
	Ctx  context.Context
	In   *runvv1.ShareFromRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *runvv1.ShareFromRequest
		Opts []grpc.CallOption
	}
	mock.lockShareFrom.RLock()
	calls = mock.calls.ShareFrom
	mock.lockShareFrom.RUnlock()
	return calls
}
