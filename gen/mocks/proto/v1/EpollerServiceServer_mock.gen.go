// Code generated by mockery. DO NOT EDIT.

package mockrunvv1

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	runvv1 "github.com/walteh/runv/proto/v1"
)

// MockEpollerServiceServer is an autogenerated mock type for the EpollerServiceServer type
type MockEpollerServiceServer struct {
	mock.Mock
}

type MockEpollerServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEpollerServiceServer) EXPECT() *MockEpollerServiceServer_Expecter {
	return &MockEpollerServiceServer_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *MockEpollerServiceServer) Add(_a0 context.Context, _a1 *runvv1.AddRequest) (*runvv1.AddResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *runvv1.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.AddRequest) (*runvv1.AddResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.AddRequest) *runvv1.AddResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.AddRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEpollerServiceServer_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockEpollerServiceServer_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *runvv1.AddRequest
func (_e *MockEpollerServiceServer_Expecter) Add(_a0 interface{}, _a1 interface{}) *MockEpollerServiceServer_Add_Call {
	return &MockEpollerServiceServer_Add_Call{Call: _e.mock.On("Add", _a0, _a1)}
}

func (_c *MockEpollerServiceServer_Add_Call) Run(run func(_a0 context.Context, _a1 *runvv1.AddRequest)) *MockEpollerServiceServer_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*runvv1.AddRequest))
	})
	return _c
}

func (_c *MockEpollerServiceServer_Add_Call) Return(_a0 *runvv1.AddResponse, _a1 error) *MockEpollerServiceServer_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEpollerServiceServer_Add_Call) RunAndReturn(run func(context.Context, *runvv1.AddRequest) (*runvv1.AddResponse, error)) *MockEpollerServiceServer_Add_Call {
	_c.Call.Return(run)
	return _c
}

// CloseConsole provides a mock function with given fields: _a0, _a1
func (_m *MockEpollerServiceServer) CloseConsole(_a0 context.Context, _a1 *runvv1.CloseConsoleRequest) (*runvv1.CloseConsoleResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CloseConsole")
	}

	var r0 *runvv1.CloseConsoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.CloseConsoleRequest) (*runvv1.CloseConsoleResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.CloseConsoleRequest) *runvv1.CloseConsoleResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.CloseConsoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.CloseConsoleRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEpollerServiceServer_CloseConsole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseConsole'
type MockEpollerServiceServer_CloseConsole_Call struct {
	*mock.Call
}

// CloseConsole is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *runvv1.CloseConsoleRequest
func (_e *MockEpollerServiceServer_Expecter) CloseConsole(_a0 interface{}, _a1 interface{}) *MockEpollerServiceServer_CloseConsole_Call {
	return &MockEpollerServiceServer_CloseConsole_Call{Call: _e.mock.On("CloseConsole", _a0, _a1)}
}

func (_c *MockEpollerServiceServer_CloseConsole_Call) Run(run func(_a0 context.Context, _a1 *runvv1.CloseConsoleRequest)) *MockEpollerServiceServer_CloseConsole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*runvv1.CloseConsoleRequest))
	})
	return _c
}

func (_c *MockEpollerServiceServer_CloseConsole_Call) Return(_a0 *runvv1.CloseConsoleResponse, _a1 error) *MockEpollerServiceServer_CloseConsole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEpollerServiceServer_CloseConsole_Call) RunAndReturn(run func(context.Context, *runvv1.CloseConsoleRequest) (*runvv1.CloseConsoleResponse, error)) *MockEpollerServiceServer_CloseConsole_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with given fields: _a0, _a1
func (_m *MockEpollerServiceServer) Wait(_a0 *runvv1.WaitRequest, _a1 grpc.ServerStreamingServer[runvv1.WaitResponse]) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*runvv1.WaitRequest, grpc.ServerStreamingServer[runvv1.WaitResponse]) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEpollerServiceServer_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type MockEpollerServiceServer_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
//   - _a0 *runvv1.WaitRequest
//   - _a1 grpc.ServerStreamingServer[runvv1.WaitResponse]
func (_e *MockEpollerServiceServer_Expecter) Wait(_a0 interface{}, _a1 interface{}) *MockEpollerServiceServer_Wait_Call {
	return &MockEpollerServiceServer_Wait_Call{Call: _e.mock.On("Wait", _a0, _a1)}
}

func (_c *MockEpollerServiceServer_Wait_Call) Run(run func(_a0 *runvv1.WaitRequest, _a1 grpc.ServerStreamingServer[runvv1.WaitResponse])) *MockEpollerServiceServer_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*runvv1.WaitRequest), args[1].(grpc.ServerStreamingServer[runvv1.WaitResponse]))
	})
	return _c
}

func (_c *MockEpollerServiceServer_Wait_Call) Return(_a0 error) *MockEpollerServiceServer_Wait_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEpollerServiceServer_Wait_Call) RunAndReturn(run func(*runvv1.WaitRequest, grpc.ServerStreamingServer[runvv1.WaitResponse]) error) *MockEpollerServiceServer_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedEpollerServiceServer provides a mock function with no fields
func (_m *MockEpollerServiceServer) mustEmbedUnimplementedEpollerServiceServer() {
	_m.Called()
}

// MockEpollerServiceServer_mustEmbedUnimplementedEpollerServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedEpollerServiceServer'
type MockEpollerServiceServer_mustEmbedUnimplementedEpollerServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedEpollerServiceServer is a helper method to define mock.On call
func (_e *MockEpollerServiceServer_Expecter) mustEmbedUnimplementedEpollerServiceServer() *MockEpollerServiceServer_mustEmbedUnimplementedEpollerServiceServer_Call {
	return &MockEpollerServiceServer_mustEmbedUnimplementedEpollerServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedEpollerServiceServer")}
}

func (_c *MockEpollerServiceServer_mustEmbedUnimplementedEpollerServiceServer_Call) Run(run func()) *MockEpollerServiceServer_mustEmbedUnimplementedEpollerServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpollerServiceServer_mustEmbedUnimplementedEpollerServiceServer_Call) Return() *MockEpollerServiceServer_mustEmbedUnimplementedEpollerServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEpollerServiceServer_mustEmbedUnimplementedEpollerServiceServer_Call) RunAndReturn(run func()) *MockEpollerServiceServer_mustEmbedUnimplementedEpollerServiceServer_Call {
	_c.Run(run)
	return _c
}

// NewMockEpollerServiceServer creates a new instance of MockEpollerServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEpollerServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEpollerServiceServer {
	mock := &MockEpollerServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
