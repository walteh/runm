// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockrunvv1

import (
	"context"
	"sync"

	"github.com/walteh/runv/proto/v1"
)

// Ensure that MockRuncServiceServer does implement runvv1.RuncServiceServer.
// If this is not the case, regenerate this file with mockery.
var _ runvv1.RuncServiceServer = &MockRuncServiceServer{}

// MockRuncServiceServer is a mock implementation of runvv1.RuncServiceServer.
//
//	func TestSomethingThatUsesRuncServiceServer(t *testing.T) {
//
//		// make and configure a mocked runvv1.RuncServiceServer
//		mockedRuncServiceServer := &MockRuncServiceServer{
//			CheckpointFunc: func(context1 context.Context, runcCheckpointRequest *runvv1.RuncCheckpointRequest) (*runvv1.RuncCheckpointResponse, error) {
//				panic("mock out the Checkpoint method")
//			},
//			CreateFunc: func(context1 context.Context, runcCreateRequest *runvv1.RuncCreateRequest) (*runvv1.RuncCreateResponse, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(context1 context.Context, runcDeleteRequest *runvv1.RuncDeleteRequest) (*runvv1.RuncDeleteResponse, error) {
//				panic("mock out the Delete method")
//			},
//			ExecFunc: func(context1 context.Context, runcExecRequest *runvv1.RuncExecRequest) (*runvv1.RuncExecResponse, error) {
//				panic("mock out the Exec method")
//			},
//			KillFunc: func(context1 context.Context, runcKillRequest *runvv1.RuncKillRequest) (*runvv1.RuncKillResponse, error) {
//				panic("mock out the Kill method")
//			},
//			NewTempConsoleSocketFunc: func(context1 context.Context, runcNewTempConsoleSocketRequest *runvv1.RuncNewTempConsoleSocketRequest) (*runvv1.RuncNewTempConsoleSocketResponse, error) {
//				panic("mock out the NewTempConsoleSocket method")
//			},
//			PauseFunc: func(context1 context.Context, runcPauseRequest *runvv1.RuncPauseRequest) (*runvv1.RuncPauseResponse, error) {
//				panic("mock out the Pause method")
//			},
//			PingFunc: func(context1 context.Context, pingRequest *runvv1.PingRequest) (*runvv1.PingResponse, error) {
//				panic("mock out the Ping method")
//			},
//			PsFunc: func(context1 context.Context, runcPsRequest *runvv1.RuncPsRequest) (*runvv1.RuncPsResponse, error) {
//				panic("mock out the Ps method")
//			},
//			ReadPidFileFunc: func(context1 context.Context, runcReadPidFileRequest *runvv1.RuncReadPidFileRequest) (*runvv1.RuncReadPidFileResponse, error) {
//				panic("mock out the ReadPidFile method")
//			},
//			RestoreFunc: func(context1 context.Context, runcRestoreRequest *runvv1.RuncRestoreRequest) (*runvv1.RuncRestoreResponse, error) {
//				panic("mock out the Restore method")
//			},
//			ResumeFunc: func(context1 context.Context, runcResumeRequest *runvv1.RuncResumeRequest) (*runvv1.RuncResumeResponse, error) {
//				panic("mock out the Resume method")
//			},
//			StartFunc: func(context1 context.Context, runcStartRequest *runvv1.RuncStartRequest) (*runvv1.RuncStartResponse, error) {
//				panic("mock out the Start method")
//			},
//			UpdateFunc: func(context1 context.Context, runcUpdateRequest *runvv1.RuncUpdateRequest) (*runvv1.RuncUpdateResponse, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedRuncServiceServer in code that requires runvv1.RuncServiceServer
//		// and then make assertions.
//
//	}
type MockRuncServiceServer struct {
	// CheckpointFunc mocks the Checkpoint method.
	CheckpointFunc func(context1 context.Context, runcCheckpointRequest *runvv1.RuncCheckpointRequest) (*runvv1.RuncCheckpointResponse, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(context1 context.Context, runcCreateRequest *runvv1.RuncCreateRequest) (*runvv1.RuncCreateResponse, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(context1 context.Context, runcDeleteRequest *runvv1.RuncDeleteRequest) (*runvv1.RuncDeleteResponse, error)

	// ExecFunc mocks the Exec method.
	ExecFunc func(context1 context.Context, runcExecRequest *runvv1.RuncExecRequest) (*runvv1.RuncExecResponse, error)

	// KillFunc mocks the Kill method.
	KillFunc func(context1 context.Context, runcKillRequest *runvv1.RuncKillRequest) (*runvv1.RuncKillResponse, error)

	// NewTempConsoleSocketFunc mocks the NewTempConsoleSocket method.
	NewTempConsoleSocketFunc func(context1 context.Context, runcNewTempConsoleSocketRequest *runvv1.RuncNewTempConsoleSocketRequest) (*runvv1.RuncNewTempConsoleSocketResponse, error)

	// PauseFunc mocks the Pause method.
	PauseFunc func(context1 context.Context, runcPauseRequest *runvv1.RuncPauseRequest) (*runvv1.RuncPauseResponse, error)

	// PingFunc mocks the Ping method.
	PingFunc func(context1 context.Context, pingRequest *runvv1.PingRequest) (*runvv1.PingResponse, error)

	// PsFunc mocks the Ps method.
	PsFunc func(context1 context.Context, runcPsRequest *runvv1.RuncPsRequest) (*runvv1.RuncPsResponse, error)

	// ReadPidFileFunc mocks the ReadPidFile method.
	ReadPidFileFunc func(context1 context.Context, runcReadPidFileRequest *runvv1.RuncReadPidFileRequest) (*runvv1.RuncReadPidFileResponse, error)

	// RestoreFunc mocks the Restore method.
	RestoreFunc func(context1 context.Context, runcRestoreRequest *runvv1.RuncRestoreRequest) (*runvv1.RuncRestoreResponse, error)

	// ResumeFunc mocks the Resume method.
	ResumeFunc func(context1 context.Context, runcResumeRequest *runvv1.RuncResumeRequest) (*runvv1.RuncResumeResponse, error)

	// StartFunc mocks the Start method.
	StartFunc func(context1 context.Context, runcStartRequest *runvv1.RuncStartRequest) (*runvv1.RuncStartResponse, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(context1 context.Context, runcUpdateRequest *runvv1.RuncUpdateRequest) (*runvv1.RuncUpdateResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checkpoint holds details about calls to the Checkpoint method.
		Checkpoint []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncCheckpointRequest is the runcCheckpointRequest argument value.
			RuncCheckpointRequest *runvv1.RuncCheckpointRequest
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncCreateRequest is the runcCreateRequest argument value.
			RuncCreateRequest *runvv1.RuncCreateRequest
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncDeleteRequest is the runcDeleteRequest argument value.
			RuncDeleteRequest *runvv1.RuncDeleteRequest
		}
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncExecRequest is the runcExecRequest argument value.
			RuncExecRequest *runvv1.RuncExecRequest
		}
		// Kill holds details about calls to the Kill method.
		Kill []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncKillRequest is the runcKillRequest argument value.
			RuncKillRequest *runvv1.RuncKillRequest
		}
		// NewTempConsoleSocket holds details about calls to the NewTempConsoleSocket method.
		NewTempConsoleSocket []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncNewTempConsoleSocketRequest is the runcNewTempConsoleSocketRequest argument value.
			RuncNewTempConsoleSocketRequest *runvv1.RuncNewTempConsoleSocketRequest
		}
		// Pause holds details about calls to the Pause method.
		Pause []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncPauseRequest is the runcPauseRequest argument value.
			RuncPauseRequest *runvv1.RuncPauseRequest
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// PingRequest is the pingRequest argument value.
			PingRequest *runvv1.PingRequest
		}
		// Ps holds details about calls to the Ps method.
		Ps []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncPsRequest is the runcPsRequest argument value.
			RuncPsRequest *runvv1.RuncPsRequest
		}
		// ReadPidFile holds details about calls to the ReadPidFile method.
		ReadPidFile []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncReadPidFileRequest is the runcReadPidFileRequest argument value.
			RuncReadPidFileRequest *runvv1.RuncReadPidFileRequest
		}
		// Restore holds details about calls to the Restore method.
		Restore []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncRestoreRequest is the runcRestoreRequest argument value.
			RuncRestoreRequest *runvv1.RuncRestoreRequest
		}
		// Resume holds details about calls to the Resume method.
		Resume []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncResumeRequest is the runcResumeRequest argument value.
			RuncResumeRequest *runvv1.RuncResumeRequest
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncStartRequest is the runcStartRequest argument value.
			RuncStartRequest *runvv1.RuncStartRequest
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncUpdateRequest is the runcUpdateRequest argument value.
			RuncUpdateRequest *runvv1.RuncUpdateRequest
		}
	}
	lockCheckpoint           sync.RWMutex
	lockCreate               sync.RWMutex
	lockDelete               sync.RWMutex
	lockExec                 sync.RWMutex
	lockKill                 sync.RWMutex
	lockNewTempConsoleSocket sync.RWMutex
	lockPause                sync.RWMutex
	lockPing                 sync.RWMutex
	lockPs                   sync.RWMutex
	lockReadPidFile          sync.RWMutex
	lockRestore              sync.RWMutex
	lockResume               sync.RWMutex
	lockStart                sync.RWMutex
	lockUpdate               sync.RWMutex
}

// Checkpoint calls CheckpointFunc.
func (mock *MockRuncServiceServer) Checkpoint(context1 context.Context, runcCheckpointRequest *runvv1.RuncCheckpointRequest) (*runvv1.RuncCheckpointResponse, error) {
	if mock.CheckpointFunc == nil {
		panic("MockRuncServiceServer.CheckpointFunc: method is nil but RuncServiceServer.Checkpoint was just called")
	}
	callInfo := struct {
		Context1              context.Context
		RuncCheckpointRequest *runvv1.RuncCheckpointRequest
	}{
		Context1:              context1,
		RuncCheckpointRequest: runcCheckpointRequest,
	}
	mock.lockCheckpoint.Lock()
	mock.calls.Checkpoint = append(mock.calls.Checkpoint, callInfo)
	mock.lockCheckpoint.Unlock()
	return mock.CheckpointFunc(context1, runcCheckpointRequest)
}

// CheckpointCalls gets all the calls that were made to Checkpoint.
// Check the length with:
//
//	len(mockedRuncServiceServer.CheckpointCalls())
func (mock *MockRuncServiceServer) CheckpointCalls() []struct {
	Context1              context.Context
	RuncCheckpointRequest *runvv1.RuncCheckpointRequest
} {
	var calls []struct {
		Context1              context.Context
		RuncCheckpointRequest *runvv1.RuncCheckpointRequest
	}
	mock.lockCheckpoint.RLock()
	calls = mock.calls.Checkpoint
	mock.lockCheckpoint.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *MockRuncServiceServer) Create(context1 context.Context, runcCreateRequest *runvv1.RuncCreateRequest) (*runvv1.RuncCreateResponse, error) {
	if mock.CreateFunc == nil {
		panic("MockRuncServiceServer.CreateFunc: method is nil but RuncServiceServer.Create was just called")
	}
	callInfo := struct {
		Context1          context.Context
		RuncCreateRequest *runvv1.RuncCreateRequest
	}{
		Context1:          context1,
		RuncCreateRequest: runcCreateRequest,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(context1, runcCreateRequest)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedRuncServiceServer.CreateCalls())
func (mock *MockRuncServiceServer) CreateCalls() []struct {
	Context1          context.Context
	RuncCreateRequest *runvv1.RuncCreateRequest
} {
	var calls []struct {
		Context1          context.Context
		RuncCreateRequest *runvv1.RuncCreateRequest
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *MockRuncServiceServer) Delete(context1 context.Context, runcDeleteRequest *runvv1.RuncDeleteRequest) (*runvv1.RuncDeleteResponse, error) {
	if mock.DeleteFunc == nil {
		panic("MockRuncServiceServer.DeleteFunc: method is nil but RuncServiceServer.Delete was just called")
	}
	callInfo := struct {
		Context1          context.Context
		RuncDeleteRequest *runvv1.RuncDeleteRequest
	}{
		Context1:          context1,
		RuncDeleteRequest: runcDeleteRequest,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(context1, runcDeleteRequest)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedRuncServiceServer.DeleteCalls())
func (mock *MockRuncServiceServer) DeleteCalls() []struct {
	Context1          context.Context
	RuncDeleteRequest *runvv1.RuncDeleteRequest
} {
	var calls []struct {
		Context1          context.Context
		RuncDeleteRequest *runvv1.RuncDeleteRequest
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Exec calls ExecFunc.
func (mock *MockRuncServiceServer) Exec(context1 context.Context, runcExecRequest *runvv1.RuncExecRequest) (*runvv1.RuncExecResponse, error) {
	if mock.ExecFunc == nil {
		panic("MockRuncServiceServer.ExecFunc: method is nil but RuncServiceServer.Exec was just called")
	}
	callInfo := struct {
		Context1        context.Context
		RuncExecRequest *runvv1.RuncExecRequest
	}{
		Context1:        context1,
		RuncExecRequest: runcExecRequest,
	}
	mock.lockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	mock.lockExec.Unlock()
	return mock.ExecFunc(context1, runcExecRequest)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//
//	len(mockedRuncServiceServer.ExecCalls())
func (mock *MockRuncServiceServer) ExecCalls() []struct {
	Context1        context.Context
	RuncExecRequest *runvv1.RuncExecRequest
} {
	var calls []struct {
		Context1        context.Context
		RuncExecRequest *runvv1.RuncExecRequest
	}
	mock.lockExec.RLock()
	calls = mock.calls.Exec
	mock.lockExec.RUnlock()
	return calls
}

// Kill calls KillFunc.
func (mock *MockRuncServiceServer) Kill(context1 context.Context, runcKillRequest *runvv1.RuncKillRequest) (*runvv1.RuncKillResponse, error) {
	if mock.KillFunc == nil {
		panic("MockRuncServiceServer.KillFunc: method is nil but RuncServiceServer.Kill was just called")
	}
	callInfo := struct {
		Context1        context.Context
		RuncKillRequest *runvv1.RuncKillRequest
	}{
		Context1:        context1,
		RuncKillRequest: runcKillRequest,
	}
	mock.lockKill.Lock()
	mock.calls.Kill = append(mock.calls.Kill, callInfo)
	mock.lockKill.Unlock()
	return mock.KillFunc(context1, runcKillRequest)
}

// KillCalls gets all the calls that were made to Kill.
// Check the length with:
//
//	len(mockedRuncServiceServer.KillCalls())
func (mock *MockRuncServiceServer) KillCalls() []struct {
	Context1        context.Context
	RuncKillRequest *runvv1.RuncKillRequest
} {
	var calls []struct {
		Context1        context.Context
		RuncKillRequest *runvv1.RuncKillRequest
	}
	mock.lockKill.RLock()
	calls = mock.calls.Kill
	mock.lockKill.RUnlock()
	return calls
}

// NewTempConsoleSocket calls NewTempConsoleSocketFunc.
func (mock *MockRuncServiceServer) NewTempConsoleSocket(context1 context.Context, runcNewTempConsoleSocketRequest *runvv1.RuncNewTempConsoleSocketRequest) (*runvv1.RuncNewTempConsoleSocketResponse, error) {
	if mock.NewTempConsoleSocketFunc == nil {
		panic("MockRuncServiceServer.NewTempConsoleSocketFunc: method is nil but RuncServiceServer.NewTempConsoleSocket was just called")
	}
	callInfo := struct {
		Context1                        context.Context
		RuncNewTempConsoleSocketRequest *runvv1.RuncNewTempConsoleSocketRequest
	}{
		Context1:                        context1,
		RuncNewTempConsoleSocketRequest: runcNewTempConsoleSocketRequest,
	}
	mock.lockNewTempConsoleSocket.Lock()
	mock.calls.NewTempConsoleSocket = append(mock.calls.NewTempConsoleSocket, callInfo)
	mock.lockNewTempConsoleSocket.Unlock()
	return mock.NewTempConsoleSocketFunc(context1, runcNewTempConsoleSocketRequest)
}

// NewTempConsoleSocketCalls gets all the calls that were made to NewTempConsoleSocket.
// Check the length with:
//
//	len(mockedRuncServiceServer.NewTempConsoleSocketCalls())
func (mock *MockRuncServiceServer) NewTempConsoleSocketCalls() []struct {
	Context1                        context.Context
	RuncNewTempConsoleSocketRequest *runvv1.RuncNewTempConsoleSocketRequest
} {
	var calls []struct {
		Context1                        context.Context
		RuncNewTempConsoleSocketRequest *runvv1.RuncNewTempConsoleSocketRequest
	}
	mock.lockNewTempConsoleSocket.RLock()
	calls = mock.calls.NewTempConsoleSocket
	mock.lockNewTempConsoleSocket.RUnlock()
	return calls
}

// Pause calls PauseFunc.
func (mock *MockRuncServiceServer) Pause(context1 context.Context, runcPauseRequest *runvv1.RuncPauseRequest) (*runvv1.RuncPauseResponse, error) {
	if mock.PauseFunc == nil {
		panic("MockRuncServiceServer.PauseFunc: method is nil but RuncServiceServer.Pause was just called")
	}
	callInfo := struct {
		Context1         context.Context
		RuncPauseRequest *runvv1.RuncPauseRequest
	}{
		Context1:         context1,
		RuncPauseRequest: runcPauseRequest,
	}
	mock.lockPause.Lock()
	mock.calls.Pause = append(mock.calls.Pause, callInfo)
	mock.lockPause.Unlock()
	return mock.PauseFunc(context1, runcPauseRequest)
}

// PauseCalls gets all the calls that were made to Pause.
// Check the length with:
//
//	len(mockedRuncServiceServer.PauseCalls())
func (mock *MockRuncServiceServer) PauseCalls() []struct {
	Context1         context.Context
	RuncPauseRequest *runvv1.RuncPauseRequest
} {
	var calls []struct {
		Context1         context.Context
		RuncPauseRequest *runvv1.RuncPauseRequest
	}
	mock.lockPause.RLock()
	calls = mock.calls.Pause
	mock.lockPause.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *MockRuncServiceServer) Ping(context1 context.Context, pingRequest *runvv1.PingRequest) (*runvv1.PingResponse, error) {
	if mock.PingFunc == nil {
		panic("MockRuncServiceServer.PingFunc: method is nil but RuncServiceServer.Ping was just called")
	}
	callInfo := struct {
		Context1    context.Context
		PingRequest *runvv1.PingRequest
	}{
		Context1:    context1,
		PingRequest: pingRequest,
	}
	mock.lockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	mock.lockPing.Unlock()
	return mock.PingFunc(context1, pingRequest)
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//
//	len(mockedRuncServiceServer.PingCalls())
func (mock *MockRuncServiceServer) PingCalls() []struct {
	Context1    context.Context
	PingRequest *runvv1.PingRequest
} {
	var calls []struct {
		Context1    context.Context
		PingRequest *runvv1.PingRequest
	}
	mock.lockPing.RLock()
	calls = mock.calls.Ping
	mock.lockPing.RUnlock()
	return calls
}

// Ps calls PsFunc.
func (mock *MockRuncServiceServer) Ps(context1 context.Context, runcPsRequest *runvv1.RuncPsRequest) (*runvv1.RuncPsResponse, error) {
	if mock.PsFunc == nil {
		panic("MockRuncServiceServer.PsFunc: method is nil but RuncServiceServer.Ps was just called")
	}
	callInfo := struct {
		Context1      context.Context
		RuncPsRequest *runvv1.RuncPsRequest
	}{
		Context1:      context1,
		RuncPsRequest: runcPsRequest,
	}
	mock.lockPs.Lock()
	mock.calls.Ps = append(mock.calls.Ps, callInfo)
	mock.lockPs.Unlock()
	return mock.PsFunc(context1, runcPsRequest)
}

// PsCalls gets all the calls that were made to Ps.
// Check the length with:
//
//	len(mockedRuncServiceServer.PsCalls())
func (mock *MockRuncServiceServer) PsCalls() []struct {
	Context1      context.Context
	RuncPsRequest *runvv1.RuncPsRequest
} {
	var calls []struct {
		Context1      context.Context
		RuncPsRequest *runvv1.RuncPsRequest
	}
	mock.lockPs.RLock()
	calls = mock.calls.Ps
	mock.lockPs.RUnlock()
	return calls
}

// ReadPidFile calls ReadPidFileFunc.
func (mock *MockRuncServiceServer) ReadPidFile(context1 context.Context, runcReadPidFileRequest *runvv1.RuncReadPidFileRequest) (*runvv1.RuncReadPidFileResponse, error) {
	if mock.ReadPidFileFunc == nil {
		panic("MockRuncServiceServer.ReadPidFileFunc: method is nil but RuncServiceServer.ReadPidFile was just called")
	}
	callInfo := struct {
		Context1               context.Context
		RuncReadPidFileRequest *runvv1.RuncReadPidFileRequest
	}{
		Context1:               context1,
		RuncReadPidFileRequest: runcReadPidFileRequest,
	}
	mock.lockReadPidFile.Lock()
	mock.calls.ReadPidFile = append(mock.calls.ReadPidFile, callInfo)
	mock.lockReadPidFile.Unlock()
	return mock.ReadPidFileFunc(context1, runcReadPidFileRequest)
}

// ReadPidFileCalls gets all the calls that were made to ReadPidFile.
// Check the length with:
//
//	len(mockedRuncServiceServer.ReadPidFileCalls())
func (mock *MockRuncServiceServer) ReadPidFileCalls() []struct {
	Context1               context.Context
	RuncReadPidFileRequest *runvv1.RuncReadPidFileRequest
} {
	var calls []struct {
		Context1               context.Context
		RuncReadPidFileRequest *runvv1.RuncReadPidFileRequest
	}
	mock.lockReadPidFile.RLock()
	calls = mock.calls.ReadPidFile
	mock.lockReadPidFile.RUnlock()
	return calls
}

// Restore calls RestoreFunc.
func (mock *MockRuncServiceServer) Restore(context1 context.Context, runcRestoreRequest *runvv1.RuncRestoreRequest) (*runvv1.RuncRestoreResponse, error) {
	if mock.RestoreFunc == nil {
		panic("MockRuncServiceServer.RestoreFunc: method is nil but RuncServiceServer.Restore was just called")
	}
	callInfo := struct {
		Context1           context.Context
		RuncRestoreRequest *runvv1.RuncRestoreRequest
	}{
		Context1:           context1,
		RuncRestoreRequest: runcRestoreRequest,
	}
	mock.lockRestore.Lock()
	mock.calls.Restore = append(mock.calls.Restore, callInfo)
	mock.lockRestore.Unlock()
	return mock.RestoreFunc(context1, runcRestoreRequest)
}

// RestoreCalls gets all the calls that were made to Restore.
// Check the length with:
//
//	len(mockedRuncServiceServer.RestoreCalls())
func (mock *MockRuncServiceServer) RestoreCalls() []struct {
	Context1           context.Context
	RuncRestoreRequest *runvv1.RuncRestoreRequest
} {
	var calls []struct {
		Context1           context.Context
		RuncRestoreRequest *runvv1.RuncRestoreRequest
	}
	mock.lockRestore.RLock()
	calls = mock.calls.Restore
	mock.lockRestore.RUnlock()
	return calls
}

// Resume calls ResumeFunc.
func (mock *MockRuncServiceServer) Resume(context1 context.Context, runcResumeRequest *runvv1.RuncResumeRequest) (*runvv1.RuncResumeResponse, error) {
	if mock.ResumeFunc == nil {
		panic("MockRuncServiceServer.ResumeFunc: method is nil but RuncServiceServer.Resume was just called")
	}
	callInfo := struct {
		Context1          context.Context
		RuncResumeRequest *runvv1.RuncResumeRequest
	}{
		Context1:          context1,
		RuncResumeRequest: runcResumeRequest,
	}
	mock.lockResume.Lock()
	mock.calls.Resume = append(mock.calls.Resume, callInfo)
	mock.lockResume.Unlock()
	return mock.ResumeFunc(context1, runcResumeRequest)
}

// ResumeCalls gets all the calls that were made to Resume.
// Check the length with:
//
//	len(mockedRuncServiceServer.ResumeCalls())
func (mock *MockRuncServiceServer) ResumeCalls() []struct {
	Context1          context.Context
	RuncResumeRequest *runvv1.RuncResumeRequest
} {
	var calls []struct {
		Context1          context.Context
		RuncResumeRequest *runvv1.RuncResumeRequest
	}
	mock.lockResume.RLock()
	calls = mock.calls.Resume
	mock.lockResume.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *MockRuncServiceServer) Start(context1 context.Context, runcStartRequest *runvv1.RuncStartRequest) (*runvv1.RuncStartResponse, error) {
	if mock.StartFunc == nil {
		panic("MockRuncServiceServer.StartFunc: method is nil but RuncServiceServer.Start was just called")
	}
	callInfo := struct {
		Context1         context.Context
		RuncStartRequest *runvv1.RuncStartRequest
	}{
		Context1:         context1,
		RuncStartRequest: runcStartRequest,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(context1, runcStartRequest)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedRuncServiceServer.StartCalls())
func (mock *MockRuncServiceServer) StartCalls() []struct {
	Context1         context.Context
	RuncStartRequest *runvv1.RuncStartRequest
} {
	var calls []struct {
		Context1         context.Context
		RuncStartRequest *runvv1.RuncStartRequest
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *MockRuncServiceServer) Update(context1 context.Context, runcUpdateRequest *runvv1.RuncUpdateRequest) (*runvv1.RuncUpdateResponse, error) {
	if mock.UpdateFunc == nil {
		panic("MockRuncServiceServer.UpdateFunc: method is nil but RuncServiceServer.Update was just called")
	}
	callInfo := struct {
		Context1          context.Context
		RuncUpdateRequest *runvv1.RuncUpdateRequest
	}{
		Context1:          context1,
		RuncUpdateRequest: runcUpdateRequest,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(context1, runcUpdateRequest)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedRuncServiceServer.UpdateCalls())
func (mock *MockRuncServiceServer) UpdateCalls() []struct {
	Context1          context.Context
	RuncUpdateRequest *runvv1.RuncUpdateRequest
} {
	var calls []struct {
		Context1          context.Context
		RuncUpdateRequest *runvv1.RuncUpdateRequest
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
