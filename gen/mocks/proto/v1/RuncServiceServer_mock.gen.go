// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockrunvv1

import (
	"context"
	"sync"

	"github.com/walteh/runv/proto/v1"
)

// Ensure that MockRuncServiceServer does implement runvv1.RuncServiceServer.
// If this is not the case, regenerate this file with mockery.
var _ runvv1.RuncServiceServer = &MockRuncServiceServer{}

// MockRuncServiceServer is a mock implementation of runvv1.RuncServiceServer.
//
//	func TestSomethingThatUsesRuncServiceServer(t *testing.T) {
//
//		// make and configure a mocked runvv1.RuncServiceServer
//		mockedRuncServiceServer := &MockRuncServiceServer{
//			CreateFunc: func(context1 context.Context, runcCreateRequest *runvv1.RuncCreateRequest) (*runvv1.RuncCreateResponse, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(context1 context.Context, runcDeleteRequest *runvv1.RuncDeleteRequest) (*runvv1.RuncDeleteResponse, error) {
//				panic("mock out the Delete method")
//			},
//			ExecFunc: func(context1 context.Context, runcExecRequest *runvv1.RuncExecRequest) (*runvv1.RuncExecResponse, error) {
//				panic("mock out the Exec method")
//			},
//			KillFunc: func(context1 context.Context, runcKillRequest *runvv1.RuncKillRequest) (*runvv1.RuncKillResponse, error) {
//				panic("mock out the Kill method")
//			},
//			ListFunc: func(context1 context.Context, runcListRequest *runvv1.RuncListRequest) (*runvv1.RuncListResponse, error) {
//				panic("mock out the List method")
//			},
//			PauseFunc: func(context1 context.Context, runcPauseRequest *runvv1.RuncPauseRequest) (*runvv1.RuncPauseResponse, error) {
//				panic("mock out the Pause method")
//			},
//			PingFunc: func(context1 context.Context, pingRequest *runvv1.PingRequest) (*runvv1.PingResponse, error) {
//				panic("mock out the Ping method")
//			},
//			PsFunc: func(context1 context.Context, runcPsRequest *runvv1.RuncPsRequest) (*runvv1.RuncPsResponse, error) {
//				panic("mock out the Ps method")
//			},
//			ResumeFunc: func(context1 context.Context, runcResumeRequest *runvv1.RuncResumeRequest) (*runvv1.RuncResumeResponse, error) {
//				panic("mock out the Resume method")
//			},
//			RunFunc: func(context1 context.Context, runcRunRequest *runvv1.RuncRunRequest) (*runvv1.RuncRunResponse, error) {
//				panic("mock out the Run method")
//			},
//			StartFunc: func(context1 context.Context, runcStartRequest *runvv1.RuncStartRequest) (*runvv1.RuncStartResponse, error) {
//				panic("mock out the Start method")
//			},
//			StateFunc: func(context1 context.Context, runcStateRequest *runvv1.RuncStateRequest) (*runvv1.RuncStateResponse, error) {
//				panic("mock out the State method")
//			},
//			StatsFunc: func(context1 context.Context, runcStatsRequest *runvv1.RuncStatsRequest) (*runvv1.RuncStatsResponse, error) {
//				panic("mock out the Stats method")
//			},
//			TopFunc: func(context1 context.Context, runcTopRequest *runvv1.RuncTopRequest) (*runvv1.RuncTopResponse, error) {
//				panic("mock out the Top method")
//			},
//			VersionFunc: func(context1 context.Context, runcVersionRequest *runvv1.RuncVersionRequest) (*runvv1.RuncVersionResponse, error) {
//				panic("mock out the Version method")
//			},
//		}
//
//		// use mockedRuncServiceServer in code that requires runvv1.RuncServiceServer
//		// and then make assertions.
//
//	}
type MockRuncServiceServer struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(context1 context.Context, runcCreateRequest *runvv1.RuncCreateRequest) (*runvv1.RuncCreateResponse, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(context1 context.Context, runcDeleteRequest *runvv1.RuncDeleteRequest) (*runvv1.RuncDeleteResponse, error)

	// ExecFunc mocks the Exec method.
	ExecFunc func(context1 context.Context, runcExecRequest *runvv1.RuncExecRequest) (*runvv1.RuncExecResponse, error)

	// KillFunc mocks the Kill method.
	KillFunc func(context1 context.Context, runcKillRequest *runvv1.RuncKillRequest) (*runvv1.RuncKillResponse, error)

	// ListFunc mocks the List method.
	ListFunc func(context1 context.Context, runcListRequest *runvv1.RuncListRequest) (*runvv1.RuncListResponse, error)

	// PauseFunc mocks the Pause method.
	PauseFunc func(context1 context.Context, runcPauseRequest *runvv1.RuncPauseRequest) (*runvv1.RuncPauseResponse, error)

	// PingFunc mocks the Ping method.
	PingFunc func(context1 context.Context, pingRequest *runvv1.PingRequest) (*runvv1.PingResponse, error)

	// PsFunc mocks the Ps method.
	PsFunc func(context1 context.Context, runcPsRequest *runvv1.RuncPsRequest) (*runvv1.RuncPsResponse, error)

	// ResumeFunc mocks the Resume method.
	ResumeFunc func(context1 context.Context, runcResumeRequest *runvv1.RuncResumeRequest) (*runvv1.RuncResumeResponse, error)

	// RunFunc mocks the Run method.
	RunFunc func(context1 context.Context, runcRunRequest *runvv1.RuncRunRequest) (*runvv1.RuncRunResponse, error)

	// StartFunc mocks the Start method.
	StartFunc func(context1 context.Context, runcStartRequest *runvv1.RuncStartRequest) (*runvv1.RuncStartResponse, error)

	// StateFunc mocks the State method.
	StateFunc func(context1 context.Context, runcStateRequest *runvv1.RuncStateRequest) (*runvv1.RuncStateResponse, error)

	// StatsFunc mocks the Stats method.
	StatsFunc func(context1 context.Context, runcStatsRequest *runvv1.RuncStatsRequest) (*runvv1.RuncStatsResponse, error)

	// TopFunc mocks the Top method.
	TopFunc func(context1 context.Context, runcTopRequest *runvv1.RuncTopRequest) (*runvv1.RuncTopResponse, error)

	// VersionFunc mocks the Version method.
	VersionFunc func(context1 context.Context, runcVersionRequest *runvv1.RuncVersionRequest) (*runvv1.RuncVersionResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncCreateRequest is the runcCreateRequest argument value.
			RuncCreateRequest *runvv1.RuncCreateRequest
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncDeleteRequest is the runcDeleteRequest argument value.
			RuncDeleteRequest *runvv1.RuncDeleteRequest
		}
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncExecRequest is the runcExecRequest argument value.
			RuncExecRequest *runvv1.RuncExecRequest
		}
		// Kill holds details about calls to the Kill method.
		Kill []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncKillRequest is the runcKillRequest argument value.
			RuncKillRequest *runvv1.RuncKillRequest
		}
		// List holds details about calls to the List method.
		List []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncListRequest is the runcListRequest argument value.
			RuncListRequest *runvv1.RuncListRequest
		}
		// Pause holds details about calls to the Pause method.
		Pause []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncPauseRequest is the runcPauseRequest argument value.
			RuncPauseRequest *runvv1.RuncPauseRequest
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// PingRequest is the pingRequest argument value.
			PingRequest *runvv1.PingRequest
		}
		// Ps holds details about calls to the Ps method.
		Ps []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncPsRequest is the runcPsRequest argument value.
			RuncPsRequest *runvv1.RuncPsRequest
		}
		// Resume holds details about calls to the Resume method.
		Resume []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncResumeRequest is the runcResumeRequest argument value.
			RuncResumeRequest *runvv1.RuncResumeRequest
		}
		// Run holds details about calls to the Run method.
		Run []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncRunRequest is the runcRunRequest argument value.
			RuncRunRequest *runvv1.RuncRunRequest
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncStartRequest is the runcStartRequest argument value.
			RuncStartRequest *runvv1.RuncStartRequest
		}
		// State holds details about calls to the State method.
		State []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncStateRequest is the runcStateRequest argument value.
			RuncStateRequest *runvv1.RuncStateRequest
		}
		// Stats holds details about calls to the Stats method.
		Stats []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncStatsRequest is the runcStatsRequest argument value.
			RuncStatsRequest *runvv1.RuncStatsRequest
		}
		// Top holds details about calls to the Top method.
		Top []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncTopRequest is the runcTopRequest argument value.
			RuncTopRequest *runvv1.RuncTopRequest
		}
		// Version holds details about calls to the Version method.
		Version []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncVersionRequest is the runcVersionRequest argument value.
			RuncVersionRequest *runvv1.RuncVersionRequest
		}
	}
	lockCreate  sync.RWMutex
	lockDelete  sync.RWMutex
	lockExec    sync.RWMutex
	lockKill    sync.RWMutex
	lockList    sync.RWMutex
	lockPause   sync.RWMutex
	lockPing    sync.RWMutex
	lockPs      sync.RWMutex
	lockResume  sync.RWMutex
	lockRun     sync.RWMutex
	lockStart   sync.RWMutex
	lockState   sync.RWMutex
	lockStats   sync.RWMutex
	lockTop     sync.RWMutex
	lockVersion sync.RWMutex
}

// Create calls CreateFunc.
func (mock *MockRuncServiceServer) Create(context1 context.Context, runcCreateRequest *runvv1.RuncCreateRequest) (*runvv1.RuncCreateResponse, error) {
	if mock.CreateFunc == nil {
		panic("MockRuncServiceServer.CreateFunc: method is nil but RuncServiceServer.Create was just called")
	}
	callInfo := struct {
		Context1          context.Context
		RuncCreateRequest *runvv1.RuncCreateRequest
	}{
		Context1:          context1,
		RuncCreateRequest: runcCreateRequest,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(context1, runcCreateRequest)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedRuncServiceServer.CreateCalls())
func (mock *MockRuncServiceServer) CreateCalls() []struct {
	Context1          context.Context
	RuncCreateRequest *runvv1.RuncCreateRequest
} {
	var calls []struct {
		Context1          context.Context
		RuncCreateRequest *runvv1.RuncCreateRequest
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *MockRuncServiceServer) Delete(context1 context.Context, runcDeleteRequest *runvv1.RuncDeleteRequest) (*runvv1.RuncDeleteResponse, error) {
	if mock.DeleteFunc == nil {
		panic("MockRuncServiceServer.DeleteFunc: method is nil but RuncServiceServer.Delete was just called")
	}
	callInfo := struct {
		Context1          context.Context
		RuncDeleteRequest *runvv1.RuncDeleteRequest
	}{
		Context1:          context1,
		RuncDeleteRequest: runcDeleteRequest,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(context1, runcDeleteRequest)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedRuncServiceServer.DeleteCalls())
func (mock *MockRuncServiceServer) DeleteCalls() []struct {
	Context1          context.Context
	RuncDeleteRequest *runvv1.RuncDeleteRequest
} {
	var calls []struct {
		Context1          context.Context
		RuncDeleteRequest *runvv1.RuncDeleteRequest
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Exec calls ExecFunc.
func (mock *MockRuncServiceServer) Exec(context1 context.Context, runcExecRequest *runvv1.RuncExecRequest) (*runvv1.RuncExecResponse, error) {
	if mock.ExecFunc == nil {
		panic("MockRuncServiceServer.ExecFunc: method is nil but RuncServiceServer.Exec was just called")
	}
	callInfo := struct {
		Context1        context.Context
		RuncExecRequest *runvv1.RuncExecRequest
	}{
		Context1:        context1,
		RuncExecRequest: runcExecRequest,
	}
	mock.lockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	mock.lockExec.Unlock()
	return mock.ExecFunc(context1, runcExecRequest)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//
//	len(mockedRuncServiceServer.ExecCalls())
func (mock *MockRuncServiceServer) ExecCalls() []struct {
	Context1        context.Context
	RuncExecRequest *runvv1.RuncExecRequest
} {
	var calls []struct {
		Context1        context.Context
		RuncExecRequest *runvv1.RuncExecRequest
	}
	mock.lockExec.RLock()
	calls = mock.calls.Exec
	mock.lockExec.RUnlock()
	return calls
}

// Kill calls KillFunc.
func (mock *MockRuncServiceServer) Kill(context1 context.Context, runcKillRequest *runvv1.RuncKillRequest) (*runvv1.RuncKillResponse, error) {
	if mock.KillFunc == nil {
		panic("MockRuncServiceServer.KillFunc: method is nil but RuncServiceServer.Kill was just called")
	}
	callInfo := struct {
		Context1        context.Context
		RuncKillRequest *runvv1.RuncKillRequest
	}{
		Context1:        context1,
		RuncKillRequest: runcKillRequest,
	}
	mock.lockKill.Lock()
	mock.calls.Kill = append(mock.calls.Kill, callInfo)
	mock.lockKill.Unlock()
	return mock.KillFunc(context1, runcKillRequest)
}

// KillCalls gets all the calls that were made to Kill.
// Check the length with:
//
//	len(mockedRuncServiceServer.KillCalls())
func (mock *MockRuncServiceServer) KillCalls() []struct {
	Context1        context.Context
	RuncKillRequest *runvv1.RuncKillRequest
} {
	var calls []struct {
		Context1        context.Context
		RuncKillRequest *runvv1.RuncKillRequest
	}
	mock.lockKill.RLock()
	calls = mock.calls.Kill
	mock.lockKill.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *MockRuncServiceServer) List(context1 context.Context, runcListRequest *runvv1.RuncListRequest) (*runvv1.RuncListResponse, error) {
	if mock.ListFunc == nil {
		panic("MockRuncServiceServer.ListFunc: method is nil but RuncServiceServer.List was just called")
	}
	callInfo := struct {
		Context1        context.Context
		RuncListRequest *runvv1.RuncListRequest
	}{
		Context1:        context1,
		RuncListRequest: runcListRequest,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(context1, runcListRequest)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedRuncServiceServer.ListCalls())
func (mock *MockRuncServiceServer) ListCalls() []struct {
	Context1        context.Context
	RuncListRequest *runvv1.RuncListRequest
} {
	var calls []struct {
		Context1        context.Context
		RuncListRequest *runvv1.RuncListRequest
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Pause calls PauseFunc.
func (mock *MockRuncServiceServer) Pause(context1 context.Context, runcPauseRequest *runvv1.RuncPauseRequest) (*runvv1.RuncPauseResponse, error) {
	if mock.PauseFunc == nil {
		panic("MockRuncServiceServer.PauseFunc: method is nil but RuncServiceServer.Pause was just called")
	}
	callInfo := struct {
		Context1         context.Context
		RuncPauseRequest *runvv1.RuncPauseRequest
	}{
		Context1:         context1,
		RuncPauseRequest: runcPauseRequest,
	}
	mock.lockPause.Lock()
	mock.calls.Pause = append(mock.calls.Pause, callInfo)
	mock.lockPause.Unlock()
	return mock.PauseFunc(context1, runcPauseRequest)
}

// PauseCalls gets all the calls that were made to Pause.
// Check the length with:
//
//	len(mockedRuncServiceServer.PauseCalls())
func (mock *MockRuncServiceServer) PauseCalls() []struct {
	Context1         context.Context
	RuncPauseRequest *runvv1.RuncPauseRequest
} {
	var calls []struct {
		Context1         context.Context
		RuncPauseRequest *runvv1.RuncPauseRequest
	}
	mock.lockPause.RLock()
	calls = mock.calls.Pause
	mock.lockPause.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *MockRuncServiceServer) Ping(context1 context.Context, pingRequest *runvv1.PingRequest) (*runvv1.PingResponse, error) {
	if mock.PingFunc == nil {
		panic("MockRuncServiceServer.PingFunc: method is nil but RuncServiceServer.Ping was just called")
	}
	callInfo := struct {
		Context1    context.Context
		PingRequest *runvv1.PingRequest
	}{
		Context1:    context1,
		PingRequest: pingRequest,
	}
	mock.lockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	mock.lockPing.Unlock()
	return mock.PingFunc(context1, pingRequest)
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//
//	len(mockedRuncServiceServer.PingCalls())
func (mock *MockRuncServiceServer) PingCalls() []struct {
	Context1    context.Context
	PingRequest *runvv1.PingRequest
} {
	var calls []struct {
		Context1    context.Context
		PingRequest *runvv1.PingRequest
	}
	mock.lockPing.RLock()
	calls = mock.calls.Ping
	mock.lockPing.RUnlock()
	return calls
}

// Ps calls PsFunc.
func (mock *MockRuncServiceServer) Ps(context1 context.Context, runcPsRequest *runvv1.RuncPsRequest) (*runvv1.RuncPsResponse, error) {
	if mock.PsFunc == nil {
		panic("MockRuncServiceServer.PsFunc: method is nil but RuncServiceServer.Ps was just called")
	}
	callInfo := struct {
		Context1      context.Context
		RuncPsRequest *runvv1.RuncPsRequest
	}{
		Context1:      context1,
		RuncPsRequest: runcPsRequest,
	}
	mock.lockPs.Lock()
	mock.calls.Ps = append(mock.calls.Ps, callInfo)
	mock.lockPs.Unlock()
	return mock.PsFunc(context1, runcPsRequest)
}

// PsCalls gets all the calls that were made to Ps.
// Check the length with:
//
//	len(mockedRuncServiceServer.PsCalls())
func (mock *MockRuncServiceServer) PsCalls() []struct {
	Context1      context.Context
	RuncPsRequest *runvv1.RuncPsRequest
} {
	var calls []struct {
		Context1      context.Context
		RuncPsRequest *runvv1.RuncPsRequest
	}
	mock.lockPs.RLock()
	calls = mock.calls.Ps
	mock.lockPs.RUnlock()
	return calls
}

// Resume calls ResumeFunc.
func (mock *MockRuncServiceServer) Resume(context1 context.Context, runcResumeRequest *runvv1.RuncResumeRequest) (*runvv1.RuncResumeResponse, error) {
	if mock.ResumeFunc == nil {
		panic("MockRuncServiceServer.ResumeFunc: method is nil but RuncServiceServer.Resume was just called")
	}
	callInfo := struct {
		Context1          context.Context
		RuncResumeRequest *runvv1.RuncResumeRequest
	}{
		Context1:          context1,
		RuncResumeRequest: runcResumeRequest,
	}
	mock.lockResume.Lock()
	mock.calls.Resume = append(mock.calls.Resume, callInfo)
	mock.lockResume.Unlock()
	return mock.ResumeFunc(context1, runcResumeRequest)
}

// ResumeCalls gets all the calls that were made to Resume.
// Check the length with:
//
//	len(mockedRuncServiceServer.ResumeCalls())
func (mock *MockRuncServiceServer) ResumeCalls() []struct {
	Context1          context.Context
	RuncResumeRequest *runvv1.RuncResumeRequest
} {
	var calls []struct {
		Context1          context.Context
		RuncResumeRequest *runvv1.RuncResumeRequest
	}
	mock.lockResume.RLock()
	calls = mock.calls.Resume
	mock.lockResume.RUnlock()
	return calls
}

// Run calls RunFunc.
func (mock *MockRuncServiceServer) Run(context1 context.Context, runcRunRequest *runvv1.RuncRunRequest) (*runvv1.RuncRunResponse, error) {
	if mock.RunFunc == nil {
		panic("MockRuncServiceServer.RunFunc: method is nil but RuncServiceServer.Run was just called")
	}
	callInfo := struct {
		Context1       context.Context
		RuncRunRequest *runvv1.RuncRunRequest
	}{
		Context1:       context1,
		RuncRunRequest: runcRunRequest,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(context1, runcRunRequest)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedRuncServiceServer.RunCalls())
func (mock *MockRuncServiceServer) RunCalls() []struct {
	Context1       context.Context
	RuncRunRequest *runvv1.RuncRunRequest
} {
	var calls []struct {
		Context1       context.Context
		RuncRunRequest *runvv1.RuncRunRequest
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *MockRuncServiceServer) Start(context1 context.Context, runcStartRequest *runvv1.RuncStartRequest) (*runvv1.RuncStartResponse, error) {
	if mock.StartFunc == nil {
		panic("MockRuncServiceServer.StartFunc: method is nil but RuncServiceServer.Start was just called")
	}
	callInfo := struct {
		Context1         context.Context
		RuncStartRequest *runvv1.RuncStartRequest
	}{
		Context1:         context1,
		RuncStartRequest: runcStartRequest,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(context1, runcStartRequest)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedRuncServiceServer.StartCalls())
func (mock *MockRuncServiceServer) StartCalls() []struct {
	Context1         context.Context
	RuncStartRequest *runvv1.RuncStartRequest
} {
	var calls []struct {
		Context1         context.Context
		RuncStartRequest *runvv1.RuncStartRequest
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// State calls StateFunc.
func (mock *MockRuncServiceServer) State(context1 context.Context, runcStateRequest *runvv1.RuncStateRequest) (*runvv1.RuncStateResponse, error) {
	if mock.StateFunc == nil {
		panic("MockRuncServiceServer.StateFunc: method is nil but RuncServiceServer.State was just called")
	}
	callInfo := struct {
		Context1         context.Context
		RuncStateRequest *runvv1.RuncStateRequest
	}{
		Context1:         context1,
		RuncStateRequest: runcStateRequest,
	}
	mock.lockState.Lock()
	mock.calls.State = append(mock.calls.State, callInfo)
	mock.lockState.Unlock()
	return mock.StateFunc(context1, runcStateRequest)
}

// StateCalls gets all the calls that were made to State.
// Check the length with:
//
//	len(mockedRuncServiceServer.StateCalls())
func (mock *MockRuncServiceServer) StateCalls() []struct {
	Context1         context.Context
	RuncStateRequest *runvv1.RuncStateRequest
} {
	var calls []struct {
		Context1         context.Context
		RuncStateRequest *runvv1.RuncStateRequest
	}
	mock.lockState.RLock()
	calls = mock.calls.State
	mock.lockState.RUnlock()
	return calls
}

// Stats calls StatsFunc.
func (mock *MockRuncServiceServer) Stats(context1 context.Context, runcStatsRequest *runvv1.RuncStatsRequest) (*runvv1.RuncStatsResponse, error) {
	if mock.StatsFunc == nil {
		panic("MockRuncServiceServer.StatsFunc: method is nil but RuncServiceServer.Stats was just called")
	}
	callInfo := struct {
		Context1         context.Context
		RuncStatsRequest *runvv1.RuncStatsRequest
	}{
		Context1:         context1,
		RuncStatsRequest: runcStatsRequest,
	}
	mock.lockStats.Lock()
	mock.calls.Stats = append(mock.calls.Stats, callInfo)
	mock.lockStats.Unlock()
	return mock.StatsFunc(context1, runcStatsRequest)
}

// StatsCalls gets all the calls that were made to Stats.
// Check the length with:
//
//	len(mockedRuncServiceServer.StatsCalls())
func (mock *MockRuncServiceServer) StatsCalls() []struct {
	Context1         context.Context
	RuncStatsRequest *runvv1.RuncStatsRequest
} {
	var calls []struct {
		Context1         context.Context
		RuncStatsRequest *runvv1.RuncStatsRequest
	}
	mock.lockStats.RLock()
	calls = mock.calls.Stats
	mock.lockStats.RUnlock()
	return calls
}

// Top calls TopFunc.
func (mock *MockRuncServiceServer) Top(context1 context.Context, runcTopRequest *runvv1.RuncTopRequest) (*runvv1.RuncTopResponse, error) {
	if mock.TopFunc == nil {
		panic("MockRuncServiceServer.TopFunc: method is nil but RuncServiceServer.Top was just called")
	}
	callInfo := struct {
		Context1       context.Context
		RuncTopRequest *runvv1.RuncTopRequest
	}{
		Context1:       context1,
		RuncTopRequest: runcTopRequest,
	}
	mock.lockTop.Lock()
	mock.calls.Top = append(mock.calls.Top, callInfo)
	mock.lockTop.Unlock()
	return mock.TopFunc(context1, runcTopRequest)
}

// TopCalls gets all the calls that were made to Top.
// Check the length with:
//
//	len(mockedRuncServiceServer.TopCalls())
func (mock *MockRuncServiceServer) TopCalls() []struct {
	Context1       context.Context
	RuncTopRequest *runvv1.RuncTopRequest
} {
	var calls []struct {
		Context1       context.Context
		RuncTopRequest *runvv1.RuncTopRequest
	}
	mock.lockTop.RLock()
	calls = mock.calls.Top
	mock.lockTop.RUnlock()
	return calls
}

// Version calls VersionFunc.
func (mock *MockRuncServiceServer) Version(context1 context.Context, runcVersionRequest *runvv1.RuncVersionRequest) (*runvv1.RuncVersionResponse, error) {
	if mock.VersionFunc == nil {
		panic("MockRuncServiceServer.VersionFunc: method is nil but RuncServiceServer.Version was just called")
	}
	callInfo := struct {
		Context1           context.Context
		RuncVersionRequest *runvv1.RuncVersionRequest
	}{
		Context1:           context1,
		RuncVersionRequest: runcVersionRequest,
	}
	mock.lockVersion.Lock()
	mock.calls.Version = append(mock.calls.Version, callInfo)
	mock.lockVersion.Unlock()
	return mock.VersionFunc(context1, runcVersionRequest)
}

// VersionCalls gets all the calls that were made to Version.
// Check the length with:
//
//	len(mockedRuncServiceServer.VersionCalls())
func (mock *MockRuncServiceServer) VersionCalls() []struct {
	Context1           context.Context
	RuncVersionRequest *runvv1.RuncVersionRequest
} {
	var calls []struct {
		Context1           context.Context
		RuncVersionRequest *runvv1.RuncVersionRequest
	}
	mock.lockVersion.RLock()
	calls = mock.calls.Version
	mock.lockVersion.RUnlock()
	return calls
}
