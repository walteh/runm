// Code generated by mockery. DO NOT EDIT.

package mockrunvv1

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	runvv1 "github.com/walteh/runv/proto/v1"
)

// MockRuncServiceServer is an autogenerated mock type for the RuncServiceServer type
type MockRuncServiceServer struct {
	mock.Mock
}

type MockRuncServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRuncServiceServer) EXPECT() *MockRuncServiceServer_Expecter {
	return &MockRuncServiceServer_Expecter{mock: &_m.Mock}
}

// Ping provides a mock function with given fields: _a0, _a1
func (_m *MockRuncServiceServer) Ping(_a0 context.Context, _a1 *runvv1.PingRequest) (*runvv1.PingResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *runvv1.PingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.PingRequest) (*runvv1.PingResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.PingRequest) *runvv1.PingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.PingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.PingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuncServiceServer_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockRuncServiceServer_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *runvv1.PingRequest
func (_e *MockRuncServiceServer_Expecter) Ping(_a0 interface{}, _a1 interface{}) *MockRuncServiceServer_Ping_Call {
	return &MockRuncServiceServer_Ping_Call{Call: _e.mock.On("Ping", _a0, _a1)}
}

func (_c *MockRuncServiceServer_Ping_Call) Run(run func(_a0 context.Context, _a1 *runvv1.PingRequest)) *MockRuncServiceServer_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*runvv1.PingRequest))
	})
	return _c
}

func (_c *MockRuncServiceServer_Ping_Call) Return(_a0 *runvv1.PingResponse, _a1 error) *MockRuncServiceServer_Ping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuncServiceServer_Ping_Call) RunAndReturn(run func(context.Context, *runvv1.PingRequest) (*runvv1.PingResponse, error)) *MockRuncServiceServer_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedRuncServiceServer provides a mock function with no fields
func (_m *MockRuncServiceServer) mustEmbedUnimplementedRuncServiceServer() {
	_m.Called()
}

// MockRuncServiceServer_mustEmbedUnimplementedRuncServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedRuncServiceServer'
type MockRuncServiceServer_mustEmbedUnimplementedRuncServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedRuncServiceServer is a helper method to define mock.On call
func (_e *MockRuncServiceServer_Expecter) mustEmbedUnimplementedRuncServiceServer() *MockRuncServiceServer_mustEmbedUnimplementedRuncServiceServer_Call {
	return &MockRuncServiceServer_mustEmbedUnimplementedRuncServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedRuncServiceServer")}
}

func (_c *MockRuncServiceServer_mustEmbedUnimplementedRuncServiceServer_Call) Run(run func()) *MockRuncServiceServer_mustEmbedUnimplementedRuncServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuncServiceServer_mustEmbedUnimplementedRuncServiceServer_Call) Return() *MockRuncServiceServer_mustEmbedUnimplementedRuncServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRuncServiceServer_mustEmbedUnimplementedRuncServiceServer_Call) RunAndReturn(run func()) *MockRuncServiceServer_mustEmbedUnimplementedRuncServiceServer_Call {
	_c.Run(run)
	return _c
}

// NewMockRuncServiceServer creates a new instance of MockRuncServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuncServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRuncServiceServer {
	mock := &MockRuncServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
