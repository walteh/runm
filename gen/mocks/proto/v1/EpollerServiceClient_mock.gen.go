// Code generated by mockery. DO NOT EDIT.

package mockrunvv1

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	runvv1 "github.com/walteh/runv/proto/v1"
)

// MockEpollerServiceClient is an autogenerated mock type for the EpollerServiceClient type
type MockEpollerServiceClient struct {
	mock.Mock
}

type MockEpollerServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEpollerServiceClient) EXPECT() *MockEpollerServiceClient_Expecter {
	return &MockEpollerServiceClient_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, in, opts
func (_m *MockEpollerServiceClient) Add(ctx context.Context, in *runvv1.AddRequest, opts ...grpc.CallOption) (*runvv1.AddResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *runvv1.AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.AddRequest, ...grpc.CallOption) (*runvv1.AddResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.AddRequest, ...grpc.CallOption) *runvv1.AddResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.AddRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEpollerServiceClient_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockEpollerServiceClient_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - in *runvv1.AddRequest
//   - opts ...grpc.CallOption
func (_e *MockEpollerServiceClient_Expecter) Add(ctx interface{}, in interface{}, opts ...interface{}) *MockEpollerServiceClient_Add_Call {
	return &MockEpollerServiceClient_Add_Call{Call: _e.mock.On("Add",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockEpollerServiceClient_Add_Call) Run(run func(ctx context.Context, in *runvv1.AddRequest, opts ...grpc.CallOption)) *MockEpollerServiceClient_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*runvv1.AddRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockEpollerServiceClient_Add_Call) Return(_a0 *runvv1.AddResponse, _a1 error) *MockEpollerServiceClient_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEpollerServiceClient_Add_Call) RunAndReturn(run func(context.Context, *runvv1.AddRequest, ...grpc.CallOption) (*runvv1.AddResponse, error)) *MockEpollerServiceClient_Add_Call {
	_c.Call.Return(run)
	return _c
}

// CloseConsole provides a mock function with given fields: ctx, in, opts
func (_m *MockEpollerServiceClient) CloseConsole(ctx context.Context, in *runvv1.CloseConsoleRequest, opts ...grpc.CallOption) (*runvv1.CloseConsoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CloseConsole")
	}

	var r0 *runvv1.CloseConsoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.CloseConsoleRequest, ...grpc.CallOption) (*runvv1.CloseConsoleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.CloseConsoleRequest, ...grpc.CallOption) *runvv1.CloseConsoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.CloseConsoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.CloseConsoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEpollerServiceClient_CloseConsole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseConsole'
type MockEpollerServiceClient_CloseConsole_Call struct {
	*mock.Call
}

// CloseConsole is a helper method to define mock.On call
//   - ctx context.Context
//   - in *runvv1.CloseConsoleRequest
//   - opts ...grpc.CallOption
func (_e *MockEpollerServiceClient_Expecter) CloseConsole(ctx interface{}, in interface{}, opts ...interface{}) *MockEpollerServiceClient_CloseConsole_Call {
	return &MockEpollerServiceClient_CloseConsole_Call{Call: _e.mock.On("CloseConsole",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockEpollerServiceClient_CloseConsole_Call) Run(run func(ctx context.Context, in *runvv1.CloseConsoleRequest, opts ...grpc.CallOption)) *MockEpollerServiceClient_CloseConsole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*runvv1.CloseConsoleRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockEpollerServiceClient_CloseConsole_Call) Return(_a0 *runvv1.CloseConsoleResponse, _a1 error) *MockEpollerServiceClient_CloseConsole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEpollerServiceClient_CloseConsole_Call) RunAndReturn(run func(context.Context, *runvv1.CloseConsoleRequest, ...grpc.CallOption) (*runvv1.CloseConsoleResponse, error)) *MockEpollerServiceClient_CloseConsole_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with given fields: ctx, in, opts
func (_m *MockEpollerServiceClient) Wait(ctx context.Context, in *runvv1.WaitRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[runvv1.WaitResponse], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 grpc.ServerStreamingClient[runvv1.WaitResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.WaitRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[runvv1.WaitResponse], error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.WaitRequest, ...grpc.CallOption) grpc.ServerStreamingClient[runvv1.WaitResponse]); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[runvv1.WaitResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.WaitRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEpollerServiceClient_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type MockEpollerServiceClient_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
//   - ctx context.Context
//   - in *runvv1.WaitRequest
//   - opts ...grpc.CallOption
func (_e *MockEpollerServiceClient_Expecter) Wait(ctx interface{}, in interface{}, opts ...interface{}) *MockEpollerServiceClient_Wait_Call {
	return &MockEpollerServiceClient_Wait_Call{Call: _e.mock.On("Wait",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockEpollerServiceClient_Wait_Call) Run(run func(ctx context.Context, in *runvv1.WaitRequest, opts ...grpc.CallOption)) *MockEpollerServiceClient_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*runvv1.WaitRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockEpollerServiceClient_Wait_Call) Return(_a0 grpc.ServerStreamingClient[runvv1.WaitResponse], _a1 error) *MockEpollerServiceClient_Wait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEpollerServiceClient_Wait_Call) RunAndReturn(run func(context.Context, *runvv1.WaitRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[runvv1.WaitResponse], error)) *MockEpollerServiceClient_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEpollerServiceClient creates a new instance of MockEpollerServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEpollerServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEpollerServiceClient {
	mock := &MockEpollerServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
