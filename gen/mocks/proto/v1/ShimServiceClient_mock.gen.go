// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockrunmv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/v1"
	"google.golang.org/grpc"
)

// Ensure that MockShimServiceClient does implement runmv1.ShimServiceClient.
// If this is not the case, regenerate this file with mockery.
var _ runmv1.ShimServiceClient = &MockShimServiceClient{}

// MockShimServiceClient is a mock implementation of runmv1.ShimServiceClient.
//
//	func TestSomethingThatUsesShimServiceClient(t *testing.T) {
//
//		// make and configure a mocked runmv1.ShimServiceClient
//		mockedShimServiceClient := &MockShimServiceClient{
//			ShimFeaturesFunc: func(ctx context.Context, in *runmv1.ShimFeaturesRequest, opts ...grpc.CallOption) (*runmv1.ShimFeaturesResponse, error) {
//				panic("mock out the ShimFeatures method")
//			},
//			ShimKillFunc: func(ctx context.Context, in *runmv1.ShimKillRequest, opts ...grpc.CallOption) (*runmv1.ShimKillResponse, error) {
//				panic("mock out the ShimKill method")
//			},
//		}
//
//		// use mockedShimServiceClient in code that requires runmv1.ShimServiceClient
//		// and then make assertions.
//
//	}
type MockShimServiceClient struct {
	// ShimFeaturesFunc mocks the ShimFeatures method.
	ShimFeaturesFunc func(ctx context.Context, in *runmv1.ShimFeaturesRequest, opts ...grpc.CallOption) (*runmv1.ShimFeaturesResponse, error)

	// ShimKillFunc mocks the ShimKill method.
	ShimKillFunc func(ctx context.Context, in *runmv1.ShimKillRequest, opts ...grpc.CallOption) (*runmv1.ShimKillResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// ShimFeatures holds details about calls to the ShimFeatures method.
		ShimFeatures []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *runmv1.ShimFeaturesRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// ShimKill holds details about calls to the ShimKill method.
		ShimKill []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *runmv1.ShimKillRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockShimFeatures sync.RWMutex
	lockShimKill     sync.RWMutex
}

// ShimFeatures calls ShimFeaturesFunc.
func (mock *MockShimServiceClient) ShimFeatures(ctx context.Context, in *runmv1.ShimFeaturesRequest, opts ...grpc.CallOption) (*runmv1.ShimFeaturesResponse, error) {
	if mock.ShimFeaturesFunc == nil {
		panic("MockShimServiceClient.ShimFeaturesFunc: method is nil but ShimServiceClient.ShimFeatures was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *runmv1.ShimFeaturesRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockShimFeatures.Lock()
	mock.calls.ShimFeatures = append(mock.calls.ShimFeatures, callInfo)
	mock.lockShimFeatures.Unlock()
	return mock.ShimFeaturesFunc(ctx, in, opts...)
}

// ShimFeaturesCalls gets all the calls that were made to ShimFeatures.
// Check the length with:
//
//	len(mockedShimServiceClient.ShimFeaturesCalls())
func (mock *MockShimServiceClient) ShimFeaturesCalls() []struct {
	Ctx  context.Context
	In   *runmv1.ShimFeaturesRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *runmv1.ShimFeaturesRequest
		Opts []grpc.CallOption
	}
	mock.lockShimFeatures.RLock()
	calls = mock.calls.ShimFeatures
	mock.lockShimFeatures.RUnlock()
	return calls
}

// ShimKill calls ShimKillFunc.
func (mock *MockShimServiceClient) ShimKill(ctx context.Context, in *runmv1.ShimKillRequest, opts ...grpc.CallOption) (*runmv1.ShimKillResponse, error) {
	if mock.ShimKillFunc == nil {
		panic("MockShimServiceClient.ShimKillFunc: method is nil but ShimServiceClient.ShimKill was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *runmv1.ShimKillRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockShimKill.Lock()
	mock.calls.ShimKill = append(mock.calls.ShimKill, callInfo)
	mock.lockShimKill.Unlock()
	return mock.ShimKillFunc(ctx, in, opts...)
}

// ShimKillCalls gets all the calls that were made to ShimKill.
// Check the length with:
//
//	len(mockedShimServiceClient.ShimKillCalls())
func (mock *MockShimServiceClient) ShimKillCalls() []struct {
	Ctx  context.Context
	In   *runmv1.ShimKillRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *runmv1.ShimKillRequest
		Opts []grpc.CallOption
	}
	mock.lockShimKill.RLock()
	calls = mock.calls.ShimKill
	mock.lockShimKill.RUnlock()
	return calls
}
