// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockrunmv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/v1"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

// Ensure that MockEventServiceServer does implement runmv1.EventServiceServer.
// If this is not the case, regenerate this file with mockery.
var _ runmv1.EventServiceServer = &MockEventServiceServer{}

// MockEventServiceServer is a mock implementation of runmv1.EventServiceServer.
//
//	func TestSomethingThatUsesEventServiceServer(t *testing.T) {
//
//		// make and configure a mocked runmv1.EventServiceServer
//		mockedEventServiceServer := &MockEventServiceServer{
//			PublishEventFunc: func(context1 context.Context, publishEventRequest *runmv1.PublishEventRequest) (*runmv1.PublishEventResponse, error) {
//				panic("mock out the PublishEvent method")
//			},
//			ReceiveEventsFunc: func(empty *emptypb.Empty, serverStreamingServer grpc.ServerStreamingServer[runmv1.PublishEventsResponse]) error {
//				panic("mock out the ReceiveEvents method")
//			},
//			SubscribeToReaperExitsFunc: func(empty *emptypb.Empty, serverStreamingServer grpc.ServerStreamingServer[runmv1.ReaperExit]) error {
//				panic("mock out the SubscribeToReaperExits method")
//			},
//		}
//
//		// use mockedEventServiceServer in code that requires runmv1.EventServiceServer
//		// and then make assertions.
//
//	}
type MockEventServiceServer struct {
	// PublishEventFunc mocks the PublishEvent method.
	PublishEventFunc func(context1 context.Context, publishEventRequest *runmv1.PublishEventRequest) (*runmv1.PublishEventResponse, error)

	// ReceiveEventsFunc mocks the ReceiveEvents method.
	ReceiveEventsFunc func(empty *emptypb.Empty, serverStreamingServer grpc.ServerStreamingServer[runmv1.PublishEventsResponse]) error

	// SubscribeToReaperExitsFunc mocks the SubscribeToReaperExits method.
	SubscribeToReaperExitsFunc func(empty *emptypb.Empty, serverStreamingServer grpc.ServerStreamingServer[runmv1.ReaperExit]) error

	// calls tracks calls to the methods.
	calls struct {
		// PublishEvent holds details about calls to the PublishEvent method.
		PublishEvent []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// PublishEventRequest is the publishEventRequest argument value.
			PublishEventRequest *runmv1.PublishEventRequest
		}
		// ReceiveEvents holds details about calls to the ReceiveEvents method.
		ReceiveEvents []struct {
			// Empty is the empty argument value.
			Empty *emptypb.Empty
			// ServerStreamingServer is the serverStreamingServer argument value.
			ServerStreamingServer grpc.ServerStreamingServer[runmv1.PublishEventsResponse]
		}
		// SubscribeToReaperExits holds details about calls to the SubscribeToReaperExits method.
		SubscribeToReaperExits []struct {
			// Empty is the empty argument value.
			Empty *emptypb.Empty
			// ServerStreamingServer is the serverStreamingServer argument value.
			ServerStreamingServer grpc.ServerStreamingServer[runmv1.ReaperExit]
		}
	}
	lockPublishEvent           sync.RWMutex
	lockReceiveEvents          sync.RWMutex
	lockSubscribeToReaperExits sync.RWMutex
}

// PublishEvent calls PublishEventFunc.
func (mock *MockEventServiceServer) PublishEvent(context1 context.Context, publishEventRequest *runmv1.PublishEventRequest) (*runmv1.PublishEventResponse, error) {
	if mock.PublishEventFunc == nil {
		panic("MockEventServiceServer.PublishEventFunc: method is nil but EventServiceServer.PublishEvent was just called")
	}
	callInfo := struct {
		Context1            context.Context
		PublishEventRequest *runmv1.PublishEventRequest
	}{
		Context1:            context1,
		PublishEventRequest: publishEventRequest,
	}
	mock.lockPublishEvent.Lock()
	mock.calls.PublishEvent = append(mock.calls.PublishEvent, callInfo)
	mock.lockPublishEvent.Unlock()
	return mock.PublishEventFunc(context1, publishEventRequest)
}

// PublishEventCalls gets all the calls that were made to PublishEvent.
// Check the length with:
//
//	len(mockedEventServiceServer.PublishEventCalls())
func (mock *MockEventServiceServer) PublishEventCalls() []struct {
	Context1            context.Context
	PublishEventRequest *runmv1.PublishEventRequest
} {
	var calls []struct {
		Context1            context.Context
		PublishEventRequest *runmv1.PublishEventRequest
	}
	mock.lockPublishEvent.RLock()
	calls = mock.calls.PublishEvent
	mock.lockPublishEvent.RUnlock()
	return calls
}

// ReceiveEvents calls ReceiveEventsFunc.
func (mock *MockEventServiceServer) ReceiveEvents(empty *emptypb.Empty, serverStreamingServer grpc.ServerStreamingServer[runmv1.PublishEventsResponse]) error {
	if mock.ReceiveEventsFunc == nil {
		panic("MockEventServiceServer.ReceiveEventsFunc: method is nil but EventServiceServer.ReceiveEvents was just called")
	}
	callInfo := struct {
		Empty                 *emptypb.Empty
		ServerStreamingServer grpc.ServerStreamingServer[runmv1.PublishEventsResponse]
	}{
		Empty:                 empty,
		ServerStreamingServer: serverStreamingServer,
	}
	mock.lockReceiveEvents.Lock()
	mock.calls.ReceiveEvents = append(mock.calls.ReceiveEvents, callInfo)
	mock.lockReceiveEvents.Unlock()
	return mock.ReceiveEventsFunc(empty, serverStreamingServer)
}

// ReceiveEventsCalls gets all the calls that were made to ReceiveEvents.
// Check the length with:
//
//	len(mockedEventServiceServer.ReceiveEventsCalls())
func (mock *MockEventServiceServer) ReceiveEventsCalls() []struct {
	Empty                 *emptypb.Empty
	ServerStreamingServer grpc.ServerStreamingServer[runmv1.PublishEventsResponse]
} {
	var calls []struct {
		Empty                 *emptypb.Empty
		ServerStreamingServer grpc.ServerStreamingServer[runmv1.PublishEventsResponse]
	}
	mock.lockReceiveEvents.RLock()
	calls = mock.calls.ReceiveEvents
	mock.lockReceiveEvents.RUnlock()
	return calls
}

// SubscribeToReaperExits calls SubscribeToReaperExitsFunc.
func (mock *MockEventServiceServer) SubscribeToReaperExits(empty *emptypb.Empty, serverStreamingServer grpc.ServerStreamingServer[runmv1.ReaperExit]) error {
	if mock.SubscribeToReaperExitsFunc == nil {
		panic("MockEventServiceServer.SubscribeToReaperExitsFunc: method is nil but EventServiceServer.SubscribeToReaperExits was just called")
	}
	callInfo := struct {
		Empty                 *emptypb.Empty
		ServerStreamingServer grpc.ServerStreamingServer[runmv1.ReaperExit]
	}{
		Empty:                 empty,
		ServerStreamingServer: serverStreamingServer,
	}
	mock.lockSubscribeToReaperExits.Lock()
	mock.calls.SubscribeToReaperExits = append(mock.calls.SubscribeToReaperExits, callInfo)
	mock.lockSubscribeToReaperExits.Unlock()
	return mock.SubscribeToReaperExitsFunc(empty, serverStreamingServer)
}

// SubscribeToReaperExitsCalls gets all the calls that were made to SubscribeToReaperExits.
// Check the length with:
//
//	len(mockedEventServiceServer.SubscribeToReaperExitsCalls())
func (mock *MockEventServiceServer) SubscribeToReaperExitsCalls() []struct {
	Empty                 *emptypb.Empty
	ServerStreamingServer grpc.ServerStreamingServer[runmv1.ReaperExit]
} {
	var calls []struct {
		Empty                 *emptypb.Empty
		ServerStreamingServer grpc.ServerStreamingServer[runmv1.ReaperExit]
	}
	mock.lockSubscribeToReaperExits.RLock()
	calls = mock.calls.SubscribeToReaperExits
	mock.lockSubscribeToReaperExits.RUnlock()
	return calls
}
