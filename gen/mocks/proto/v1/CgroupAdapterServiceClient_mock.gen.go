// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockrunmv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/v1"
	"google.golang.org/grpc"
)

// Ensure that MockCgroupAdapterServiceClient does implement runmv1.CgroupAdapterServiceClient.
// If this is not the case, regenerate this file with mockery.
var _ runmv1.CgroupAdapterServiceClient = &MockCgroupAdapterServiceClient{}

// MockCgroupAdapterServiceClient is a mock implementation of runmv1.CgroupAdapterServiceClient.
//
//	func TestSomethingThatUsesCgroupAdapterServiceClient(t *testing.T) {
//
//		// make and configure a mocked runmv1.CgroupAdapterServiceClient
//		mockedCgroupAdapterServiceClient := &MockCgroupAdapterServiceClient{
//			GetCgroupStatsFunc: func(ctx context.Context, in *runmv1.GetCgroupStatsRequest, opts ...grpc.CallOption) (*runmv1.GetCgroupStatsResponse, error) {
//				panic("mock out the GetCgroupStats method")
//			},
//			StreamCgroupEventsFunc: func(ctx context.Context, in *runmv1.StreamCgroupEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[runmv1.StreamCgroupEventsResponse], error) {
//				panic("mock out the StreamCgroupEvents method")
//			},
//			ToggleAllControllersFunc: func(ctx context.Context, in *runmv1.ToggleAllControllersRequest, opts ...grpc.CallOption) (*runmv1.ToggleAllControllersResponse, error) {
//				panic("mock out the ToggleAllControllers method")
//			},
//		}
//
//		// use mockedCgroupAdapterServiceClient in code that requires runmv1.CgroupAdapterServiceClient
//		// and then make assertions.
//
//	}
type MockCgroupAdapterServiceClient struct {
	// GetCgroupStatsFunc mocks the GetCgroupStats method.
	GetCgroupStatsFunc func(ctx context.Context, in *runmv1.GetCgroupStatsRequest, opts ...grpc.CallOption) (*runmv1.GetCgroupStatsResponse, error)

	// StreamCgroupEventsFunc mocks the StreamCgroupEvents method.
	StreamCgroupEventsFunc func(ctx context.Context, in *runmv1.StreamCgroupEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[runmv1.StreamCgroupEventsResponse], error)

	// ToggleAllControllersFunc mocks the ToggleAllControllers method.
	ToggleAllControllersFunc func(ctx context.Context, in *runmv1.ToggleAllControllersRequest, opts ...grpc.CallOption) (*runmv1.ToggleAllControllersResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCgroupStats holds details about calls to the GetCgroupStats method.
		GetCgroupStats []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *runmv1.GetCgroupStatsRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// StreamCgroupEvents holds details about calls to the StreamCgroupEvents method.
		StreamCgroupEvents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *runmv1.StreamCgroupEventsRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// ToggleAllControllers holds details about calls to the ToggleAllControllers method.
		ToggleAllControllers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *runmv1.ToggleAllControllersRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockGetCgroupStats       sync.RWMutex
	lockStreamCgroupEvents   sync.RWMutex
	lockToggleAllControllers sync.RWMutex
}

// GetCgroupStats calls GetCgroupStatsFunc.
func (mock *MockCgroupAdapterServiceClient) GetCgroupStats(ctx context.Context, in *runmv1.GetCgroupStatsRequest, opts ...grpc.CallOption) (*runmv1.GetCgroupStatsResponse, error) {
	if mock.GetCgroupStatsFunc == nil {
		panic("MockCgroupAdapterServiceClient.GetCgroupStatsFunc: method is nil but CgroupAdapterServiceClient.GetCgroupStats was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *runmv1.GetCgroupStatsRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetCgroupStats.Lock()
	mock.calls.GetCgroupStats = append(mock.calls.GetCgroupStats, callInfo)
	mock.lockGetCgroupStats.Unlock()
	return mock.GetCgroupStatsFunc(ctx, in, opts...)
}

// GetCgroupStatsCalls gets all the calls that were made to GetCgroupStats.
// Check the length with:
//
//	len(mockedCgroupAdapterServiceClient.GetCgroupStatsCalls())
func (mock *MockCgroupAdapterServiceClient) GetCgroupStatsCalls() []struct {
	Ctx  context.Context
	In   *runmv1.GetCgroupStatsRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *runmv1.GetCgroupStatsRequest
		Opts []grpc.CallOption
	}
	mock.lockGetCgroupStats.RLock()
	calls = mock.calls.GetCgroupStats
	mock.lockGetCgroupStats.RUnlock()
	return calls
}

// StreamCgroupEvents calls StreamCgroupEventsFunc.
func (mock *MockCgroupAdapterServiceClient) StreamCgroupEvents(ctx context.Context, in *runmv1.StreamCgroupEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[runmv1.StreamCgroupEventsResponse], error) {
	if mock.StreamCgroupEventsFunc == nil {
		panic("MockCgroupAdapterServiceClient.StreamCgroupEventsFunc: method is nil but CgroupAdapterServiceClient.StreamCgroupEvents was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *runmv1.StreamCgroupEventsRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockStreamCgroupEvents.Lock()
	mock.calls.StreamCgroupEvents = append(mock.calls.StreamCgroupEvents, callInfo)
	mock.lockStreamCgroupEvents.Unlock()
	return mock.StreamCgroupEventsFunc(ctx, in, opts...)
}

// StreamCgroupEventsCalls gets all the calls that were made to StreamCgroupEvents.
// Check the length with:
//
//	len(mockedCgroupAdapterServiceClient.StreamCgroupEventsCalls())
func (mock *MockCgroupAdapterServiceClient) StreamCgroupEventsCalls() []struct {
	Ctx  context.Context
	In   *runmv1.StreamCgroupEventsRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *runmv1.StreamCgroupEventsRequest
		Opts []grpc.CallOption
	}
	mock.lockStreamCgroupEvents.RLock()
	calls = mock.calls.StreamCgroupEvents
	mock.lockStreamCgroupEvents.RUnlock()
	return calls
}

// ToggleAllControllers calls ToggleAllControllersFunc.
func (mock *MockCgroupAdapterServiceClient) ToggleAllControllers(ctx context.Context, in *runmv1.ToggleAllControllersRequest, opts ...grpc.CallOption) (*runmv1.ToggleAllControllersResponse, error) {
	if mock.ToggleAllControllersFunc == nil {
		panic("MockCgroupAdapterServiceClient.ToggleAllControllersFunc: method is nil but CgroupAdapterServiceClient.ToggleAllControllers was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *runmv1.ToggleAllControllersRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockToggleAllControllers.Lock()
	mock.calls.ToggleAllControllers = append(mock.calls.ToggleAllControllers, callInfo)
	mock.lockToggleAllControllers.Unlock()
	return mock.ToggleAllControllersFunc(ctx, in, opts...)
}

// ToggleAllControllersCalls gets all the calls that were made to ToggleAllControllers.
// Check the length with:
//
//	len(mockedCgroupAdapterServiceClient.ToggleAllControllersCalls())
func (mock *MockCgroupAdapterServiceClient) ToggleAllControllersCalls() []struct {
	Ctx  context.Context
	In   *runmv1.ToggleAllControllersRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *runmv1.ToggleAllControllersRequest
		Opts []grpc.CallOption
	}
	mock.lockToggleAllControllers.RLock()
	calls = mock.calls.ToggleAllControllers
	mock.lockToggleAllControllers.RUnlock()
	return calls
}
