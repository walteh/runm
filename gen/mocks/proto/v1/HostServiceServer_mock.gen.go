// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockrunmv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/v1"
)

// Ensure that MockHostServiceServer does implement runmv1.HostServiceServer.
// If this is not the case, regenerate this file with mockery.
var _ runmv1.HostServiceServer = &MockHostServiceServer{}

// MockHostServiceServer is a mock implementation of runmv1.HostServiceServer.
//
//	func TestSomethingThatUsesHostServiceServer(t *testing.T) {
//
//		// make and configure a mocked runmv1.HostServiceServer
//		mockedHostServiceServer := &MockHostServiceServer{
//			ForkExecProxyFunc: func(context1 context.Context, forkExecProxyRequest *runmv1.ForkExecProxyRequest) (*runmv1.ForkExecProxyResponse, error) {
//				panic("mock out the ForkExecProxy method")
//			},
//		}
//
//		// use mockedHostServiceServer in code that requires runmv1.HostServiceServer
//		// and then make assertions.
//
//	}
type MockHostServiceServer struct {
	// ForkExecProxyFunc mocks the ForkExecProxy method.
	ForkExecProxyFunc func(context1 context.Context, forkExecProxyRequest *runmv1.ForkExecProxyRequest) (*runmv1.ForkExecProxyResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// ForkExecProxy holds details about calls to the ForkExecProxy method.
		ForkExecProxy []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// ForkExecProxyRequest is the forkExecProxyRequest argument value.
			ForkExecProxyRequest *runmv1.ForkExecProxyRequest
		}
	}
	lockForkExecProxy sync.RWMutex
}

// ForkExecProxy calls ForkExecProxyFunc.
func (mock *MockHostServiceServer) ForkExecProxy(context1 context.Context, forkExecProxyRequest *runmv1.ForkExecProxyRequest) (*runmv1.ForkExecProxyResponse, error) {
	if mock.ForkExecProxyFunc == nil {
		panic("MockHostServiceServer.ForkExecProxyFunc: method is nil but HostServiceServer.ForkExecProxy was just called")
	}
	callInfo := struct {
		Context1             context.Context
		ForkExecProxyRequest *runmv1.ForkExecProxyRequest
	}{
		Context1:             context1,
		ForkExecProxyRequest: forkExecProxyRequest,
	}
	mock.lockForkExecProxy.Lock()
	mock.calls.ForkExecProxy = append(mock.calls.ForkExecProxy, callInfo)
	mock.lockForkExecProxy.Unlock()
	return mock.ForkExecProxyFunc(context1, forkExecProxyRequest)
}

// ForkExecProxyCalls gets all the calls that were made to ForkExecProxy.
// Check the length with:
//
//	len(mockedHostServiceServer.ForkExecProxyCalls())
func (mock *MockHostServiceServer) ForkExecProxyCalls() []struct {
	Context1             context.Context
	ForkExecProxyRequest *runmv1.ForkExecProxyRequest
} {
	var calls []struct {
		Context1             context.Context
		ForkExecProxyRequest *runmv1.ForkExecProxyRequest
	}
	mock.lockForkExecProxy.RLock()
	calls = mock.calls.ForkExecProxy
	mock.lockForkExecProxy.RUnlock()
	return calls
}
