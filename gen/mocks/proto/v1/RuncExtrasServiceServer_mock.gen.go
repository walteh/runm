// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockrunmv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/v1"
	"google.golang.org/grpc"
)

// Ensure that MockRuncExtrasServiceServer does implement runmv1.RuncExtrasServiceServer.
// If this is not the case, regenerate this file with mockery.
var _ runmv1.RuncExtrasServiceServer = &MockRuncExtrasServiceServer{}

// MockRuncExtrasServiceServer is a mock implementation of runmv1.RuncExtrasServiceServer.
//
//	func TestSomethingThatUsesRuncExtrasServiceServer(t *testing.T) {
//
//		// make and configure a mocked runmv1.RuncExtrasServiceServer
//		mockedRuncExtrasServiceServer := &MockRuncExtrasServiceServer{
//			EventsFunc: func(runcEventsRequest *runmv1.RuncEventsRequest, serverStreamingServer grpc.ServerStreamingServer[runmv1.RuncEvent]) error {
//				panic("mock out the Events method")
//			},
//			ListFunc: func(context1 context.Context, runcListRequest *runmv1.RuncListRequest) (*runmv1.RuncListResponse, error) {
//				panic("mock out the List method")
//			},
//			RunFunc: func(context1 context.Context, runcRunRequest *runmv1.RuncRunRequest) (*runmv1.RuncRunResponse, error) {
//				panic("mock out the Run method")
//			},
//			StateFunc: func(context1 context.Context, runcStateRequest *runmv1.RuncStateRequest) (*runmv1.RuncStateResponse, error) {
//				panic("mock out the State method")
//			},
//			StatsFunc: func(context1 context.Context, runcStatsRequest *runmv1.RuncStatsRequest) (*runmv1.RuncStatsResponse, error) {
//				panic("mock out the Stats method")
//			},
//			TopFunc: func(context1 context.Context, runcTopRequest *runmv1.RuncTopRequest) (*runmv1.RuncTopResponse, error) {
//				panic("mock out the Top method")
//			},
//			VersionFunc: func(context1 context.Context, runcVersionRequest *runmv1.RuncVersionRequest) (*runmv1.RuncVersionResponse, error) {
//				panic("mock out the Version method")
//			},
//		}
//
//		// use mockedRuncExtrasServiceServer in code that requires runmv1.RuncExtrasServiceServer
//		// and then make assertions.
//
//	}
type MockRuncExtrasServiceServer struct {
	// EventsFunc mocks the Events method.
	EventsFunc func(runcEventsRequest *runmv1.RuncEventsRequest, serverStreamingServer grpc.ServerStreamingServer[runmv1.RuncEvent]) error

	// ListFunc mocks the List method.
	ListFunc func(context1 context.Context, runcListRequest *runmv1.RuncListRequest) (*runmv1.RuncListResponse, error)

	// RunFunc mocks the Run method.
	RunFunc func(context1 context.Context, runcRunRequest *runmv1.RuncRunRequest) (*runmv1.RuncRunResponse, error)

	// StateFunc mocks the State method.
	StateFunc func(context1 context.Context, runcStateRequest *runmv1.RuncStateRequest) (*runmv1.RuncStateResponse, error)

	// StatsFunc mocks the Stats method.
	StatsFunc func(context1 context.Context, runcStatsRequest *runmv1.RuncStatsRequest) (*runmv1.RuncStatsResponse, error)

	// TopFunc mocks the Top method.
	TopFunc func(context1 context.Context, runcTopRequest *runmv1.RuncTopRequest) (*runmv1.RuncTopResponse, error)

	// VersionFunc mocks the Version method.
	VersionFunc func(context1 context.Context, runcVersionRequest *runmv1.RuncVersionRequest) (*runmv1.RuncVersionResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Events holds details about calls to the Events method.
		Events []struct {
			// RuncEventsRequest is the runcEventsRequest argument value.
			RuncEventsRequest *runmv1.RuncEventsRequest
			// ServerStreamingServer is the serverStreamingServer argument value.
			ServerStreamingServer grpc.ServerStreamingServer[runmv1.RuncEvent]
		}
		// List holds details about calls to the List method.
		List []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncListRequest is the runcListRequest argument value.
			RuncListRequest *runmv1.RuncListRequest
		}
		// Run holds details about calls to the Run method.
		Run []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncRunRequest is the runcRunRequest argument value.
			RuncRunRequest *runmv1.RuncRunRequest
		}
		// State holds details about calls to the State method.
		State []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncStateRequest is the runcStateRequest argument value.
			RuncStateRequest *runmv1.RuncStateRequest
		}
		// Stats holds details about calls to the Stats method.
		Stats []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncStatsRequest is the runcStatsRequest argument value.
			RuncStatsRequest *runmv1.RuncStatsRequest
		}
		// Top holds details about calls to the Top method.
		Top []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncTopRequest is the runcTopRequest argument value.
			RuncTopRequest *runmv1.RuncTopRequest
		}
		// Version holds details about calls to the Version method.
		Version []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// RuncVersionRequest is the runcVersionRequest argument value.
			RuncVersionRequest *runmv1.RuncVersionRequest
		}
	}
	lockEvents  sync.RWMutex
	lockList    sync.RWMutex
	lockRun     sync.RWMutex
	lockState   sync.RWMutex
	lockStats   sync.RWMutex
	lockTop     sync.RWMutex
	lockVersion sync.RWMutex
}

// Events calls EventsFunc.
func (mock *MockRuncExtrasServiceServer) Events(runcEventsRequest *runmv1.RuncEventsRequest, serverStreamingServer grpc.ServerStreamingServer[runmv1.RuncEvent]) error {
	if mock.EventsFunc == nil {
		panic("MockRuncExtrasServiceServer.EventsFunc: method is nil but RuncExtrasServiceServer.Events was just called")
	}
	callInfo := struct {
		RuncEventsRequest     *runmv1.RuncEventsRequest
		ServerStreamingServer grpc.ServerStreamingServer[runmv1.RuncEvent]
	}{
		RuncEventsRequest:     runcEventsRequest,
		ServerStreamingServer: serverStreamingServer,
	}
	mock.lockEvents.Lock()
	mock.calls.Events = append(mock.calls.Events, callInfo)
	mock.lockEvents.Unlock()
	return mock.EventsFunc(runcEventsRequest, serverStreamingServer)
}

// EventsCalls gets all the calls that were made to Events.
// Check the length with:
//
//	len(mockedRuncExtrasServiceServer.EventsCalls())
func (mock *MockRuncExtrasServiceServer) EventsCalls() []struct {
	RuncEventsRequest     *runmv1.RuncEventsRequest
	ServerStreamingServer grpc.ServerStreamingServer[runmv1.RuncEvent]
} {
	var calls []struct {
		RuncEventsRequest     *runmv1.RuncEventsRequest
		ServerStreamingServer grpc.ServerStreamingServer[runmv1.RuncEvent]
	}
	mock.lockEvents.RLock()
	calls = mock.calls.Events
	mock.lockEvents.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *MockRuncExtrasServiceServer) List(context1 context.Context, runcListRequest *runmv1.RuncListRequest) (*runmv1.RuncListResponse, error) {
	if mock.ListFunc == nil {
		panic("MockRuncExtrasServiceServer.ListFunc: method is nil but RuncExtrasServiceServer.List was just called")
	}
	callInfo := struct {
		Context1        context.Context
		RuncListRequest *runmv1.RuncListRequest
	}{
		Context1:        context1,
		RuncListRequest: runcListRequest,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(context1, runcListRequest)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedRuncExtrasServiceServer.ListCalls())
func (mock *MockRuncExtrasServiceServer) ListCalls() []struct {
	Context1        context.Context
	RuncListRequest *runmv1.RuncListRequest
} {
	var calls []struct {
		Context1        context.Context
		RuncListRequest *runmv1.RuncListRequest
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Run calls RunFunc.
func (mock *MockRuncExtrasServiceServer) Run(context1 context.Context, runcRunRequest *runmv1.RuncRunRequest) (*runmv1.RuncRunResponse, error) {
	if mock.RunFunc == nil {
		panic("MockRuncExtrasServiceServer.RunFunc: method is nil but RuncExtrasServiceServer.Run was just called")
	}
	callInfo := struct {
		Context1       context.Context
		RuncRunRequest *runmv1.RuncRunRequest
	}{
		Context1:       context1,
		RuncRunRequest: runcRunRequest,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(context1, runcRunRequest)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedRuncExtrasServiceServer.RunCalls())
func (mock *MockRuncExtrasServiceServer) RunCalls() []struct {
	Context1       context.Context
	RuncRunRequest *runmv1.RuncRunRequest
} {
	var calls []struct {
		Context1       context.Context
		RuncRunRequest *runmv1.RuncRunRequest
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}

// State calls StateFunc.
func (mock *MockRuncExtrasServiceServer) State(context1 context.Context, runcStateRequest *runmv1.RuncStateRequest) (*runmv1.RuncStateResponse, error) {
	if mock.StateFunc == nil {
		panic("MockRuncExtrasServiceServer.StateFunc: method is nil but RuncExtrasServiceServer.State was just called")
	}
	callInfo := struct {
		Context1         context.Context
		RuncStateRequest *runmv1.RuncStateRequest
	}{
		Context1:         context1,
		RuncStateRequest: runcStateRequest,
	}
	mock.lockState.Lock()
	mock.calls.State = append(mock.calls.State, callInfo)
	mock.lockState.Unlock()
	return mock.StateFunc(context1, runcStateRequest)
}

// StateCalls gets all the calls that were made to State.
// Check the length with:
//
//	len(mockedRuncExtrasServiceServer.StateCalls())
func (mock *MockRuncExtrasServiceServer) StateCalls() []struct {
	Context1         context.Context
	RuncStateRequest *runmv1.RuncStateRequest
} {
	var calls []struct {
		Context1         context.Context
		RuncStateRequest *runmv1.RuncStateRequest
	}
	mock.lockState.RLock()
	calls = mock.calls.State
	mock.lockState.RUnlock()
	return calls
}

// Stats calls StatsFunc.
func (mock *MockRuncExtrasServiceServer) Stats(context1 context.Context, runcStatsRequest *runmv1.RuncStatsRequest) (*runmv1.RuncStatsResponse, error) {
	if mock.StatsFunc == nil {
		panic("MockRuncExtrasServiceServer.StatsFunc: method is nil but RuncExtrasServiceServer.Stats was just called")
	}
	callInfo := struct {
		Context1         context.Context
		RuncStatsRequest *runmv1.RuncStatsRequest
	}{
		Context1:         context1,
		RuncStatsRequest: runcStatsRequest,
	}
	mock.lockStats.Lock()
	mock.calls.Stats = append(mock.calls.Stats, callInfo)
	mock.lockStats.Unlock()
	return mock.StatsFunc(context1, runcStatsRequest)
}

// StatsCalls gets all the calls that were made to Stats.
// Check the length with:
//
//	len(mockedRuncExtrasServiceServer.StatsCalls())
func (mock *MockRuncExtrasServiceServer) StatsCalls() []struct {
	Context1         context.Context
	RuncStatsRequest *runmv1.RuncStatsRequest
} {
	var calls []struct {
		Context1         context.Context
		RuncStatsRequest *runmv1.RuncStatsRequest
	}
	mock.lockStats.RLock()
	calls = mock.calls.Stats
	mock.lockStats.RUnlock()
	return calls
}

// Top calls TopFunc.
func (mock *MockRuncExtrasServiceServer) Top(context1 context.Context, runcTopRequest *runmv1.RuncTopRequest) (*runmv1.RuncTopResponse, error) {
	if mock.TopFunc == nil {
		panic("MockRuncExtrasServiceServer.TopFunc: method is nil but RuncExtrasServiceServer.Top was just called")
	}
	callInfo := struct {
		Context1       context.Context
		RuncTopRequest *runmv1.RuncTopRequest
	}{
		Context1:       context1,
		RuncTopRequest: runcTopRequest,
	}
	mock.lockTop.Lock()
	mock.calls.Top = append(mock.calls.Top, callInfo)
	mock.lockTop.Unlock()
	return mock.TopFunc(context1, runcTopRequest)
}

// TopCalls gets all the calls that were made to Top.
// Check the length with:
//
//	len(mockedRuncExtrasServiceServer.TopCalls())
func (mock *MockRuncExtrasServiceServer) TopCalls() []struct {
	Context1       context.Context
	RuncTopRequest *runmv1.RuncTopRequest
} {
	var calls []struct {
		Context1       context.Context
		RuncTopRequest *runmv1.RuncTopRequest
	}
	mock.lockTop.RLock()
	calls = mock.calls.Top
	mock.lockTop.RUnlock()
	return calls
}

// Version calls VersionFunc.
func (mock *MockRuncExtrasServiceServer) Version(context1 context.Context, runcVersionRequest *runmv1.RuncVersionRequest) (*runmv1.RuncVersionResponse, error) {
	if mock.VersionFunc == nil {
		panic("MockRuncExtrasServiceServer.VersionFunc: method is nil but RuncExtrasServiceServer.Version was just called")
	}
	callInfo := struct {
		Context1           context.Context
		RuncVersionRequest *runmv1.RuncVersionRequest
	}{
		Context1:           context1,
		RuncVersionRequest: runcVersionRequest,
	}
	mock.lockVersion.Lock()
	mock.calls.Version = append(mock.calls.Version, callInfo)
	mock.lockVersion.Unlock()
	return mock.VersionFunc(context1, runcVersionRequest)
}

// VersionCalls gets all the calls that were made to Version.
// Check the length with:
//
//	len(mockedRuncExtrasServiceServer.VersionCalls())
func (mock *MockRuncExtrasServiceServer) VersionCalls() []struct {
	Context1           context.Context
	RuncVersionRequest *runmv1.RuncVersionRequest
} {
	var calls []struct {
		Context1           context.Context
		RuncVersionRequest *runmv1.RuncVersionRequest
	}
	mock.lockVersion.RLock()
	calls = mock.calls.Version
	mock.lockVersion.RUnlock()
	return calls
}
