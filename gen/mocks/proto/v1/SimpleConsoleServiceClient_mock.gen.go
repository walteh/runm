// Code generated by mockery. DO NOT EDIT.

package mockrunvv1

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	runvv1 "github.com/walteh/runv/proto/v1"
)

// MockSimpleConsoleServiceClient is an autogenerated mock type for the SimpleConsoleServiceClient type
type MockSimpleConsoleServiceClient struct {
	mock.Mock
}

type MockSimpleConsoleServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSimpleConsoleServiceClient) EXPECT() *MockSimpleConsoleServiceClient_Expecter {
	return &MockSimpleConsoleServiceClient_Expecter{mock: &_m.Mock}
}

// ClosePlatform provides a mock function with given fields: ctx, in, opts
func (_m *MockSimpleConsoleServiceClient) ClosePlatform(ctx context.Context, in *runvv1.SimpleClosePlatformRequest, opts ...grpc.CallOption) (*runvv1.SimpleClosePlatformResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClosePlatform")
	}

	var r0 *runvv1.SimpleClosePlatformResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.SimpleClosePlatformRequest, ...grpc.CallOption) (*runvv1.SimpleClosePlatformResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.SimpleClosePlatformRequest, ...grpc.CallOption) *runvv1.SimpleClosePlatformResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.SimpleClosePlatformResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.SimpleClosePlatformRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSimpleConsoleServiceClient_ClosePlatform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClosePlatform'
type MockSimpleConsoleServiceClient_ClosePlatform_Call struct {
	*mock.Call
}

// ClosePlatform is a helper method to define mock.On call
//   - ctx context.Context
//   - in *runvv1.SimpleClosePlatformRequest
//   - opts ...grpc.CallOption
func (_e *MockSimpleConsoleServiceClient_Expecter) ClosePlatform(ctx interface{}, in interface{}, opts ...interface{}) *MockSimpleConsoleServiceClient_ClosePlatform_Call {
	return &MockSimpleConsoleServiceClient_ClosePlatform_Call{Call: _e.mock.On("ClosePlatform",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSimpleConsoleServiceClient_ClosePlatform_Call) Run(run func(ctx context.Context, in *runvv1.SimpleClosePlatformRequest, opts ...grpc.CallOption)) *MockSimpleConsoleServiceClient_ClosePlatform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*runvv1.SimpleClosePlatformRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSimpleConsoleServiceClient_ClosePlatform_Call) Return(_a0 *runvv1.SimpleClosePlatformResponse, _a1 error) *MockSimpleConsoleServiceClient_ClosePlatform_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSimpleConsoleServiceClient_ClosePlatform_Call) RunAndReturn(run func(context.Context, *runvv1.SimpleClosePlatformRequest, ...grpc.CallOption) (*runvv1.SimpleClosePlatformResponse, error)) *MockSimpleConsoleServiceClient_ClosePlatform_Call {
	_c.Call.Return(run)
	return _c
}

// CopyConsole provides a mock function with given fields: ctx, in, opts
func (_m *MockSimpleConsoleServiceClient) CopyConsole(ctx context.Context, in *runvv1.SimpleCopyConsoleRequest, opts ...grpc.CallOption) (*runvv1.SimpleCopyConsoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyConsole")
	}

	var r0 *runvv1.SimpleCopyConsoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.SimpleCopyConsoleRequest, ...grpc.CallOption) (*runvv1.SimpleCopyConsoleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.SimpleCopyConsoleRequest, ...grpc.CallOption) *runvv1.SimpleCopyConsoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.SimpleCopyConsoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.SimpleCopyConsoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSimpleConsoleServiceClient_CopyConsole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyConsole'
type MockSimpleConsoleServiceClient_CopyConsole_Call struct {
	*mock.Call
}

// CopyConsole is a helper method to define mock.On call
//   - ctx context.Context
//   - in *runvv1.SimpleCopyConsoleRequest
//   - opts ...grpc.CallOption
func (_e *MockSimpleConsoleServiceClient_Expecter) CopyConsole(ctx interface{}, in interface{}, opts ...interface{}) *MockSimpleConsoleServiceClient_CopyConsole_Call {
	return &MockSimpleConsoleServiceClient_CopyConsole_Call{Call: _e.mock.On("CopyConsole",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSimpleConsoleServiceClient_CopyConsole_Call) Run(run func(ctx context.Context, in *runvv1.SimpleCopyConsoleRequest, opts ...grpc.CallOption)) *MockSimpleConsoleServiceClient_CopyConsole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*runvv1.SimpleCopyConsoleRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSimpleConsoleServiceClient_CopyConsole_Call) Return(_a0 *runvv1.SimpleCopyConsoleResponse, _a1 error) *MockSimpleConsoleServiceClient_CopyConsole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSimpleConsoleServiceClient_CopyConsole_Call) RunAndReturn(run func(context.Context, *runvv1.SimpleCopyConsoleRequest, ...grpc.CallOption) (*runvv1.SimpleCopyConsoleResponse, error)) *MockSimpleConsoleServiceClient_CopyConsole_Call {
	_c.Call.Return(run)
	return _c
}

// ShutdownConsole provides a mock function with given fields: ctx, in, opts
func (_m *MockSimpleConsoleServiceClient) ShutdownConsole(ctx context.Context, in *runvv1.SimpleShutdownConsoleRequest, opts ...grpc.CallOption) (*runvv1.SimpleShutdownConsoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ShutdownConsole")
	}

	var r0 *runvv1.SimpleShutdownConsoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.SimpleShutdownConsoleRequest, ...grpc.CallOption) (*runvv1.SimpleShutdownConsoleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.SimpleShutdownConsoleRequest, ...grpc.CallOption) *runvv1.SimpleShutdownConsoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.SimpleShutdownConsoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.SimpleShutdownConsoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSimpleConsoleServiceClient_ShutdownConsole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutdownConsole'
type MockSimpleConsoleServiceClient_ShutdownConsole_Call struct {
	*mock.Call
}

// ShutdownConsole is a helper method to define mock.On call
//   - ctx context.Context
//   - in *runvv1.SimpleShutdownConsoleRequest
//   - opts ...grpc.CallOption
func (_e *MockSimpleConsoleServiceClient_Expecter) ShutdownConsole(ctx interface{}, in interface{}, opts ...interface{}) *MockSimpleConsoleServiceClient_ShutdownConsole_Call {
	return &MockSimpleConsoleServiceClient_ShutdownConsole_Call{Call: _e.mock.On("ShutdownConsole",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSimpleConsoleServiceClient_ShutdownConsole_Call) Run(run func(ctx context.Context, in *runvv1.SimpleShutdownConsoleRequest, opts ...grpc.CallOption)) *MockSimpleConsoleServiceClient_ShutdownConsole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*runvv1.SimpleShutdownConsoleRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSimpleConsoleServiceClient_ShutdownConsole_Call) Return(_a0 *runvv1.SimpleShutdownConsoleResponse, _a1 error) *MockSimpleConsoleServiceClient_ShutdownConsole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSimpleConsoleServiceClient_ShutdownConsole_Call) RunAndReturn(run func(context.Context, *runvv1.SimpleShutdownConsoleRequest, ...grpc.CallOption) (*runvv1.SimpleShutdownConsoleResponse, error)) *MockSimpleConsoleServiceClient_ShutdownConsole_Call {
	_c.Call.Return(run)
	return _c
}

// StreamConsole provides a mock function with given fields: ctx, opts
func (_m *MockSimpleConsoleServiceClient) StreamConsole(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[runvv1.ConsoleChunk, runvv1.ConsoleChunk], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StreamConsole")
	}

	var r0 grpc.BidiStreamingClient[runvv1.ConsoleChunk, runvv1.ConsoleChunk]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (grpc.BidiStreamingClient[runvv1.ConsoleChunk, runvv1.ConsoleChunk], error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) grpc.BidiStreamingClient[runvv1.ConsoleChunk, runvv1.ConsoleChunk]); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.BidiStreamingClient[runvv1.ConsoleChunk, runvv1.ConsoleChunk])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSimpleConsoleServiceClient_StreamConsole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamConsole'
type MockSimpleConsoleServiceClient_StreamConsole_Call struct {
	*mock.Call
}

// StreamConsole is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockSimpleConsoleServiceClient_Expecter) StreamConsole(ctx interface{}, opts ...interface{}) *MockSimpleConsoleServiceClient_StreamConsole_Call {
	return &MockSimpleConsoleServiceClient_StreamConsole_Call{Call: _e.mock.On("StreamConsole",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockSimpleConsoleServiceClient_StreamConsole_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockSimpleConsoleServiceClient_StreamConsole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockSimpleConsoleServiceClient_StreamConsole_Call) Return(_a0 grpc.BidiStreamingClient[runvv1.ConsoleChunk, runvv1.ConsoleChunk], _a1 error) *MockSimpleConsoleServiceClient_StreamConsole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSimpleConsoleServiceClient_StreamConsole_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (grpc.BidiStreamingClient[runvv1.ConsoleChunk, runvv1.ConsoleChunk], error)) *MockSimpleConsoleServiceClient_StreamConsole_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSimpleConsoleServiceClient creates a new instance of MockSimpleConsoleServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSimpleConsoleServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSimpleConsoleServiceClient {
	mock := &MockSimpleConsoleServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
