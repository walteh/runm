// Code generated by mockery. DO NOT EDIT.

package mockrunvv1

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	runvv1 "github.com/walteh/runv/proto/v1"
)

// MockPrctlServiceServer is an autogenerated mock type for the PrctlServiceServer type
type MockPrctlServiceServer struct {
	mock.Mock
}

type MockPrctlServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrctlServiceServer) EXPECT() *MockPrctlServiceServer_Expecter {
	return &MockPrctlServiceServer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MockPrctlServiceServer) Create(_a0 context.Context, _a1 *runvv1.CreateRequest) (*runvv1.CreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *runvv1.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.CreateRequest) (*runvv1.CreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.CreateRequest) *runvv1.CreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.CreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.CreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPrctlServiceServer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPrctlServiceServer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *runvv1.CreateRequest
func (_e *MockPrctlServiceServer_Expecter) Create(_a0 interface{}, _a1 interface{}) *MockPrctlServiceServer_Create_Call {
	return &MockPrctlServiceServer_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *MockPrctlServiceServer_Create_Call) Run(run func(_a0 context.Context, _a1 *runvv1.CreateRequest)) *MockPrctlServiceServer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*runvv1.CreateRequest))
	})
	return _c
}

func (_c *MockPrctlServiceServer_Create_Call) Return(_a0 *runvv1.CreateResponse, _a1 error) *MockPrctlServiceServer_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPrctlServiceServer_Create_Call) RunAndReturn(run func(context.Context, *runvv1.CreateRequest) (*runvv1.CreateResponse, error)) *MockPrctlServiceServer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// ShareFrom provides a mock function with given fields: _a0, _a1
func (_m *MockPrctlServiceServer) ShareFrom(_a0 context.Context, _a1 *runvv1.ShareFromRequest) (*runvv1.ShareFromResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ShareFrom")
	}

	var r0 *runvv1.ShareFromResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.ShareFromRequest) (*runvv1.ShareFromResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.ShareFromRequest) *runvv1.ShareFromResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.ShareFromResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.ShareFromRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPrctlServiceServer_ShareFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShareFrom'
type MockPrctlServiceServer_ShareFrom_Call struct {
	*mock.Call
}

// ShareFrom is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *runvv1.ShareFromRequest
func (_e *MockPrctlServiceServer_Expecter) ShareFrom(_a0 interface{}, _a1 interface{}) *MockPrctlServiceServer_ShareFrom_Call {
	return &MockPrctlServiceServer_ShareFrom_Call{Call: _e.mock.On("ShareFrom", _a0, _a1)}
}

func (_c *MockPrctlServiceServer_ShareFrom_Call) Run(run func(_a0 context.Context, _a1 *runvv1.ShareFromRequest)) *MockPrctlServiceServer_ShareFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*runvv1.ShareFromRequest))
	})
	return _c
}

func (_c *MockPrctlServiceServer_ShareFrom_Call) Return(_a0 *runvv1.ShareFromResponse, _a1 error) *MockPrctlServiceServer_ShareFrom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPrctlServiceServer_ShareFrom_Call) RunAndReturn(run func(context.Context, *runvv1.ShareFromRequest) (*runvv1.ShareFromResponse, error)) *MockPrctlServiceServer_ShareFrom_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedPrctlServiceServer provides a mock function with no fields
func (_m *MockPrctlServiceServer) mustEmbedUnimplementedPrctlServiceServer() {
	_m.Called()
}

// MockPrctlServiceServer_mustEmbedUnimplementedPrctlServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedPrctlServiceServer'
type MockPrctlServiceServer_mustEmbedUnimplementedPrctlServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedPrctlServiceServer is a helper method to define mock.On call
func (_e *MockPrctlServiceServer_Expecter) mustEmbedUnimplementedPrctlServiceServer() *MockPrctlServiceServer_mustEmbedUnimplementedPrctlServiceServer_Call {
	return &MockPrctlServiceServer_mustEmbedUnimplementedPrctlServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedPrctlServiceServer")}
}

func (_c *MockPrctlServiceServer_mustEmbedUnimplementedPrctlServiceServer_Call) Run(run func()) *MockPrctlServiceServer_mustEmbedUnimplementedPrctlServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrctlServiceServer_mustEmbedUnimplementedPrctlServiceServer_Call) Return() *MockPrctlServiceServer_mustEmbedUnimplementedPrctlServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPrctlServiceServer_mustEmbedUnimplementedPrctlServiceServer_Call) RunAndReturn(run func()) *MockPrctlServiceServer_mustEmbedUnimplementedPrctlServiceServer_Call {
	_c.Run(run)
	return _c
}

// NewMockPrctlServiceServer creates a new instance of MockPrctlServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrctlServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrctlServiceServer {
	mock := &MockPrctlServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
