// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockrunmv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/v1"
)

// Ensure that MockPrctlServiceServer does implement runmv1.PrctlServiceServer.
// If this is not the case, regenerate this file with mockery.
var _ runmv1.PrctlServiceServer = &MockPrctlServiceServer{}

// MockPrctlServiceServer is a mock implementation of runmv1.PrctlServiceServer.
//
//	func TestSomethingThatUsesPrctlServiceServer(t *testing.T) {
//
//		// make and configure a mocked runmv1.PrctlServiceServer
//		mockedPrctlServiceServer := &MockPrctlServiceServer{
//			CreateFunc: func(context1 context.Context, createRequest *runmv1.CreateRequest) (*runmv1.CreateResponse, error) {
//				panic("mock out the Create method")
//			},
//			ShareFromFunc: func(context1 context.Context, shareFromRequest *runmv1.ShareFromRequest) (*runmv1.ShareFromResponse, error) {
//				panic("mock out the ShareFrom method")
//			},
//		}
//
//		// use mockedPrctlServiceServer in code that requires runmv1.PrctlServiceServer
//		// and then make assertions.
//
//	}
type MockPrctlServiceServer struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(context1 context.Context, createRequest *runmv1.CreateRequest) (*runmv1.CreateResponse, error)

	// ShareFromFunc mocks the ShareFrom method.
	ShareFromFunc func(context1 context.Context, shareFromRequest *runmv1.ShareFromRequest) (*runmv1.ShareFromResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// CreateRequest is the createRequest argument value.
			CreateRequest *runmv1.CreateRequest
		}
		// ShareFrom holds details about calls to the ShareFrom method.
		ShareFrom []struct {
			// Context1 is the context1 argument value.
			Context1 context.Context
			// ShareFromRequest is the shareFromRequest argument value.
			ShareFromRequest *runmv1.ShareFromRequest
		}
	}
	lockCreate    sync.RWMutex
	lockShareFrom sync.RWMutex
}

// Create calls CreateFunc.
func (mock *MockPrctlServiceServer) Create(context1 context.Context, createRequest *runmv1.CreateRequest) (*runmv1.CreateResponse, error) {
	if mock.CreateFunc == nil {
		panic("MockPrctlServiceServer.CreateFunc: method is nil but PrctlServiceServer.Create was just called")
	}
	callInfo := struct {
		Context1      context.Context
		CreateRequest *runmv1.CreateRequest
	}{
		Context1:      context1,
		CreateRequest: createRequest,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(context1, createRequest)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedPrctlServiceServer.CreateCalls())
func (mock *MockPrctlServiceServer) CreateCalls() []struct {
	Context1      context.Context
	CreateRequest *runmv1.CreateRequest
} {
	var calls []struct {
		Context1      context.Context
		CreateRequest *runmv1.CreateRequest
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// ShareFrom calls ShareFromFunc.
func (mock *MockPrctlServiceServer) ShareFrom(context1 context.Context, shareFromRequest *runmv1.ShareFromRequest) (*runmv1.ShareFromResponse, error) {
	if mock.ShareFromFunc == nil {
		panic("MockPrctlServiceServer.ShareFromFunc: method is nil but PrctlServiceServer.ShareFrom was just called")
	}
	callInfo := struct {
		Context1         context.Context
		ShareFromRequest *runmv1.ShareFromRequest
	}{
		Context1:         context1,
		ShareFromRequest: shareFromRequest,
	}
	mock.lockShareFrom.Lock()
	mock.calls.ShareFrom = append(mock.calls.ShareFrom, callInfo)
	mock.lockShareFrom.Unlock()
	return mock.ShareFromFunc(context1, shareFromRequest)
}

// ShareFromCalls gets all the calls that were made to ShareFrom.
// Check the length with:
//
//	len(mockedPrctlServiceServer.ShareFromCalls())
func (mock *MockPrctlServiceServer) ShareFromCalls() []struct {
	Context1         context.Context
	ShareFromRequest *runmv1.ShareFromRequest
} {
	var calls []struct {
		Context1         context.Context
		ShareFromRequest *runmv1.ShareFromRequest
	}
	mock.lockShareFrom.RLock()
	calls = mock.calls.ShareFrom
	mock.lockShareFrom.RUnlock()
	return calls
}
