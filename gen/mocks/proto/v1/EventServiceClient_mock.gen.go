// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockrunmv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/v1"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

// Ensure that MockEventServiceClient does implement runmv1.EventServiceClient.
// If this is not the case, regenerate this file with mockery.
var _ runmv1.EventServiceClient = &MockEventServiceClient{}

// MockEventServiceClient is a mock implementation of runmv1.EventServiceClient.
//
//	func TestSomethingThatUsesEventServiceClient(t *testing.T) {
//
//		// make and configure a mocked runmv1.EventServiceClient
//		mockedEventServiceClient := &MockEventServiceClient{
//			PublishEventFunc: func(ctx context.Context, in *runmv1.PublishEventRequest, opts ...grpc.CallOption) (*runmv1.PublishEventResponse, error) {
//				panic("mock out the PublishEvent method")
//			},
//			ReceiveEventsFunc: func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[runmv1.PublishEventsResponse], error) {
//				panic("mock out the ReceiveEvents method")
//			},
//		}
//
//		// use mockedEventServiceClient in code that requires runmv1.EventServiceClient
//		// and then make assertions.
//
//	}
type MockEventServiceClient struct {
	// PublishEventFunc mocks the PublishEvent method.
	PublishEventFunc func(ctx context.Context, in *runmv1.PublishEventRequest, opts ...grpc.CallOption) (*runmv1.PublishEventResponse, error)

	// ReceiveEventsFunc mocks the ReceiveEvents method.
	ReceiveEventsFunc func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[runmv1.PublishEventsResponse], error)

	// calls tracks calls to the methods.
	calls struct {
		// PublishEvent holds details about calls to the PublishEvent method.
		PublishEvent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *runmv1.PublishEventRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// ReceiveEvents holds details about calls to the ReceiveEvents method.
		ReceiveEvents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *emptypb.Empty
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockPublishEvent  sync.RWMutex
	lockReceiveEvents sync.RWMutex
}

// PublishEvent calls PublishEventFunc.
func (mock *MockEventServiceClient) PublishEvent(ctx context.Context, in *runmv1.PublishEventRequest, opts ...grpc.CallOption) (*runmv1.PublishEventResponse, error) {
	if mock.PublishEventFunc == nil {
		panic("MockEventServiceClient.PublishEventFunc: method is nil but EventServiceClient.PublishEvent was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *runmv1.PublishEventRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockPublishEvent.Lock()
	mock.calls.PublishEvent = append(mock.calls.PublishEvent, callInfo)
	mock.lockPublishEvent.Unlock()
	return mock.PublishEventFunc(ctx, in, opts...)
}

// PublishEventCalls gets all the calls that were made to PublishEvent.
// Check the length with:
//
//	len(mockedEventServiceClient.PublishEventCalls())
func (mock *MockEventServiceClient) PublishEventCalls() []struct {
	Ctx  context.Context
	In   *runmv1.PublishEventRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *runmv1.PublishEventRequest
		Opts []grpc.CallOption
	}
	mock.lockPublishEvent.RLock()
	calls = mock.calls.PublishEvent
	mock.lockPublishEvent.RUnlock()
	return calls
}

// ReceiveEvents calls ReceiveEventsFunc.
func (mock *MockEventServiceClient) ReceiveEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[runmv1.PublishEventsResponse], error) {
	if mock.ReceiveEventsFunc == nil {
		panic("MockEventServiceClient.ReceiveEventsFunc: method is nil but EventServiceClient.ReceiveEvents was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockReceiveEvents.Lock()
	mock.calls.ReceiveEvents = append(mock.calls.ReceiveEvents, callInfo)
	mock.lockReceiveEvents.Unlock()
	return mock.ReceiveEventsFunc(ctx, in, opts...)
}

// ReceiveEventsCalls gets all the calls that were made to ReceiveEvents.
// Check the length with:
//
//	len(mockedEventServiceClient.ReceiveEventsCalls())
func (mock *MockEventServiceClient) ReceiveEventsCalls() []struct {
	Ctx  context.Context
	In   *emptypb.Empty
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}
	mock.lockReceiveEvents.RLock()
	calls = mock.calls.ReceiveEvents
	mock.lockReceiveEvents.RUnlock()
	return calls
}
