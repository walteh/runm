// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockrunmv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/v1"
	"google.golang.org/grpc"
)

// Ensure that MockGuestManagementServiceClient does implement runmv1.GuestManagementServiceClient.
// If this is not the case, regenerate this file with mockery.
var _ runmv1.GuestManagementServiceClient = &MockGuestManagementServiceClient{}

// MockGuestManagementServiceClient is a mock implementation of runmv1.GuestManagementServiceClient.
//
//	func TestSomethingThatUsesGuestManagementServiceClient(t *testing.T) {
//
//		// make and configure a mocked runmv1.GuestManagementServiceClient
//		mockedGuestManagementServiceClient := &MockGuestManagementServiceClient{
//			GuestReadinessFunc: func(ctx context.Context, in *runmv1.GuestReadinessRequest, opts ...grpc.CallOption) (*runmv1.GuestReadinessResponse, error) {
//				panic("mock out the GuestReadiness method")
//			},
//			GuestRunCommandFunc: func(ctx context.Context, in *runmv1.GuestRunCommandRequest, opts ...grpc.CallOption) (*runmv1.GuestRunCommandResponse, error) {
//				panic("mock out the GuestRunCommand method")
//			},
//			GuestTimeSyncFunc: func(ctx context.Context, in *runmv1.GuestTimeSyncRequest, opts ...grpc.CallOption) (*runmv1.GuestTimeSyncResponse, error) {
//				panic("mock out the GuestTimeSync method")
//			},
//		}
//
//		// use mockedGuestManagementServiceClient in code that requires runmv1.GuestManagementServiceClient
//		// and then make assertions.
//
//	}
type MockGuestManagementServiceClient struct {
	// GuestReadinessFunc mocks the GuestReadiness method.
	GuestReadinessFunc func(ctx context.Context, in *runmv1.GuestReadinessRequest, opts ...grpc.CallOption) (*runmv1.GuestReadinessResponse, error)

	// GuestRunCommandFunc mocks the GuestRunCommand method.
	GuestRunCommandFunc func(ctx context.Context, in *runmv1.GuestRunCommandRequest, opts ...grpc.CallOption) (*runmv1.GuestRunCommandResponse, error)

	// GuestTimeSyncFunc mocks the GuestTimeSync method.
	GuestTimeSyncFunc func(ctx context.Context, in *runmv1.GuestTimeSyncRequest, opts ...grpc.CallOption) (*runmv1.GuestTimeSyncResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// GuestReadiness holds details about calls to the GuestReadiness method.
		GuestReadiness []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *runmv1.GuestReadinessRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GuestRunCommand holds details about calls to the GuestRunCommand method.
		GuestRunCommand []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *runmv1.GuestRunCommandRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GuestTimeSync holds details about calls to the GuestTimeSync method.
		GuestTimeSync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *runmv1.GuestTimeSyncRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockGuestReadiness  sync.RWMutex
	lockGuestRunCommand sync.RWMutex
	lockGuestTimeSync   sync.RWMutex
}

// GuestReadiness calls GuestReadinessFunc.
func (mock *MockGuestManagementServiceClient) GuestReadiness(ctx context.Context, in *runmv1.GuestReadinessRequest, opts ...grpc.CallOption) (*runmv1.GuestReadinessResponse, error) {
	if mock.GuestReadinessFunc == nil {
		panic("MockGuestManagementServiceClient.GuestReadinessFunc: method is nil but GuestManagementServiceClient.GuestReadiness was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *runmv1.GuestReadinessRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGuestReadiness.Lock()
	mock.calls.GuestReadiness = append(mock.calls.GuestReadiness, callInfo)
	mock.lockGuestReadiness.Unlock()
	return mock.GuestReadinessFunc(ctx, in, opts...)
}

// GuestReadinessCalls gets all the calls that were made to GuestReadiness.
// Check the length with:
//
//	len(mockedGuestManagementServiceClient.GuestReadinessCalls())
func (mock *MockGuestManagementServiceClient) GuestReadinessCalls() []struct {
	Ctx  context.Context
	In   *runmv1.GuestReadinessRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *runmv1.GuestReadinessRequest
		Opts []grpc.CallOption
	}
	mock.lockGuestReadiness.RLock()
	calls = mock.calls.GuestReadiness
	mock.lockGuestReadiness.RUnlock()
	return calls
}

// GuestRunCommand calls GuestRunCommandFunc.
func (mock *MockGuestManagementServiceClient) GuestRunCommand(ctx context.Context, in *runmv1.GuestRunCommandRequest, opts ...grpc.CallOption) (*runmv1.GuestRunCommandResponse, error) {
	if mock.GuestRunCommandFunc == nil {
		panic("MockGuestManagementServiceClient.GuestRunCommandFunc: method is nil but GuestManagementServiceClient.GuestRunCommand was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *runmv1.GuestRunCommandRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGuestRunCommand.Lock()
	mock.calls.GuestRunCommand = append(mock.calls.GuestRunCommand, callInfo)
	mock.lockGuestRunCommand.Unlock()
	return mock.GuestRunCommandFunc(ctx, in, opts...)
}

// GuestRunCommandCalls gets all the calls that were made to GuestRunCommand.
// Check the length with:
//
//	len(mockedGuestManagementServiceClient.GuestRunCommandCalls())
func (mock *MockGuestManagementServiceClient) GuestRunCommandCalls() []struct {
	Ctx  context.Context
	In   *runmv1.GuestRunCommandRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *runmv1.GuestRunCommandRequest
		Opts []grpc.CallOption
	}
	mock.lockGuestRunCommand.RLock()
	calls = mock.calls.GuestRunCommand
	mock.lockGuestRunCommand.RUnlock()
	return calls
}

// GuestTimeSync calls GuestTimeSyncFunc.
func (mock *MockGuestManagementServiceClient) GuestTimeSync(ctx context.Context, in *runmv1.GuestTimeSyncRequest, opts ...grpc.CallOption) (*runmv1.GuestTimeSyncResponse, error) {
	if mock.GuestTimeSyncFunc == nil {
		panic("MockGuestManagementServiceClient.GuestTimeSyncFunc: method is nil but GuestManagementServiceClient.GuestTimeSync was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *runmv1.GuestTimeSyncRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGuestTimeSync.Lock()
	mock.calls.GuestTimeSync = append(mock.calls.GuestTimeSync, callInfo)
	mock.lockGuestTimeSync.Unlock()
	return mock.GuestTimeSyncFunc(ctx, in, opts...)
}

// GuestTimeSyncCalls gets all the calls that were made to GuestTimeSync.
// Check the length with:
//
//	len(mockedGuestManagementServiceClient.GuestTimeSyncCalls())
func (mock *MockGuestManagementServiceClient) GuestTimeSyncCalls() []struct {
	Ctx  context.Context
	In   *runmv1.GuestTimeSyncRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *runmv1.GuestTimeSyncRequest
		Opts []grpc.CallOption
	}
	mock.lockGuestTimeSync.RLock()
	calls = mock.calls.GuestTimeSync
	mock.lockGuestTimeSync.RUnlock()
	return calls
}
