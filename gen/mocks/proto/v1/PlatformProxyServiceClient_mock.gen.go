// Code generated by mockery. DO NOT EDIT.

package mockrunvv1

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	runvv1 "github.com/walteh/runv/proto/v1"
)

// MockPlatformProxyServiceClient is an autogenerated mock type for the PlatformProxyServiceClient type
type MockPlatformProxyServiceClient struct {
	mock.Mock
}

type MockPlatformProxyServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlatformProxyServiceClient) EXPECT() *MockPlatformProxyServiceClient_Expecter {
	return &MockPlatformProxyServiceClient_Expecter{mock: &_m.Mock}
}

// ClosePlatform provides a mock function with given fields: ctx, in, opts
func (_m *MockPlatformProxyServiceClient) ClosePlatform(ctx context.Context, in *runvv1.ClosePlatformRequest, opts ...grpc.CallOption) (*runvv1.ClosePlatformResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClosePlatform")
	}

	var r0 *runvv1.ClosePlatformResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.ClosePlatformRequest, ...grpc.CallOption) (*runvv1.ClosePlatformResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.ClosePlatformRequest, ...grpc.CallOption) *runvv1.ClosePlatformResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.ClosePlatformResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.ClosePlatformRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlatformProxyServiceClient_ClosePlatform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClosePlatform'
type MockPlatformProxyServiceClient_ClosePlatform_Call struct {
	*mock.Call
}

// ClosePlatform is a helper method to define mock.On call
//   - ctx context.Context
//   - in *runvv1.ClosePlatformRequest
//   - opts ...grpc.CallOption
func (_e *MockPlatformProxyServiceClient_Expecter) ClosePlatform(ctx interface{}, in interface{}, opts ...interface{}) *MockPlatformProxyServiceClient_ClosePlatform_Call {
	return &MockPlatformProxyServiceClient_ClosePlatform_Call{Call: _e.mock.On("ClosePlatform",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockPlatformProxyServiceClient_ClosePlatform_Call) Run(run func(ctx context.Context, in *runvv1.ClosePlatformRequest, opts ...grpc.CallOption)) *MockPlatformProxyServiceClient_ClosePlatform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*runvv1.ClosePlatformRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockPlatformProxyServiceClient_ClosePlatform_Call) Return(_a0 *runvv1.ClosePlatformResponse, _a1 error) *MockPlatformProxyServiceClient_ClosePlatform_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlatformProxyServiceClient_ClosePlatform_Call) RunAndReturn(run func(context.Context, *runvv1.ClosePlatformRequest, ...grpc.CallOption) (*runvv1.ClosePlatformResponse, error)) *MockPlatformProxyServiceClient_ClosePlatform_Call {
	_c.Call.Return(run)
	return _c
}

// CopyConsole provides a mock function with given fields: ctx, in, opts
func (_m *MockPlatformProxyServiceClient) CopyConsole(ctx context.Context, in *runvv1.CopyConsoleRequest, opts ...grpc.CallOption) (*runvv1.CopyConsoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyConsole")
	}

	var r0 *runvv1.CopyConsoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.CopyConsoleRequest, ...grpc.CallOption) (*runvv1.CopyConsoleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.CopyConsoleRequest, ...grpc.CallOption) *runvv1.CopyConsoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.CopyConsoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.CopyConsoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlatformProxyServiceClient_CopyConsole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyConsole'
type MockPlatformProxyServiceClient_CopyConsole_Call struct {
	*mock.Call
}

// CopyConsole is a helper method to define mock.On call
//   - ctx context.Context
//   - in *runvv1.CopyConsoleRequest
//   - opts ...grpc.CallOption
func (_e *MockPlatformProxyServiceClient_Expecter) CopyConsole(ctx interface{}, in interface{}, opts ...interface{}) *MockPlatformProxyServiceClient_CopyConsole_Call {
	return &MockPlatformProxyServiceClient_CopyConsole_Call{Call: _e.mock.On("CopyConsole",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockPlatformProxyServiceClient_CopyConsole_Call) Run(run func(ctx context.Context, in *runvv1.CopyConsoleRequest, opts ...grpc.CallOption)) *MockPlatformProxyServiceClient_CopyConsole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*runvv1.CopyConsoleRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockPlatformProxyServiceClient_CopyConsole_Call) Return(_a0 *runvv1.CopyConsoleResponse, _a1 error) *MockPlatformProxyServiceClient_CopyConsole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlatformProxyServiceClient_CopyConsole_Call) RunAndReturn(run func(context.Context, *runvv1.CopyConsoleRequest, ...grpc.CallOption) (*runvv1.CopyConsoleResponse, error)) *MockPlatformProxyServiceClient_CopyConsole_Call {
	_c.Call.Return(run)
	return _c
}

// ShutdownConsole provides a mock function with given fields: ctx, in, opts
func (_m *MockPlatformProxyServiceClient) ShutdownConsole(ctx context.Context, in *runvv1.ShutdownConsoleRequest, opts ...grpc.CallOption) (*runvv1.ShutdownConsoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ShutdownConsole")
	}

	var r0 *runvv1.ShutdownConsoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.ShutdownConsoleRequest, ...grpc.CallOption) (*runvv1.ShutdownConsoleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.ShutdownConsoleRequest, ...grpc.CallOption) *runvv1.ShutdownConsoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.ShutdownConsoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.ShutdownConsoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlatformProxyServiceClient_ShutdownConsole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutdownConsole'
type MockPlatformProxyServiceClient_ShutdownConsole_Call struct {
	*mock.Call
}

// ShutdownConsole is a helper method to define mock.On call
//   - ctx context.Context
//   - in *runvv1.ShutdownConsoleRequest
//   - opts ...grpc.CallOption
func (_e *MockPlatformProxyServiceClient_Expecter) ShutdownConsole(ctx interface{}, in interface{}, opts ...interface{}) *MockPlatformProxyServiceClient_ShutdownConsole_Call {
	return &MockPlatformProxyServiceClient_ShutdownConsole_Call{Call: _e.mock.On("ShutdownConsole",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockPlatformProxyServiceClient_ShutdownConsole_Call) Run(run func(ctx context.Context, in *runvv1.ShutdownConsoleRequest, opts ...grpc.CallOption)) *MockPlatformProxyServiceClient_ShutdownConsole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*runvv1.ShutdownConsoleRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockPlatformProxyServiceClient_ShutdownConsole_Call) Return(_a0 *runvv1.ShutdownConsoleResponse, _a1 error) *MockPlatformProxyServiceClient_ShutdownConsole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlatformProxyServiceClient_ShutdownConsole_Call) RunAndReturn(run func(context.Context, *runvv1.ShutdownConsoleRequest, ...grpc.CallOption) (*runvv1.ShutdownConsoleResponse, error)) *MockPlatformProxyServiceClient_ShutdownConsole_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPlatformProxyServiceClient creates a new instance of MockPlatformProxyServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlatformProxyServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlatformProxyServiceClient {
	mock := &MockPlatformProxyServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
