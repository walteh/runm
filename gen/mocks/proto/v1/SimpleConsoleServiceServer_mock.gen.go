// Code generated by mockery. DO NOT EDIT.

package mockrunvv1

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	runvv1 "github.com/walteh/runv/proto/v1"
)

// MockSimpleConsoleServiceServer is an autogenerated mock type for the SimpleConsoleServiceServer type
type MockSimpleConsoleServiceServer struct {
	mock.Mock
}

type MockSimpleConsoleServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSimpleConsoleServiceServer) EXPECT() *MockSimpleConsoleServiceServer_Expecter {
	return &MockSimpleConsoleServiceServer_Expecter{mock: &_m.Mock}
}

// ClosePlatform provides a mock function with given fields: _a0, _a1
func (_m *MockSimpleConsoleServiceServer) ClosePlatform(_a0 context.Context, _a1 *runvv1.SimpleClosePlatformRequest) (*runvv1.SimpleClosePlatformResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ClosePlatform")
	}

	var r0 *runvv1.SimpleClosePlatformResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.SimpleClosePlatformRequest) (*runvv1.SimpleClosePlatformResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.SimpleClosePlatformRequest) *runvv1.SimpleClosePlatformResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.SimpleClosePlatformResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.SimpleClosePlatformRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSimpleConsoleServiceServer_ClosePlatform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClosePlatform'
type MockSimpleConsoleServiceServer_ClosePlatform_Call struct {
	*mock.Call
}

// ClosePlatform is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *runvv1.SimpleClosePlatformRequest
func (_e *MockSimpleConsoleServiceServer_Expecter) ClosePlatform(_a0 interface{}, _a1 interface{}) *MockSimpleConsoleServiceServer_ClosePlatform_Call {
	return &MockSimpleConsoleServiceServer_ClosePlatform_Call{Call: _e.mock.On("ClosePlatform", _a0, _a1)}
}

func (_c *MockSimpleConsoleServiceServer_ClosePlatform_Call) Run(run func(_a0 context.Context, _a1 *runvv1.SimpleClosePlatformRequest)) *MockSimpleConsoleServiceServer_ClosePlatform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*runvv1.SimpleClosePlatformRequest))
	})
	return _c
}

func (_c *MockSimpleConsoleServiceServer_ClosePlatform_Call) Return(_a0 *runvv1.SimpleClosePlatformResponse, _a1 error) *MockSimpleConsoleServiceServer_ClosePlatform_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSimpleConsoleServiceServer_ClosePlatform_Call) RunAndReturn(run func(context.Context, *runvv1.SimpleClosePlatformRequest) (*runvv1.SimpleClosePlatformResponse, error)) *MockSimpleConsoleServiceServer_ClosePlatform_Call {
	_c.Call.Return(run)
	return _c
}

// CopyConsole provides a mock function with given fields: _a0, _a1
func (_m *MockSimpleConsoleServiceServer) CopyConsole(_a0 context.Context, _a1 *runvv1.SimpleCopyConsoleRequest) (*runvv1.SimpleCopyConsoleResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CopyConsole")
	}

	var r0 *runvv1.SimpleCopyConsoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.SimpleCopyConsoleRequest) (*runvv1.SimpleCopyConsoleResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.SimpleCopyConsoleRequest) *runvv1.SimpleCopyConsoleResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.SimpleCopyConsoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.SimpleCopyConsoleRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSimpleConsoleServiceServer_CopyConsole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyConsole'
type MockSimpleConsoleServiceServer_CopyConsole_Call struct {
	*mock.Call
}

// CopyConsole is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *runvv1.SimpleCopyConsoleRequest
func (_e *MockSimpleConsoleServiceServer_Expecter) CopyConsole(_a0 interface{}, _a1 interface{}) *MockSimpleConsoleServiceServer_CopyConsole_Call {
	return &MockSimpleConsoleServiceServer_CopyConsole_Call{Call: _e.mock.On("CopyConsole", _a0, _a1)}
}

func (_c *MockSimpleConsoleServiceServer_CopyConsole_Call) Run(run func(_a0 context.Context, _a1 *runvv1.SimpleCopyConsoleRequest)) *MockSimpleConsoleServiceServer_CopyConsole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*runvv1.SimpleCopyConsoleRequest))
	})
	return _c
}

func (_c *MockSimpleConsoleServiceServer_CopyConsole_Call) Return(_a0 *runvv1.SimpleCopyConsoleResponse, _a1 error) *MockSimpleConsoleServiceServer_CopyConsole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSimpleConsoleServiceServer_CopyConsole_Call) RunAndReturn(run func(context.Context, *runvv1.SimpleCopyConsoleRequest) (*runvv1.SimpleCopyConsoleResponse, error)) *MockSimpleConsoleServiceServer_CopyConsole_Call {
	_c.Call.Return(run)
	return _c
}

// ShutdownConsole provides a mock function with given fields: _a0, _a1
func (_m *MockSimpleConsoleServiceServer) ShutdownConsole(_a0 context.Context, _a1 *runvv1.SimpleShutdownConsoleRequest) (*runvv1.SimpleShutdownConsoleResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ShutdownConsole")
	}

	var r0 *runvv1.SimpleShutdownConsoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.SimpleShutdownConsoleRequest) (*runvv1.SimpleShutdownConsoleResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runvv1.SimpleShutdownConsoleRequest) *runvv1.SimpleShutdownConsoleResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runvv1.SimpleShutdownConsoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runvv1.SimpleShutdownConsoleRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSimpleConsoleServiceServer_ShutdownConsole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutdownConsole'
type MockSimpleConsoleServiceServer_ShutdownConsole_Call struct {
	*mock.Call
}

// ShutdownConsole is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *runvv1.SimpleShutdownConsoleRequest
func (_e *MockSimpleConsoleServiceServer_Expecter) ShutdownConsole(_a0 interface{}, _a1 interface{}) *MockSimpleConsoleServiceServer_ShutdownConsole_Call {
	return &MockSimpleConsoleServiceServer_ShutdownConsole_Call{Call: _e.mock.On("ShutdownConsole", _a0, _a1)}
}

func (_c *MockSimpleConsoleServiceServer_ShutdownConsole_Call) Run(run func(_a0 context.Context, _a1 *runvv1.SimpleShutdownConsoleRequest)) *MockSimpleConsoleServiceServer_ShutdownConsole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*runvv1.SimpleShutdownConsoleRequest))
	})
	return _c
}

func (_c *MockSimpleConsoleServiceServer_ShutdownConsole_Call) Return(_a0 *runvv1.SimpleShutdownConsoleResponse, _a1 error) *MockSimpleConsoleServiceServer_ShutdownConsole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSimpleConsoleServiceServer_ShutdownConsole_Call) RunAndReturn(run func(context.Context, *runvv1.SimpleShutdownConsoleRequest) (*runvv1.SimpleShutdownConsoleResponse, error)) *MockSimpleConsoleServiceServer_ShutdownConsole_Call {
	_c.Call.Return(run)
	return _c
}

// StreamConsole provides a mock function with given fields: _a0
func (_m *MockSimpleConsoleServiceServer) StreamConsole(_a0 grpc.BidiStreamingServer[runvv1.ConsoleChunk, runvv1.ConsoleChunk]) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for StreamConsole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(grpc.BidiStreamingServer[runvv1.ConsoleChunk, runvv1.ConsoleChunk]) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSimpleConsoleServiceServer_StreamConsole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamConsole'
type MockSimpleConsoleServiceServer_StreamConsole_Call struct {
	*mock.Call
}

// StreamConsole is a helper method to define mock.On call
//   - _a0 grpc.BidiStreamingServer[runvv1.ConsoleChunk,runvv1.ConsoleChunk]
func (_e *MockSimpleConsoleServiceServer_Expecter) StreamConsole(_a0 interface{}) *MockSimpleConsoleServiceServer_StreamConsole_Call {
	return &MockSimpleConsoleServiceServer_StreamConsole_Call{Call: _e.mock.On("StreamConsole", _a0)}
}

func (_c *MockSimpleConsoleServiceServer_StreamConsole_Call) Run(run func(_a0 grpc.BidiStreamingServer[runvv1.ConsoleChunk, runvv1.ConsoleChunk])) *MockSimpleConsoleServiceServer_StreamConsole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(grpc.BidiStreamingServer[runvv1.ConsoleChunk, runvv1.ConsoleChunk]))
	})
	return _c
}

func (_c *MockSimpleConsoleServiceServer_StreamConsole_Call) Return(_a0 error) *MockSimpleConsoleServiceServer_StreamConsole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSimpleConsoleServiceServer_StreamConsole_Call) RunAndReturn(run func(grpc.BidiStreamingServer[runvv1.ConsoleChunk, runvv1.ConsoleChunk]) error) *MockSimpleConsoleServiceServer_StreamConsole_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedSimpleConsoleServiceServer provides a mock function with no fields
func (_m *MockSimpleConsoleServiceServer) mustEmbedUnimplementedSimpleConsoleServiceServer() {
	_m.Called()
}

// MockSimpleConsoleServiceServer_mustEmbedUnimplementedSimpleConsoleServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedSimpleConsoleServiceServer'
type MockSimpleConsoleServiceServer_mustEmbedUnimplementedSimpleConsoleServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedSimpleConsoleServiceServer is a helper method to define mock.On call
func (_e *MockSimpleConsoleServiceServer_Expecter) mustEmbedUnimplementedSimpleConsoleServiceServer() *MockSimpleConsoleServiceServer_mustEmbedUnimplementedSimpleConsoleServiceServer_Call {
	return &MockSimpleConsoleServiceServer_mustEmbedUnimplementedSimpleConsoleServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedSimpleConsoleServiceServer")}
}

func (_c *MockSimpleConsoleServiceServer_mustEmbedUnimplementedSimpleConsoleServiceServer_Call) Run(run func()) *MockSimpleConsoleServiceServer_mustEmbedUnimplementedSimpleConsoleServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSimpleConsoleServiceServer_mustEmbedUnimplementedSimpleConsoleServiceServer_Call) Return() *MockSimpleConsoleServiceServer_mustEmbedUnimplementedSimpleConsoleServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSimpleConsoleServiceServer_mustEmbedUnimplementedSimpleConsoleServiceServer_Call) RunAndReturn(run func()) *MockSimpleConsoleServiceServer_mustEmbedUnimplementedSimpleConsoleServiceServer_Call {
	_c.Run(run)
	return _c
}

// NewMockSimpleConsoleServiceServer creates a new instance of MockSimpleConsoleServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSimpleConsoleServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSimpleConsoleServiceServer {
	mock := &MockSimpleConsoleServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
