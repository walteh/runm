// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mockrunmv1

import (
	"context"
	"sync"

	"github.com/walteh/runm/proto/v1"
	"google.golang.org/grpc"
)

// Ensure that MockHostServiceClient does implement runmv1.HostServiceClient.
// If this is not the case, regenerate this file with mockery.
var _ runmv1.HostServiceClient = &MockHostServiceClient{}

// MockHostServiceClient is a mock implementation of runmv1.HostServiceClient.
//
//	func TestSomethingThatUsesHostServiceClient(t *testing.T) {
//
//		// make and configure a mocked runmv1.HostServiceClient
//		mockedHostServiceClient := &MockHostServiceClient{
//			ForkExecProxyFunc: func(ctx context.Context, in *runmv1.ForkExecProxyRequest, opts ...grpc.CallOption) (*runmv1.ForkExecProxyResponse, error) {
//				panic("mock out the ForkExecProxy method")
//			},
//		}
//
//		// use mockedHostServiceClient in code that requires runmv1.HostServiceClient
//		// and then make assertions.
//
//	}
type MockHostServiceClient struct {
	// ForkExecProxyFunc mocks the ForkExecProxy method.
	ForkExecProxyFunc func(ctx context.Context, in *runmv1.ForkExecProxyRequest, opts ...grpc.CallOption) (*runmv1.ForkExecProxyResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// ForkExecProxy holds details about calls to the ForkExecProxy method.
		ForkExecProxy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *runmv1.ForkExecProxyRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockForkExecProxy sync.RWMutex
}

// ForkExecProxy calls ForkExecProxyFunc.
func (mock *MockHostServiceClient) ForkExecProxy(ctx context.Context, in *runmv1.ForkExecProxyRequest, opts ...grpc.CallOption) (*runmv1.ForkExecProxyResponse, error) {
	if mock.ForkExecProxyFunc == nil {
		panic("MockHostServiceClient.ForkExecProxyFunc: method is nil but HostServiceClient.ForkExecProxy was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *runmv1.ForkExecProxyRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockForkExecProxy.Lock()
	mock.calls.ForkExecProxy = append(mock.calls.ForkExecProxy, callInfo)
	mock.lockForkExecProxy.Unlock()
	return mock.ForkExecProxyFunc(ctx, in, opts...)
}

// ForkExecProxyCalls gets all the calls that were made to ForkExecProxy.
// Check the length with:
//
//	len(mockedHostServiceClient.ForkExecProxyCalls())
func (mock *MockHostServiceClient) ForkExecProxyCalls() []struct {
	Ctx  context.Context
	In   *runmv1.ForkExecProxyRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *runmv1.ForkExecProxyRequest
		Opts []grpc.CallOption
	}
	mock.lockForkExecProxy.RLock()
	calls = mock.calls.ForkExecProxy
	mock.lockForkExecProxy.RUnlock()
	return calls
}
