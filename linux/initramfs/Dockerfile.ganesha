########################################################
# args
########################################################

ARG BUSYBOX_VERSION=1.36.1
ARG GO_VERSION=1.25rc1
ARG ALPINE_VERSION=3.22
ARG ALPINE_BUSYBOX_VERSION=3.21
ARG DEBIAN_CODENAME=bookworm
ARG SOCAT_VERSION=1.8.0.3
ARG TZDATA_VERSION=2025b
ARG GANESHA_VERSION=V6.5

FROM alpine:${ALPINE_VERSION} AS alpine-ref
FROM alpine:${ALPINE_BUSYBOX_VERSION} AS alpine-busybox-ref
FROM debian:${DEBIAN_CODENAME}-slim AS debian-ref
FROM golang:${GO_VERSION}-alpine${ALPINE_VERSION} AS alpine-golang-ref
FROM golang:${GO_VERSION}-${DEBIAN_CODENAME} AS debian-golang-ref

########################################################
# debian-based builder
########################################################

FROM debian-ref AS debian-base

ENV DEBIAN_FRONTEND=noninteractive \
	DEBCONF_NONINTERACTIVE_SEEN=true \
	LC_ALL=C.UTF-8 \
	LANG=C.UTF-8

RUN apt-get update \
	&& apt-get install -y \
		build-essential \
		autoconf \
		libtool \
		git \
		bison \
		flex \
		wget \
	&& rm -rf /var/lib/apt/lists/*

########################################################
# ganesha base
########################################################

FROM alpine-ref AS ganesha-base

RUN apk add --no-cache git

ARG GANESHA_VERSION

RUN git clone --depth 1 --branch ${GANESHA_VERSION} https://github.com/nfs-ganesha/nfs-ganesha.git /git-repo

WORKDIR /git-repo

RUN git submodule update --init --recursive
	

########################################################
# ganesha alpine static (attempt 1)
########################################################

FROM alpine-ref AS ganesha-static-builder-alpine

RUN apk add --no-cache \
    git build-base cmake ninja bison flex \
    libtirpc-dev userspace-rcu-dev userspace-rcu-static \
    libcap-dev libcap-static \
    e2fsprogs-dev zlib-dev openssl-dev linux-headers \
    libnsl libnsl-dev libnsl-static zlib-static openssl-libs-static \
	acl acl-dev acl-static

RUN apk add --no-cache \
    libtirpc libtirpc-dev libtirpc-static

COPY --from=ganesha-base /git-repo /git-repo

RUN mkdir /build && cd /build && \
    cmake /git-repo/src -G Ninja \
	-DCMAKE_BUILD_TYPE=Release \
	-DUSE_FSAL_VFS=ON \
	-DUSE_GSS=OFF -DUSE_DBUS=OFF \
	-DCMAKE_EXE_LINKER_FLAGS="-static -no-pie" \
	-DCMAKE_C_FLAGS="-O2" -DCMAKE_CXX_FLAGS="-O2" && \
    ninja ganesha.nfsd

RUN strip /build/ganesha.nfsd

FROM scratch AS ganesha-static-alpine-export
COPY --from=ganesha-static-builder-alpine /build/ganesha.nfsd /bin/ganesha.nfsd

########################################################
# ganesha debian static (attempt 2)
########################################################

FROM debian-ref AS ganesha-static-builder-debian

# Base tooling + certs (needed for git clone TLS)
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates git build-essential cmake ninja-build bison flex \
    libtirpc-dev liburcu-dev libnsl-dev libcap-dev libacl1-dev \
    zlib1g-dev libssl-dev e2fsprogs pkg-config && \
    update-ca-certificates && rm -rf /var/lib/apt/lists/*

COPY --from=ganesha-base /git-repo /git-repo

RUN mkdir /build && cd /build && \
    cmake /git-repo/src -G Ninja \
      -DCMAKE_BUILD_TYPE=Release \
      -DUSE_FSAL_VFS=ON \
      -DUSE_GSS=OFF -DUSE_DBUS=OFF \
      -DCMAKE_EXE_LINKER_FLAGS="-static"

RUN cd /build && ninja ganesha.nfsd
RUN strip /build/ganesha.nfsd

FROM scratch AS ganesha-static-debian-export
COPY --from=ganesha-static-builder-debian /build/ganesha.nfsd /bin/ganesha.nfsd


########################################################
# ganesha debian static (attempt 2.1)
########################################################

FROM debian-ref AS ganesha-static-debian-v2

RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates git build-essential cmake ninja-build bison flex \
    libtirpc-dev liburcu-dev libnsl-dev libcap-dev libacl1-dev \
    zlib1g-dev libssl-dev e2fsprogs pkg-config \
    # Add static libraries
    libc6-dev libgcc-s1 libtirpc3 liburcu8 libnsl2 libcap2 libacl1 && \
    rm -rf /var/lib/apt/lists/*

COPY --from=ganesha-base /git-repo /git-repo

RUN mkdir /build
WORKDIR /build

# Try aggressive static linking
RUN cmake /git-repo/src -G Ninja \
      -DCMAKE_BUILD_TYPE=Release \
      -DUSE_FSAL_VFS=ON \
      -DUSE_GSS=OFF -DUSE_DBUS=OFF -DUSE_MONITORING=OFF \
      -DCMAKE_EXE_LINKER_FLAGS="-static -Wl,--whole-archive -lpthread -Wl,--no-whole-archive" \
      -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" \
      -DBUILD_SHARED_LIBS=OFF && \
    ninja ganesha.nfsd

RUN ldd ganesha.nfsd || echo "Static binary!"

FROM scratch AS ganesha-static-debian-v2-export
COPY --from=ganesha-static-debian-v2 /build/ganesha.nfsd /bin/ganesha.nfsd

########################################################
# ganesha debian dynamic (attempt 3)
########################################################

FROM debian-ref AS ganesha-dynamic-builder

# Build deps (includes static + shared dev libs)
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates git build-essential cmake ninja-build bison flex \
    libtirpc-dev liburcu-dev libnsl-dev libcap-dev libacl1-dev \
    zlib1g-dev libssl-dev e2fsprogs pkg-config python3 && \
    rm -rf /var/lib/apt/lists/*

COPY --from=ganesha-base /git-repo /git-repo

RUN mkdir /build && cd /build && \
    cmake /git-repo/src -G Ninja \
      -DCMAKE_BUILD_TYPE=Release \
      -DUSE_FSAL_VFS=ON \
      -DUSE_GSS=OFF -DUSE_DBUS=OFF
	
RUN cd /build && ninja ganesha.nfsd 

RUN strip /build/ganesha.nfsd

# "Install" into a staging prefix for easier collection
RUN DESTDIR=/staging ninja install	

# -------- Collector stage --------
FROM debian-ref AS ganesha-dynamic-builder-collector

# We only need ldd/coreutils to gather dependencies at build time
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates libtirpc3 liburcu8 libnsl2 libcap2 libacl1 && \
    rm -rf /var/lib/apt/lists/*

# Copy installed tree from builder
COPY --from=ganesha-dynamic-builder /staging/ /

# Create /everything and copy minimal config + required libs/binaries.
# We detect runtime .so deps via ldd on ganesha.nfsd and libfsalvfs.so.
RUN bash <<'SCRIPT'
set -euo pipefail
mkdir -p /everything/bin /everything/lib /everything/etc/ganesha
cat > /everything/etc/ganesha/ganesha.conf <<'EOF'
NFS_Core_Param { NFS_Protocols = 4; }
EXPORT {
  Export_Id = 1;
  Path = /export;
  Pseudo = /export;
  Access_Type = RW;
  Protocols = 4;
  Squash = No_Root_Squash;
  FSAL { Name = VFS; }
}
EOF
cp /usr/bin/ganesha.nfsd /everything/bin/
cp /usr/lib/libganesha_nfsd.so* /everything/lib/
cp /usr/lib/ganesha/libfsalvfs.so* /everything/lib/
for f in /usr/local/bin/ganesha.nfsd /usr/local/lib/libganesha_nfsd.so* /usr/local/lib/ganesha/libfsalvfs.so*; do
  ldd "$f" | awk '/=>/ {print $3} /^[^\t]/ && /\/lib/ {print $1}' | grep -v '^(' || true
done | sort -u | while read -r lib; do
  [ -f "$lib" ] && cp -v --parents "$lib" /everything/
done
SCRIPT
    # Flatten libs into /everything/lib
RUN find /everything/lib -type f -name "*.so*" -exec cp -n {} /everything/lib \; || true

RUN ls -lahrs /everything

FROM scratch AS ganesha-export
COPY --from=ganesha-dynamic-builder-collector /everything /

########################################################
# ganesha debian static (attempt 4)
########################################################

FROM debian-ref AS ganesha-staticx-builder

# Build your working dynamic NFS-Ganesha (your Attempt 3)
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates git build-essential cmake ninja-build bison flex \
    libtirpc-dev liburcu-dev libnsl-dev libcap-dev libacl1-dev \
    zlib1g-dev libssl-dev e2fsprogs patchelf zstd \
	pkg-config python3 python3-pip python3-venv python3-dev scons && \
    rm -rf /var/lib/apt/lists/*

COPY --from=ganesha-base /git-repo /git-repo

# Build dynamic binary with FSAL libraries
RUN mkdir /build && cd /build && \
    cmake /git-repo/src -G Ninja \
      -DCMAKE_BUILD_TYPE=Release \
      -DUSE_FSAL_VFS=ON \
      -DUSE_GSS=OFF -DUSE_DBUS=OFF -DUSE_MONITORING=OFF && \
    ninja ganesha.nfsd && \
    ninja install 

RUN mkdir /output
WORKDIR /output

# Install StaticX
# create a virtual environment
RUN python3 -m venv /output/venv
# activate the virtual environment
RUN . /output/venv/bin/activate
# install staticx
RUN /output/venv/bin/pip install wheel
RUN /output/venv/bin/pip install staticx
# Bundle everything into single static-like executable including FSAL libraries
# The files are installed to /usr/lib/ganesha/ and /usr/bin/, not /usr/local/
RUN /output/venv/bin/staticx \
    -l /usr/lib/ganesha/libfsalvfs.so \
    -l /usr/lib/libganesha_nfsd.so.6.5 \
    /usr/bin/ganesha.nfsd /ganesha-static

RUN /output/venv/bin/sx-extract /ganesha-static /ganesha-static-extracted

RUN ls -lahrs /ganesha-static-extracted

# copy the two libs to a dir to tar them into a single file
RUN mkdir -p /ganesha-plugins
RUN cp /usr/lib/ganesha/libfsalvfs.so /ganesha-plugins/
RUN cp /usr/lib/libganesha_nfsd.so.6.5 /ganesha-plugins/
RUN cd /ganesha-plugins && tar -czvf /ganesha-plugins.tar.gz .

FROM scratch AS ganesha-staticx-export
COPY --from=ganesha-staticx-builder /ganesha-static /ganesha
COPY --from=ganesha-staticx-builder /ganesha-plugins.tar.gz /ganesha-plugins.tar.gz