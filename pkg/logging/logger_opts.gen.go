// Code generated by options-gen v0.52.1. DO NOT EDIT.

package logging

import (
	"io"
	"log/slog"
)

type LoggerOpt func(o *LoggerOpts)

func newLoggerOpts(
	options ...LoggerOpt,
) LoggerOpts {
	var o LoggerOpts

	// Setting defaults from field tag (if present)

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func WithHandlerOptions(opt *slog.HandlerOptions) LoggerOpt {
	return func(o *LoggerOpts) { o.handlerOptions = opt }
}

func WithFallbackWriter(opt io.Writer) LoggerOpt {
	return func(o *LoggerOpts) { o.fallbackWriter = opt }
}

func WithProcessName(opt string) LoggerOpt {
	return func(o *LoggerOpts) { o.processName = opt }
}

func WithReplacers(opt ...SlogReplacer) LoggerOpt {
	return func(o *LoggerOpts) { o.replacers = append(o.replacers, opt...) }
}

func WithHandlers(opt ...slog.Handler) LoggerOpt {
	return func(o *LoggerOpts) { o.handlers = append(o.handlers, opt...) }
}

func WithMakeDefaultLogger(opt bool) LoggerOpt {
	return func(o *LoggerOpts) { o.makeDefaultLogger = opt }
}

func WithInterceptLogrus(opt bool) LoggerOpt {
	return func(o *LoggerOpts) { o.interceptLogrus = opt }
}

func WithRawWriter(opt io.Writer) LoggerOpt {
	return func(o *LoggerOpts) { o.rawWriter = opt }
}

func WithEnableDelimiter(opt bool) LoggerOpt {
	return func(o *LoggerOpts) { o.enableDelimiter = opt }
}

func WithDelimiter(opt rune) LoggerOpt {
	return func(o *LoggerOpts) { o.delimiter = opt }
}

func WithInterceptHclog(opt bool) LoggerOpt {
	return func(o *LoggerOpts) { o.interceptHclog = opt }
}

func WithValues(opt ...slog.Attr) LoggerOpt {
	return func(o *LoggerOpts) { o.values = append(o.values, opt...) }
}

func WithGlobalLogWriter(opt io.Writer) LoggerOpt {
	return func(o *LoggerOpts) { o.globalLogWriter = opt }
}

func (o *LoggerOpts) Validate() error {
	return nil
}

// Public getter methods for private fields

func (o LoggerOpts) HandlerOptions() *slog.HandlerOptions { return o.handlerOptions }

func (o LoggerOpts) FallbackWriter() io.Writer { return o.fallbackWriter }

func (o LoggerOpts) ProcessName() string { return o.processName }

func (o LoggerOpts) Replacers() []SlogReplacer { return o.replacers }

func (o LoggerOpts) Handlers() []slog.Handler { return o.handlers }

func (o LoggerOpts) MakeDefaultLogger() bool { return o.makeDefaultLogger }

func (o LoggerOpts) InterceptLogrus() bool { return o.interceptLogrus }

func (o LoggerOpts) RawWriter() io.Writer { return o.rawWriter }

func (o LoggerOpts) EnableDelimiter() bool { return o.enableDelimiter }

func (o LoggerOpts) Delimiter() rune { return o.delimiter }

func (o LoggerOpts) InterceptHclog() bool { return o.interceptHclog }

func (o LoggerOpts) Values() []slog.Attr { return o.values }

func (o LoggerOpts) GlobalLogWriter() io.Writer { return o.globalLogWriter }
