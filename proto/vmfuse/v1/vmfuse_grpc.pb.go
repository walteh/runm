// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: vmfuse/v1/vmfuse.proto

package vmfusev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VmfuseService_Mount_FullMethodName   = "/github.com.walteh.runm.proto.vmfuse.v1.VmfuseService/Mount"
	VmfuseService_Unmount_FullMethodName = "/github.com.walteh.runm.proto.vmfuse.v1.VmfuseService/Unmount"
	VmfuseService_List_FullMethodName    = "/github.com.walteh.runm.proto.vmfuse.v1.VmfuseService/List"
	VmfuseService_Status_FullMethodName  = "/github.com.walteh.runm.proto.vmfuse.v1.VmfuseService/Status"
)

// VmfuseServiceClient is the client API for VmfuseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VmfuseServiceClient interface {
	// Mount creates a VM with the specified mount configuration and mounts it to the target
	Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountResponse, error)
	// Unmount stops the VM and unmounts the target
	Unmount(ctx context.Context, in *UnmountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List returns all active mounts managed by vmfused
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	// Status returns the status of a specific mount
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type vmfuseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVmfuseServiceClient(cc grpc.ClientConnInterface) VmfuseServiceClient {
	return &vmfuseServiceClient{cc}
}

func (c *vmfuseServiceClient) Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountResponse)
	err := c.cc.Invoke(ctx, VmfuseService_Mount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmfuseServiceClient) Unmount(ctx context.Context, in *UnmountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VmfuseService_Unmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmfuseServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, VmfuseService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmfuseServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, VmfuseService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VmfuseServiceServer is the server API for VmfuseService service.
// All implementations should embed UnimplementedVmfuseServiceServer
// for forward compatibility.
type VmfuseServiceServer interface {
	// Mount creates a VM with the specified mount configuration and mounts it to the target
	Mount(context.Context, *MountRequest) (*MountResponse, error)
	// Unmount stops the VM and unmounts the target
	Unmount(context.Context, *UnmountRequest) (*emptypb.Empty, error)
	// List returns all active mounts managed by vmfused
	List(context.Context, *emptypb.Empty) (*ListResponse, error)
	// Status returns the status of a specific mount
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

// UnimplementedVmfuseServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVmfuseServiceServer struct{}

func (UnimplementedVmfuseServiceServer) Mount(context.Context, *MountRequest) (*MountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mount not implemented")
}
func (UnimplementedVmfuseServiceServer) Unmount(context.Context, *UnmountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unmount not implemented")
}
func (UnimplementedVmfuseServiceServer) List(context.Context, *emptypb.Empty) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedVmfuseServiceServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedVmfuseServiceServer) testEmbeddedByValue() {}

// UnsafeVmfuseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VmfuseServiceServer will
// result in compilation errors.
type UnsafeVmfuseServiceServer interface {
	mustEmbedUnimplementedVmfuseServiceServer()
}

func RegisterVmfuseServiceServer(s grpc.ServiceRegistrar, srv VmfuseServiceServer) {
	// If the following call pancis, it indicates UnimplementedVmfuseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VmfuseService_ServiceDesc, srv)
}

func _VmfuseService_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmfuseServiceServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmfuseService_Mount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmfuseServiceServer).Mount(ctx, req.(*MountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmfuseService_Unmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmfuseServiceServer).Unmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmfuseService_Unmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmfuseServiceServer).Unmount(ctx, req.(*UnmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmfuseService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmfuseServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmfuseService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmfuseServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmfuseService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmfuseServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmfuseService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmfuseServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VmfuseService_ServiceDesc is the grpc.ServiceDesc for VmfuseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VmfuseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.walteh.runm.proto.vmfuse.v1.VmfuseService",
	HandlerType: (*VmfuseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mount",
			Handler:    _VmfuseService_Mount_Handler,
		},
		{
			MethodName: "Unmount",
			Handler:    _VmfuseService_Unmount_Handler,
		},
		{
			MethodName: "List",
			Handler:    _VmfuseService_List_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _VmfuseService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vmfuse/v1/vmfuse.proto",
}
