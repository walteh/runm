// Code generated by protoc-gen-go-slog. DO NOT EDIT.
//
// source: vmfuse/v1/vmfuse.proto

package vmfusev1

import (
	fmt "fmt"
	slog "log/slog"
)

func (x *MountRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 4)
	attrs = append(attrs, slog.String("mount_type", x.GetMountType()))
	if len(x.GetSources()) != 0 {
		attrs1 := make([]slog.Attr, 0, len(x.GetSources()))
		for i, v := range x.GetSources() {
			attrs1 = append(attrs1, slog.String(fmt.Sprintf("%d", i), v))
		}
		attrs = append(attrs, slog.Any("sources", attrs1))
	}
	attrs = append(attrs, slog.String("target", x.GetTarget()))
	if x.GetVmConfig() != nil {
		if v, ok := interface{}(x.GetVmConfig()).(slog.LogValuer); ok {
			attrs = append(attrs, slog.Attr{Key: "vm_config", Value: v.LogValue()})
		} else {
			attrs = append(attrs, slog.Any("vm_config", x.GetVmConfig()))
		}
	}
	return slog.GroupValue(attrs...)
}

func (x *VmConfig) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 3)
	attrs = append(attrs, slog.Uint64("memory_mib", x.GetMemoryMib()))
	attrs = append(attrs, slog.Uint64("cpus", uint64(x.GetCpus())))
	attrs = append(attrs, slog.Uint64("timeout_seconds", uint64(x.GetTimeoutSeconds())))
	return slog.GroupValue(attrs...)
}

func (x *MountResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 4)
	attrs = append(attrs, slog.String("mount_id", x.GetMountId()))
	attrs = append(attrs, slog.String("vm_id", x.GetVmId()))
	attrs = append(attrs, slog.String("target", x.GetTarget()))
	attrs = append(attrs, slog.String("status", x.GetStatus().String()))
	return slog.GroupValue(attrs...)
}

func (x *UnmountRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.String("target", x.GetTarget()))
	return slog.GroupValue(attrs...)
}

func (x *ListResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	if len(x.GetMounts()) != 0 {
		attrs0 := make([]slog.Attr, 0, len(x.GetMounts()))
		for i, v := range x.GetMounts() {
			if v, ok := interface{}(v).(slog.LogValuer); ok {
				attrs0 = append(attrs0, slog.Attr{Key: fmt.Sprintf("%d", i), Value: v.LogValue()})
			} else {
				attrs0 = append(attrs0, slog.Any(fmt.Sprintf("%d", i), v))
			}
		}
		attrs = append(attrs, slog.Any("mounts", attrs0))
	}
	return slog.GroupValue(attrs...)
}

func (x *StatusRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 2)
	// Handle oneof field: Identifier
	switch x.WhichIdentifier() {
	case StatusRequest_MountId_case:
		attrs = append(attrs, slog.String("mount_id", x.GetMountId()))
	case StatusRequest_Target_case:
		attrs = append(attrs, slog.String("target", x.GetTarget()))
	}
	return slog.GroupValue(attrs...)
}

func (x *StatusResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	if x.GetMountInfo() != nil {
		if v, ok := interface{}(x.GetMountInfo()).(slog.LogValuer); ok {
			attrs = append(attrs, slog.Attr{Key: "mount_info", Value: v.LogValue()})
		} else {
			attrs = append(attrs, slog.Any("mount_info", x.GetMountInfo()))
		}
	}
	return slog.GroupValue(attrs...)
}

func (x *MountInfo) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 9)
	attrs = append(attrs, slog.String("mount_id", x.GetMountId()))
	attrs = append(attrs, slog.String("vm_id", x.GetVmId()))
	attrs = append(attrs, slog.String("mount_type", x.GetMountType()))
	if len(x.GetSources()) != 0 {
		attrs3 := make([]slog.Attr, 0, len(x.GetSources()))
		for i, v := range x.GetSources() {
			attrs3 = append(attrs3, slog.String(fmt.Sprintf("%d", i), v))
		}
		attrs = append(attrs, slog.Any("sources", attrs3))
	}
	attrs = append(attrs, slog.String("target", x.GetTarget()))
	attrs = append(attrs, slog.String("status", x.GetStatus().String()))
	attrs = append(attrs, slog.Uint64("nfs_host_port", uint64(x.GetNfsHostPort())))
	attrs = append(attrs, slog.Int64("created_at", x.GetCreatedAt()))
	attrs = append(attrs, slog.String("error_message", x.GetErrorMessage()))
	return slog.GroupValue(attrs...)
}
