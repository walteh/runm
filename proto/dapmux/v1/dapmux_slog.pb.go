// Code generated by protoc-gen-go-slog. DO NOT EDIT.
//
// source: dapmux/v1/dapmux.proto

package dapmuxv1

import (
	fmt "fmt"
	slog "log/slog"
)

func (x *RegisterTargetRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 6)
	attrs = append(attrs, slog.String("process_name", x.GetProcessName()))
	attrs = append(attrs, slog.String("delve_addr", x.GetDelveAddr()))
	attrs = append(attrs, slog.String("location", x.GetLocation()))
	attrs = append(attrs, slog.Int64("process_id", int64(x.GetProcessId())))
	if len(x.GetArgs()) != 0 {
		attrs4 := make([]slog.Attr, 0, len(x.GetArgs()))
		for i, v := range x.GetArgs() {
			attrs4 = append(attrs4, slog.String(fmt.Sprintf("%d", i), v))
		}
		attrs = append(attrs, slog.Any("args", attrs4))
	}
	if len(x.GetMetadata()) != 0 {
		attrs5 := make([]slog.Attr, 0, len(x.GetMetadata()))
		for k, v := range x.GetMetadata() {
			attrs5 = append(attrs5, slog.String(fmt.Sprintf("%v", k), v))
		}
		attrs = append(attrs, slog.Any("metadata", attrs5))
	}
	return slog.GroupValue(attrs...)
}

func (x *RegisterTargetResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 2)
	attrs = append(attrs, slog.String("target_id", x.GetTargetId()))
	if x.GetTarget() != nil {
		if v, ok := interface{}(x.GetTarget()).(slog.LogValuer); ok {
			attrs = append(attrs, slog.Attr{Key: "target", Value: v.LogValue()})
		} else {
			attrs = append(attrs, slog.Any("target", x.GetTarget()))
		}
	}
	return slog.GroupValue(attrs...)
}

func (x *UnregisterTargetRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.String("target_id", x.GetTargetId()))
	return slog.GroupValue(attrs...)
}

func (x *UnregisterTargetResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}

func (x *ListTargetsRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 2)
	if len(x.GetStatusFilter()) != 0 {
		attrs0 := make([]slog.Attr, 0, len(x.GetStatusFilter()))
		for i, v := range x.GetStatusFilter() {
			attrs0 = append(attrs0, slog.String(fmt.Sprintf("%d", i), v.String()))
		}
		attrs = append(attrs, slog.Any("status_filter", attrs0))
	}
	attrs = append(attrs, slog.String("location_filter", x.GetLocationFilter()))
	return slog.GroupValue(attrs...)
}

func (x *ListTargetsResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 2)
	if len(x.GetTargets()) != 0 {
		attrs0 := make([]slog.Attr, 0, len(x.GetTargets()))
		for i, v := range x.GetTargets() {
			if v, ok := interface{}(v).(slog.LogValuer); ok {
				attrs0 = append(attrs0, slog.Attr{Key: fmt.Sprintf("%d", i), Value: v.LogValue()})
			} else {
				attrs0 = append(attrs0, slog.Any(fmt.Sprintf("%d", i), v))
			}
		}
		attrs = append(attrs, slog.Any("targets", attrs0))
	}
	attrs = append(attrs, slog.String("active_target_id", x.GetActiveTargetId()))
	return slog.GroupValue(attrs...)
}

func (x *SetActiveTargetRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.String("target_id", x.GetTargetId()))
	return slog.GroupValue(attrs...)
}

func (x *SetActiveTargetResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	if x.GetTarget() != nil {
		if v, ok := interface{}(x.GetTarget()).(slog.LogValuer); ok {
			attrs = append(attrs, slog.Attr{Key: "target", Value: v.LogValue()})
		} else {
			attrs = append(attrs, slog.Any("target", x.GetTarget()))
		}
	}
	return slog.GroupValue(attrs...)
}

func (x *StreamTargetEventsRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	if len(x.GetEventTypes()) != 0 {
		attrs0 := make([]slog.Attr, 0, len(x.GetEventTypes()))
		for i, v := range x.GetEventTypes() {
			attrs0 = append(attrs0, slog.String(fmt.Sprintf("%d", i), v.String()))
		}
		attrs = append(attrs, slog.Any("event_types", attrs0))
	}
	return slog.GroupValue(attrs...)
}

func (x *ForwardDAPMessageRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 3)
	attrs = append(attrs, slog.String("target_id", x.GetTargetId()))
	attrs = append(attrs, slog.Any("dap_message", x.GetDapMessage()))
	attrs = append(attrs, slog.Int64("sequence_number", x.GetSequenceNumber()))
	return slog.GroupValue(attrs...)
}

func (x *ForwardDAPMessageResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.Any("response_message", x.GetResponseMessage()))
	return slog.GroupValue(attrs...)
}

func (x *Target) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 11)
	attrs = append(attrs, slog.String("id", x.GetId()))
	attrs = append(attrs, slog.String("name", x.GetName()))
	attrs = append(attrs, slog.String("addr", x.GetAddr()))
	attrs = append(attrs, slog.String("process", x.GetProcess()))
	attrs = append(attrs, slog.String("location", x.GetLocation()))
	if x.GetRegisteredAt() != nil {
		if v, ok := interface{}(x.GetRegisteredAt()).(slog.LogValuer); ok {
			attrs = append(attrs, slog.Attr{Key: "registered_at", Value: v.LogValue()})
		} else {
			attrs = append(attrs, slog.Any("registered_at", x.GetRegisteredAt()))
		}
	}
	attrs = append(attrs, slog.String("status", x.GetStatus().String()))
	attrs = append(attrs, slog.Int64("process_id", int64(x.GetProcessId())))
	if len(x.GetArgs()) != 0 {
		attrs8 := make([]slog.Attr, 0, len(x.GetArgs()))
		for i, v := range x.GetArgs() {
			attrs8 = append(attrs8, slog.String(fmt.Sprintf("%d", i), v))
		}
		attrs = append(attrs, slog.Any("args", attrs8))
	}
	if len(x.GetMetadata()) != 0 {
		attrs9 := make([]slog.Attr, 0, len(x.GetMetadata()))
		for k, v := range x.GetMetadata() {
			attrs9 = append(attrs9, slog.String(fmt.Sprintf("%v", k), v))
		}
		attrs = append(attrs, slog.Any("metadata", attrs9))
	}
	if x.GetConnectionInfo() != nil {
		if v, ok := interface{}(x.GetConnectionInfo()).(slog.LogValuer); ok {
			attrs = append(attrs, slog.Attr{Key: "connection_info", Value: v.LogValue()})
		} else {
			attrs = append(attrs, slog.Any("connection_info", x.GetConnectionInfo()))
		}
	}
	return slog.GroupValue(attrs...)
}

func (x *ConnectionInfo) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 8)
	attrs = append(attrs, slog.String("remote_addr", x.GetRemoteAddr()))
	attrs = append(attrs, slog.String("local_addr", x.GetLocalAddr()))
	attrs = append(attrs, slog.String("protocol", x.GetProtocol()))
	if x.GetConnectedAt() != nil {
		if v, ok := interface{}(x.GetConnectedAt()).(slog.LogValuer); ok {
			attrs = append(attrs, slog.Attr{Key: "connected_at", Value: v.LogValue()})
		} else {
			attrs = append(attrs, slog.Any("connected_at", x.GetConnectedAt()))
		}
	}
	attrs = append(attrs, slog.Int64("bytes_sent", x.GetBytesSent()))
	attrs = append(attrs, slog.Int64("bytes_received", x.GetBytesReceived()))
	attrs = append(attrs, slog.Int64("messages_sent", x.GetMessagesSent()))
	attrs = append(attrs, slog.Int64("messages_received", x.GetMessagesReceived()))
	return slog.GroupValue(attrs...)
}

func (x *TargetEvent) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 4)
	attrs = append(attrs, slog.String("type", x.GetType().String()))
	if x.GetTarget() != nil {
		if v, ok := interface{}(x.GetTarget()).(slog.LogValuer); ok {
			attrs = append(attrs, slog.Attr{Key: "target", Value: v.LogValue()})
		} else {
			attrs = append(attrs, slog.Any("target", x.GetTarget()))
		}
	}
	if x.GetTimestamp() != nil {
		if v, ok := interface{}(x.GetTimestamp()).(slog.LogValuer); ok {
			attrs = append(attrs, slog.Attr{Key: "timestamp", Value: v.LogValue()})
		} else {
			attrs = append(attrs, slog.Any("timestamp", x.GetTimestamp()))
		}
	}
	attrs = append(attrs, slog.String("details", x.GetDetails()))
	return slog.GroupValue(attrs...)
}

func (x *HealthCheckRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.String("service", x.GetService()))
	return slog.GroupValue(attrs...)
}

func (x *HealthCheckResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 3)
	attrs = append(attrs, slog.String("status", x.GetStatus().String()))
	attrs = append(attrs, slog.String("message", x.GetMessage()))
	if len(x.GetDetails()) != 0 {
		attrs2 := make([]slog.Attr, 0, len(x.GetDetails()))
		for k, v := range x.GetDetails() {
			attrs2 = append(attrs2, slog.String(fmt.Sprintf("%v", k), v))
		}
		attrs = append(attrs, slog.Any("details", attrs2))
	}
	return slog.GroupValue(attrs...)
}
