// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: dapmux/v1/dapmux.proto
package dapmuxv1

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
)

type TTRPCDAPMuxServiceService interface {
	RegisterTarget(context.Context, *RegisterTargetRequest) (*RegisterTargetResponse, error)
	UnregisterTarget(context.Context, *UnregisterTargetRequest) (*UnregisterTargetResponse, error)
	ListTargets(context.Context, *ListTargetsRequest) (*ListTargetsResponse, error)
	SetActiveTarget(context.Context, *SetActiveTargetRequest) (*SetActiveTargetResponse, error)
	StreamTargetEvents(context.Context, *StreamTargetEventsRequest, TTRPCDAPMuxService_StreamTargetEventsServer) error
	ForwardDAPMessage(context.Context, *ForwardDAPMessageRequest) (*ForwardDAPMessageResponse, error)
}

type TTRPCDAPMuxService_StreamTargetEventsServer interface {
	Send(*TargetEvent) error
	ttrpc.StreamServer
}

type ttrpcdapmuxserviceStreamTargetEventsServer struct {
	ttrpc.StreamServer
}

func (x *ttrpcdapmuxserviceStreamTargetEventsServer) Send(m *TargetEvent) error {
	return x.StreamServer.SendMsg(m)
}

func RegisterTTRPCDAPMuxServiceService(srv *ttrpc.Server, svc TTRPCDAPMuxServiceService) {
	srv.RegisterService("runm.dapmux.v1.DAPMuxService", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"RegisterTarget": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req RegisterTargetRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.RegisterTarget(ctx, &req)
			},
			"UnregisterTarget": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req UnregisterTargetRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.UnregisterTarget(ctx, &req)
			},
			"ListTargets": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ListTargetsRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ListTargets(ctx, &req)
			},
			"SetActiveTarget": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req SetActiveTargetRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.SetActiveTarget(ctx, &req)
			},
			"ForwardDAPMessage": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ForwardDAPMessageRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ForwardDAPMessage(ctx, &req)
			},
		},
		Streams: map[string]ttrpc.Stream{
			"StreamTargetEvents": {
				Handler: func(ctx context.Context, stream ttrpc.StreamServer) (interface{}, error) {
					m := new(StreamTargetEventsRequest)
					if err := stream.RecvMsg(m); err != nil {
						return nil, err
					}
					return nil, svc.StreamTargetEvents(ctx, m, &ttrpcdapmuxserviceStreamTargetEventsServer{stream})
				},
				StreamingClient: false,
				StreamingServer: true,
			},
		},
	})
}

type TTRPCDAPMuxServiceClient interface {
	RegisterTarget(context.Context, *RegisterTargetRequest) (*RegisterTargetResponse, error)
	UnregisterTarget(context.Context, *UnregisterTargetRequest) (*UnregisterTargetResponse, error)
	ListTargets(context.Context, *ListTargetsRequest) (*ListTargetsResponse, error)
	SetActiveTarget(context.Context, *SetActiveTargetRequest) (*SetActiveTargetResponse, error)
	StreamTargetEvents(context.Context, *StreamTargetEventsRequest) (TTRPCDAPMuxService_StreamTargetEventsClient, error)
	ForwardDAPMessage(context.Context, *ForwardDAPMessageRequest) (*ForwardDAPMessageResponse, error)
}

type ttrpcdapmuxserviceClient struct {
	client *ttrpc.Client
}

func NewTTRPCDAPMuxServiceClient(client *ttrpc.Client) TTRPCDAPMuxServiceClient {
	return &ttrpcdapmuxserviceClient{
		client: client,
	}
}

func (c *ttrpcdapmuxserviceClient) RegisterTarget(ctx context.Context, req *RegisterTargetRequest) (*RegisterTargetResponse, error) {
	var resp RegisterTargetResponse
	if err := c.client.Call(ctx, "runm.dapmux.v1.DAPMuxService", "RegisterTarget", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpcdapmuxserviceClient) UnregisterTarget(ctx context.Context, req *UnregisterTargetRequest) (*UnregisterTargetResponse, error) {
	var resp UnregisterTargetResponse
	if err := c.client.Call(ctx, "runm.dapmux.v1.DAPMuxService", "UnregisterTarget", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpcdapmuxserviceClient) ListTargets(ctx context.Context, req *ListTargetsRequest) (*ListTargetsResponse, error) {
	var resp ListTargetsResponse
	if err := c.client.Call(ctx, "runm.dapmux.v1.DAPMuxService", "ListTargets", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpcdapmuxserviceClient) SetActiveTarget(ctx context.Context, req *SetActiveTargetRequest) (*SetActiveTargetResponse, error) {
	var resp SetActiveTargetResponse
	if err := c.client.Call(ctx, "runm.dapmux.v1.DAPMuxService", "SetActiveTarget", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpcdapmuxserviceClient) StreamTargetEvents(ctx context.Context, req *StreamTargetEventsRequest) (TTRPCDAPMuxService_StreamTargetEventsClient, error) {
	stream, err := c.client.NewStream(ctx, &ttrpc.StreamDesc{
		StreamingClient: false,
		StreamingServer: true,
	}, "runm.dapmux.v1.DAPMuxService", "StreamTargetEvents", req)
	if err != nil {
		return nil, err
	}
	x := &ttrpcdapmuxserviceStreamTargetEventsClient{stream}
	return x, nil
}

type TTRPCDAPMuxService_StreamTargetEventsClient interface {
	Recv() (*TargetEvent, error)
	ttrpc.ClientStream
}

type ttrpcdapmuxserviceStreamTargetEventsClient struct {
	ttrpc.ClientStream
}

func (x *ttrpcdapmuxserviceStreamTargetEventsClient) Recv() (*TargetEvent, error) {
	m := new(TargetEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ttrpcdapmuxserviceClient) ForwardDAPMessage(ctx context.Context, req *ForwardDAPMessageRequest) (*ForwardDAPMessageResponse, error) {
	var resp ForwardDAPMessageResponse
	if err := c.client.Call(ctx, "runm.dapmux.v1.DAPMuxService", "ForwardDAPMessage", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

type TTRPCHealthServiceService interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Watch(context.Context, *HealthCheckRequest, TTRPCHealthService_WatchServer) error
}

type TTRPCHealthService_WatchServer interface {
	Send(*HealthCheckResponse) error
	ttrpc.StreamServer
}

type ttrpchealthserviceWatchServer struct {
	ttrpc.StreamServer
}

func (x *ttrpchealthserviceWatchServer) Send(m *HealthCheckResponse) error {
	return x.StreamServer.SendMsg(m)
}

func RegisterTTRPCHealthServiceService(srv *ttrpc.Server, svc TTRPCHealthServiceService) {
	srv.RegisterService("runm.dapmux.v1.HealthService", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"Check": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req HealthCheckRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Check(ctx, &req)
			},
		},
		Streams: map[string]ttrpc.Stream{
			"Watch": {
				Handler: func(ctx context.Context, stream ttrpc.StreamServer) (interface{}, error) {
					m := new(HealthCheckRequest)
					if err := stream.RecvMsg(m); err != nil {
						return nil, err
					}
					return nil, svc.Watch(ctx, m, &ttrpchealthserviceWatchServer{stream})
				},
				StreamingClient: false,
				StreamingServer: true,
			},
		},
	})
}

type TTRPCHealthServiceClient interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Watch(context.Context, *HealthCheckRequest) (TTRPCHealthService_WatchClient, error)
}

type ttrpchealthserviceClient struct {
	client *ttrpc.Client
}

func NewTTRPCHealthServiceClient(client *ttrpc.Client) TTRPCHealthServiceClient {
	return &ttrpchealthserviceClient{
		client: client,
	}
}

func (c *ttrpchealthserviceClient) Check(ctx context.Context, req *HealthCheckRequest) (*HealthCheckResponse, error) {
	var resp HealthCheckResponse
	if err := c.client.Call(ctx, "runm.dapmux.v1.HealthService", "Check", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpchealthserviceClient) Watch(ctx context.Context, req *HealthCheckRequest) (TTRPCHealthService_WatchClient, error) {
	stream, err := c.client.NewStream(ctx, &ttrpc.StreamDesc{
		StreamingClient: false,
		StreamingServer: true,
	}, "runm.dapmux.v1.HealthService", "Watch", req)
	if err != nil {
		return nil, err
	}
	x := &ttrpchealthserviceWatchClient{stream}
	return x, nil
}

type TTRPCHealthService_WatchClient interface {
	Recv() (*HealthCheckResponse, error)
	ttrpc.ClientStream
}

type ttrpchealthserviceWatchClient struct {
	ttrpc.ClientStream
}

func (x *ttrpchealthserviceWatchClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}
