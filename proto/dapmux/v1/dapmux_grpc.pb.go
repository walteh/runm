// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: dapmux/v1/dapmux.proto

package dapmuxv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DAPMuxService_RegisterTarget_FullMethodName     = "/runm.dapmux.v1.DAPMuxService/RegisterTarget"
	DAPMuxService_UnregisterTarget_FullMethodName   = "/runm.dapmux.v1.DAPMuxService/UnregisterTarget"
	DAPMuxService_ListTargets_FullMethodName        = "/runm.dapmux.v1.DAPMuxService/ListTargets"
	DAPMuxService_SetActiveTarget_FullMethodName    = "/runm.dapmux.v1.DAPMuxService/SetActiveTarget"
	DAPMuxService_StreamTargetEvents_FullMethodName = "/runm.dapmux.v1.DAPMuxService/StreamTargetEvents"
	DAPMuxService_ForwardDAPMessage_FullMethodName  = "/runm.dapmux.v1.DAPMuxService/ForwardDAPMessage"
)

// DAPMuxServiceClient is the client API for DAPMuxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DAP Multiplexer service for managing debug targets
type DAPMuxServiceClient interface {
	// Register a new debug target
	RegisterTarget(ctx context.Context, in *RegisterTargetRequest, opts ...grpc.CallOption) (*RegisterTargetResponse, error)
	// Unregister a debug target
	UnregisterTarget(ctx context.Context, in *UnregisterTargetRequest, opts ...grpc.CallOption) (*UnregisterTargetResponse, error)
	// List all registered targets
	ListTargets(ctx context.Context, in *ListTargetsRequest, opts ...grpc.CallOption) (*ListTargetsResponse, error)
	// Set the active target for debugging
	SetActiveTarget(ctx context.Context, in *SetActiveTargetRequest, opts ...grpc.CallOption) (*SetActiveTargetResponse, error)
	// Stream target events (additions, removals, status changes)
	StreamTargetEvents(ctx context.Context, in *StreamTargetEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TargetEvent], error)
	// Forward DAP messages to targets
	ForwardDAPMessage(ctx context.Context, in *ForwardDAPMessageRequest, opts ...grpc.CallOption) (*ForwardDAPMessageResponse, error)
}

type dAPMuxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDAPMuxServiceClient(cc grpc.ClientConnInterface) DAPMuxServiceClient {
	return &dAPMuxServiceClient{cc}
}

func (c *dAPMuxServiceClient) RegisterTarget(ctx context.Context, in *RegisterTargetRequest, opts ...grpc.CallOption) (*RegisterTargetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterTargetResponse)
	err := c.cc.Invoke(ctx, DAPMuxService_RegisterTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAPMuxServiceClient) UnregisterTarget(ctx context.Context, in *UnregisterTargetRequest, opts ...grpc.CallOption) (*UnregisterTargetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterTargetResponse)
	err := c.cc.Invoke(ctx, DAPMuxService_UnregisterTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAPMuxServiceClient) ListTargets(ctx context.Context, in *ListTargetsRequest, opts ...grpc.CallOption) (*ListTargetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTargetsResponse)
	err := c.cc.Invoke(ctx, DAPMuxService_ListTargets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAPMuxServiceClient) SetActiveTarget(ctx context.Context, in *SetActiveTargetRequest, opts ...grpc.CallOption) (*SetActiveTargetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetActiveTargetResponse)
	err := c.cc.Invoke(ctx, DAPMuxService_SetActiveTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAPMuxServiceClient) StreamTargetEvents(ctx context.Context, in *StreamTargetEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TargetEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DAPMuxService_ServiceDesc.Streams[0], DAPMuxService_StreamTargetEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTargetEventsRequest, TargetEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DAPMuxService_StreamTargetEventsClient = grpc.ServerStreamingClient[TargetEvent]

func (c *dAPMuxServiceClient) ForwardDAPMessage(ctx context.Context, in *ForwardDAPMessageRequest, opts ...grpc.CallOption) (*ForwardDAPMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardDAPMessageResponse)
	err := c.cc.Invoke(ctx, DAPMuxService_ForwardDAPMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DAPMuxServiceServer is the server API for DAPMuxService service.
// All implementations should embed UnimplementedDAPMuxServiceServer
// for forward compatibility.
//
// DAP Multiplexer service for managing debug targets
type DAPMuxServiceServer interface {
	// Register a new debug target
	RegisterTarget(context.Context, *RegisterTargetRequest) (*RegisterTargetResponse, error)
	// Unregister a debug target
	UnregisterTarget(context.Context, *UnregisterTargetRequest) (*UnregisterTargetResponse, error)
	// List all registered targets
	ListTargets(context.Context, *ListTargetsRequest) (*ListTargetsResponse, error)
	// Set the active target for debugging
	SetActiveTarget(context.Context, *SetActiveTargetRequest) (*SetActiveTargetResponse, error)
	// Stream target events (additions, removals, status changes)
	StreamTargetEvents(*StreamTargetEventsRequest, grpc.ServerStreamingServer[TargetEvent]) error
	// Forward DAP messages to targets
	ForwardDAPMessage(context.Context, *ForwardDAPMessageRequest) (*ForwardDAPMessageResponse, error)
}

// UnimplementedDAPMuxServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDAPMuxServiceServer struct{}

func (UnimplementedDAPMuxServiceServer) RegisterTarget(context.Context, *RegisterTargetRequest) (*RegisterTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTarget not implemented")
}
func (UnimplementedDAPMuxServiceServer) UnregisterTarget(context.Context, *UnregisterTargetRequest) (*UnregisterTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterTarget not implemented")
}
func (UnimplementedDAPMuxServiceServer) ListTargets(context.Context, *ListTargetsRequest) (*ListTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTargets not implemented")
}
func (UnimplementedDAPMuxServiceServer) SetActiveTarget(context.Context, *SetActiveTargetRequest) (*SetActiveTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveTarget not implemented")
}
func (UnimplementedDAPMuxServiceServer) StreamTargetEvents(*StreamTargetEventsRequest, grpc.ServerStreamingServer[TargetEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTargetEvents not implemented")
}
func (UnimplementedDAPMuxServiceServer) ForwardDAPMessage(context.Context, *ForwardDAPMessageRequest) (*ForwardDAPMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardDAPMessage not implemented")
}
func (UnimplementedDAPMuxServiceServer) testEmbeddedByValue() {}

// UnsafeDAPMuxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DAPMuxServiceServer will
// result in compilation errors.
type UnsafeDAPMuxServiceServer interface {
	mustEmbedUnimplementedDAPMuxServiceServer()
}

func RegisterDAPMuxServiceServer(s grpc.ServiceRegistrar, srv DAPMuxServiceServer) {
	// If the following call pancis, it indicates UnimplementedDAPMuxServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DAPMuxService_ServiceDesc, srv)
}

func _DAPMuxService_RegisterTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAPMuxServiceServer).RegisterTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAPMuxService_RegisterTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAPMuxServiceServer).RegisterTarget(ctx, req.(*RegisterTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAPMuxService_UnregisterTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAPMuxServiceServer).UnregisterTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAPMuxService_UnregisterTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAPMuxServiceServer).UnregisterTarget(ctx, req.(*UnregisterTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAPMuxService_ListTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAPMuxServiceServer).ListTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAPMuxService_ListTargets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAPMuxServiceServer).ListTargets(ctx, req.(*ListTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAPMuxService_SetActiveTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActiveTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAPMuxServiceServer).SetActiveTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAPMuxService_SetActiveTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAPMuxServiceServer).SetActiveTarget(ctx, req.(*SetActiveTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAPMuxService_StreamTargetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTargetEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DAPMuxServiceServer).StreamTargetEvents(m, &grpc.GenericServerStream[StreamTargetEventsRequest, TargetEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DAPMuxService_StreamTargetEventsServer = grpc.ServerStreamingServer[TargetEvent]

func _DAPMuxService_ForwardDAPMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardDAPMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAPMuxServiceServer).ForwardDAPMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAPMuxService_ForwardDAPMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAPMuxServiceServer).ForwardDAPMessage(ctx, req.(*ForwardDAPMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DAPMuxService_ServiceDesc is the grpc.ServiceDesc for DAPMuxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DAPMuxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runm.dapmux.v1.DAPMuxService",
	HandlerType: (*DAPMuxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTarget",
			Handler:    _DAPMuxService_RegisterTarget_Handler,
		},
		{
			MethodName: "UnregisterTarget",
			Handler:    _DAPMuxService_UnregisterTarget_Handler,
		},
		{
			MethodName: "ListTargets",
			Handler:    _DAPMuxService_ListTargets_Handler,
		},
		{
			MethodName: "SetActiveTarget",
			Handler:    _DAPMuxService_SetActiveTarget_Handler,
		},
		{
			MethodName: "ForwardDAPMessage",
			Handler:    _DAPMuxService_ForwardDAPMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTargetEvents",
			Handler:       _DAPMuxService_StreamTargetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dapmux/v1/dapmux.proto",
}

const (
	HealthService_Check_FullMethodName = "/runm.dapmux.v1.HealthService/Check"
	HealthService_Watch_FullMethodName = "/runm.dapmux.v1.HealthService/Watch"
)

// HealthServiceClient is the client API for HealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Health check service
type HealthServiceClient interface {
	// Check the health of the DAP multiplexer
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Watch for health status changes
	Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HealthCheckResponse], error)
}

type healthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthServiceClient(cc grpc.ClientConnInterface) HealthServiceClient {
	return &healthServiceClient{cc}
}

func (c *healthServiceClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, HealthService_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HealthCheckResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HealthService_ServiceDesc.Streams[0], HealthService_Watch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HealthCheckRequest, HealthCheckResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HealthService_WatchClient = grpc.ServerStreamingClient[HealthCheckResponse]

// HealthServiceServer is the server API for HealthService service.
// All implementations should embed UnimplementedHealthServiceServer
// for forward compatibility.
//
// Health check service
type HealthServiceServer interface {
	// Check the health of the DAP multiplexer
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Watch for health status changes
	Watch(*HealthCheckRequest, grpc.ServerStreamingServer[HealthCheckResponse]) error
}

// UnimplementedHealthServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthServiceServer struct{}

func (UnimplementedHealthServiceServer) Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedHealthServiceServer) Watch(*HealthCheckRequest, grpc.ServerStreamingServer[HealthCheckResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedHealthServiceServer) testEmbeddedByValue() {}

// UnsafeHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServiceServer will
// result in compilation errors.
type UnsafeHealthServiceServer interface {
	mustEmbedUnimplementedHealthServiceServer()
}

func RegisterHealthServiceServer(s grpc.ServiceRegistrar, srv HealthServiceServer) {
	// If the following call pancis, it indicates UnimplementedHealthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthService_ServiceDesc, srv)
}

func _HealthService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HealthServiceServer).Watch(m, &grpc.GenericServerStream[HealthCheckRequest, HealthCheckResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HealthService_WatchServer = grpc.ServerStreamingServer[HealthCheckResponse]

// HealthService_ServiceDesc is the grpc.ServiceDesc for HealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runm.dapmux.v1.HealthService",
	HandlerType: (*HealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _HealthService_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _HealthService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dapmux/v1/dapmux.proto",
}
