// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: v1/host.proto
package runmv1

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
)

type TTRPCHostServiceService interface {
	ForkExecProxy(context.Context, *ForkExecProxyRequest) (*ForkExecProxyResponse, error)
}

func RegisterTTRPCHostServiceService(srv *ttrpc.Server, svc TTRPCHostServiceService) {
	srv.RegisterService("runm.v1.HostService", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"ForkExecProxy": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ForkExecProxyRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ForkExecProxy(ctx, &req)
			},
		},
	})
}

type ttrpchostserviceClient struct {
	client *ttrpc.Client
}

func NewTTRPCHostServiceClient(client *ttrpc.Client) TTRPCHostServiceService {
	return &ttrpchostserviceClient{
		client: client,
	}
}

func (c *ttrpchostserviceClient) ForkExecProxy(ctx context.Context, req *ForkExecProxyRequest) (*ForkExecProxyResponse, error) {
	var resp ForkExecProxyResponse
	if err := c.client.Call(ctx, "runm.v1.HostService", "ForkExecProxy", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
