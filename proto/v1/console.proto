edition = "2023";

package runv.v1;

import "buf/validate/validate.proto";
import "google/protobuf/go_features.proto";

option features.(pb.go).api_level = API_OPAQUE;
option features.field_presence = IMPLICIT;

service PlatformProxyService {
	rpc CopyConsole(CopyConsoleRequest) returns (CopyConsoleResponse) {}


	rpc ShutdownConsole(ShutdownConsoleRequest) returns (ShutdownConsoleResponse) {}


	rpc ClosePlatform(ClosePlatformRequest) returns (ClosePlatformResponse) {}
}

service ConsoleIOService {
	rpc Read(ConsoleReadRequest) returns (ConsoleReadResponse) {}


	rpc Write(ConsoleWriteRequest) returns (ConsoleWriteResponse) {}
}

// Platform service messages
message CopyConsoleRequest {
	string session_id = 1 [
		(buf.validate.field).string.uuid = true,
		(buf.validate.field).cel         = {
			id:                      "session_id.not_empty"
			message:                 "session_id cannot be empty"
			expression:              "size(this) > 0"
		}
	];

	string console_id = 2 [
		(buf.validate.field).string.uuid = true,
		(buf.validate.field).cel         = {
			id:                      "console_id.not_empty"
			message:                 "console_id cannot be empty"
			expression:              "size(this) > 0"
		}
	];

	string process_id = 3 [
		(buf.validate.field).string.min_len = 1,
		(buf.validate.field).string.max_len = 256,
		(buf.validate.field).cel            = {
			id:                         "process_id.valid_format"
			message:                    "process_id must be alphanumeric with hyphens"
			expression:                 "this.matches('^[a-zA-Z0-9-_]+$')"
		}
	];

	string stdin_path = 4 [
		(buf.validate.field).string.max_len = 4096,
		(buf.validate.field).cel            = {
			id:                         "stdin_path.valid_path"
			message:                    "stdin_path must be empty or valid absolute path"
			expression:                 "this == '' || this.startsWith('/')"
		}
	];

	string stdout_path = 5 [
		(buf.validate.field).string.min_len = 1,
		(buf.validate.field).string.max_len = 4096,
		(buf.validate.field).cel            = {
			id:                         "stdout_path.required_path"
			message:                    "stdout_path must be valid absolute path"
			expression:                 "this.startsWith('/') || this.startsWith('binary:')"
		}
	];

	string stderr_path = 6 [
		(buf.validate.field).string.max_len = 4096,
		(buf.validate.field).cel            = {
			id:                         "stderr_path.valid_path"
			message:                    "stderr_path must be empty or valid absolute path"
			expression:                 "this == '' || this.startsWith('/')"
		}
	];
}

message CopyConsoleResponse {
	bool success = 1;

	string error = 2 [
		(buf.validate.field).string.max_len = 1024,
		(buf.validate.field).cel            = {
			id:                         "error.conditional_required"
			message:                    "error must be provided when success is false"
			expression:                 "!this.success || size(this.error) > 0"
		}
	];

	string proxy_console_id = 3 [
		(buf.validate.field).string.uuid = true,
		(buf.validate.field).cel         = {
			id:                      "proxy_console_id.conditional_required"
			message:                 "proxy_console_id required when success is true"
			expression:              "!this.success || size(this.proxy_console_id) > 0"
		}
	];

	string proxy_address = 4 [
		(buf.validate.field).string.max_len = 1024,
		(buf.validate.field).cel            = {
			id:                         "proxy_address.format"
			message:                    "proxy address must be valid"
			expression:                 "this == '' || this.startsWith('unix://') || this.startsWith('tcp://')"
		}
	];
}

message ShutdownConsoleRequest {
	string session_id = 1 [
		(buf.validate.field).string.uuid = true,
		(buf.validate.field).cel         = {
			id:                      "session_id.not_empty"
			message:                 "session_id cannot be empty"
			expression:              "size(this) > 0"
		}
	];

	string proxy_console_id = 2 [
		(buf.validate.field).string.uuid = true,
		(buf.validate.field).cel         = {
			id:                      "proxy_console_id.not_empty"
			message:                 "proxy_console_id cannot be empty"
			expression:              "size(this) > 0"
		}
	];
}

message ShutdownConsoleResponse {
	bool success = 1;

	string error = 2 [
		(buf.validate.field).string.max_len = 1024,
		(buf.validate.field).cel            = {
			id:                         "error.conditional_required"
			message:                    "error must be provided when success is false"
			expression:                 "!this.success || size(this.error) > 0"
		}
	];
}

message ClosePlatformRequest {
	string session_id = 1 [
		(buf.validate.field).string.uuid = true,
		(buf.validate.field).cel         = {
			id:                      "session_id.not_empty"
			message:                 "session_id cannot be empty"
			expression:              "size(this) > 0"
		}
	];
}

message ClosePlatformResponse {
	bool success = 1;

	string error = 2 [
		(buf.validate.field).string.max_len = 1024,
		(buf.validate.field).cel            = {
			id:                         "error.conditional_required"
			message:                    "error must be provided when success is false"
			expression:                 "!this.success || size(this.error) > 0"
		}
	];
}

// Console I/O operation requests/responses
message ConsoleReadRequest {
	string session_id = 1 [
		(buf.validate.field).string.uuid = true,
		(buf.validate.field).cel         = {
			id:                      "session_id.not_empty"
			message:                 "session_id cannot be empty"
			expression:              "size(this) > 0"
		}
	];

	string console_id = 2 [
		(buf.validate.field).string.uuid = true,
		(buf.validate.field).cel         = {
			id:                      "console_id.not_empty"
			message:                 "console_id cannot be empty"
			expression:              "size(this) > 0"
		}
	];

	int32 buffer_size = 3 [
		(buf.validate.field).int32.gt  = 0,
		(buf.validate.field).int32.lte = 65536,  // Max 64KB per read
		(buf.validate.field).cel       = {
			id:                    "buffer_size.reasonable"
			message:               "buffer_size must be between 1 and 64KB"
			expression:            "this > 0 && this <= 65536"
		}
	];
}

message ConsoleReadResponse {
	bool success = 1;

	string error = 2 [
		(buf.validate.field).string.max_len = 1024,
		(buf.validate.field).cel            = {
			id:                         "error.conditional_required"
			message:                    "error must be provided when success is false"
			expression:                 "!this.success || size(this.error) > 0"
		}
	];

	bytes data = 3 [
		(buf.validate.field).bytes.max_len = 65536,
		(buf.validate.field).cel           = {
			id:                        "data.size_consistency"
			message:                   "data size must match count field"
			expression:                "size(this.data) == this.count"
		}
	];

	int32 count = 4 [
		(buf.validate.field).int32.gte = 0,
		(buf.validate.field).cel       = {
			id:                    "count.valid_range"
			message:               "count must be non-negative and match data length"
			expression:            "this >= 0 && this <= 65536"
		}
	];

	bool eof = 5;
}

message ConsoleWriteRequest {
	string session_id = 1 [
		(buf.validate.field).string.uuid = true,
		(buf.validate.field).cel         = {
			id:                      "session_id.not_empty"
			message:                 "session_id cannot be empty"
			expression:              "size(this) > 0"
		}
	];

	string console_id = 2 [
		(buf.validate.field).string.uuid = true,
		(buf.validate.field).cel         = {
			id:                      "console_id.not_empty"
			message:                 "console_id cannot be empty"
			expression:              "size(this) > 0"
		}
	];

	bytes data = 3 [
		(buf.validate.field).bytes.min_len = 1,
		(buf.validate.field).bytes.max_len = 65536,  // Max 64KB per write
		(buf.validate.field).cel           = {
			id:                        "data.not_empty"
			message:                   "data cannot be empty for write operations"
			expression:                "size(this) > 0"
		}
	];
}

message ConsoleWriteResponse {
	bool success = 1;

	string error = 2 [
		(buf.validate.field).string.max_len = 1024,
		(buf.validate.field).cel            = {
			id:                         "error.conditional_required"
			message:                    "error must be provided when success is false"
			expression:                 "!this.success || size(this.error) > 0"
		}
	];

	int32 count = 3 [
		(buf.validate.field).int32.gte = 0,
		(buf.validate.field).cel       = {
			id:                    "count.valid_range"
			message:               "count must be non-negative"
			expression:            "this >= 0 && this <= 65536"
		}
	];
}
