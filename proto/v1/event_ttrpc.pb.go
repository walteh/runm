// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: v1/event.proto
package runmv1

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type TTRPCEventServiceService interface {
	ReceiveEvents(context.Context, *emptypb.Empty, TTRPCEventService_ReceiveEventsServer) error
	PublishEvent(context.Context, *PublishEventRequest) (*PublishEventResponse, error)
	SubscribeToReaperExits(context.Context, *emptypb.Empty, TTRPCEventService_SubscribeToReaperExitsServer) error
}

type TTRPCEventService_ReceiveEventsServer interface {
	Send(*PublishEventsResponse) error
	ttrpc.StreamServer
}

type ttrpceventserviceReceiveEventsServer struct {
	ttrpc.StreamServer
}

func (x *ttrpceventserviceReceiveEventsServer) Send(m *PublishEventsResponse) error {
	return x.StreamServer.SendMsg(m)
}

type TTRPCEventService_SubscribeToReaperExitsServer interface {
	Send(*ReaperExit) error
	ttrpc.StreamServer
}

type ttrpceventserviceSubscribeToReaperExitsServer struct {
	ttrpc.StreamServer
}

func (x *ttrpceventserviceSubscribeToReaperExitsServer) Send(m *ReaperExit) error {
	return x.StreamServer.SendMsg(m)
}

func RegisterTTRPCEventServiceService(srv *ttrpc.Server, svc TTRPCEventServiceService) {
	srv.RegisterService("runm.v1.EventService", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"PublishEvent": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req PublishEventRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.PublishEvent(ctx, &req)
			},
		},
		Streams: map[string]ttrpc.Stream{
			"ReceiveEvents": {
				Handler: func(ctx context.Context, stream ttrpc.StreamServer) (interface{}, error) {
					m := new(emptypb.Empty)
					if err := stream.RecvMsg(m); err != nil {
						return nil, err
					}
					return nil, svc.ReceiveEvents(ctx, m, &ttrpceventserviceReceiveEventsServer{stream})
				},
				StreamingClient: false,
				StreamingServer: true,
			},
			"SubscribeToReaperExits": {
				Handler: func(ctx context.Context, stream ttrpc.StreamServer) (interface{}, error) {
					m := new(emptypb.Empty)
					if err := stream.RecvMsg(m); err != nil {
						return nil, err
					}
					return nil, svc.SubscribeToReaperExits(ctx, m, &ttrpceventserviceSubscribeToReaperExitsServer{stream})
				},
				StreamingClient: false,
				StreamingServer: true,
			},
		},
	})
}

type TTRPCEventServiceClient interface {
	ReceiveEvents(context.Context, *emptypb.Empty) (TTRPCEventService_ReceiveEventsClient, error)
	PublishEvent(context.Context, *PublishEventRequest) (*PublishEventResponse, error)
	SubscribeToReaperExits(context.Context, *emptypb.Empty) (TTRPCEventService_SubscribeToReaperExitsClient, error)
}

type ttrpceventserviceClient struct {
	client *ttrpc.Client
}

func NewTTRPCEventServiceClient(client *ttrpc.Client) TTRPCEventServiceClient {
	return &ttrpceventserviceClient{
		client: client,
	}
}

func (c *ttrpceventserviceClient) ReceiveEvents(ctx context.Context, req *emptypb.Empty) (TTRPCEventService_ReceiveEventsClient, error) {
	stream, err := c.client.NewStream(ctx, &ttrpc.StreamDesc{
		StreamingClient: false,
		StreamingServer: true,
	}, "runm.v1.EventService", "ReceiveEvents", req)
	if err != nil {
		return nil, err
	}
	x := &ttrpceventserviceReceiveEventsClient{stream}
	return x, nil
}

type TTRPCEventService_ReceiveEventsClient interface {
	Recv() (*PublishEventsResponse, error)
	ttrpc.ClientStream
}

type ttrpceventserviceReceiveEventsClient struct {
	ttrpc.ClientStream
}

func (x *ttrpceventserviceReceiveEventsClient) Recv() (*PublishEventsResponse, error) {
	m := new(PublishEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ttrpceventserviceClient) PublishEvent(ctx context.Context, req *PublishEventRequest) (*PublishEventResponse, error) {
	var resp PublishEventResponse
	if err := c.client.Call(ctx, "runm.v1.EventService", "PublishEvent", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpceventserviceClient) SubscribeToReaperExits(ctx context.Context, req *emptypb.Empty) (TTRPCEventService_SubscribeToReaperExitsClient, error) {
	stream, err := c.client.NewStream(ctx, &ttrpc.StreamDesc{
		StreamingClient: false,
		StreamingServer: true,
	}, "runm.v1.EventService", "SubscribeToReaperExits", req)
	if err != nil {
		return nil, err
	}
	x := &ttrpceventserviceSubscribeToReaperExitsClient{stream}
	return x, nil
}

type TTRPCEventService_SubscribeToReaperExitsClient interface {
	Recv() (*ReaperExit, error)
	ttrpc.ClientStream
}

type ttrpceventserviceSubscribeToReaperExitsClient struct {
	ttrpc.ClientStream
}

func (x *ttrpceventserviceSubscribeToReaperExitsClient) Recv() (*ReaperExit, error) {
	m := new(ReaperExit)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}
