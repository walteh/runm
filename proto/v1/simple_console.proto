edition = "2023";

package runv.v1;

import "buf/validate/validate.proto";
import "google/protobuf/go_features.proto";

option features.(pb.go).api_level = API_OPAQUE;
option features.field_presence = IMPLICIT;  // makes everything by default required, for optional set to EXPLICIT

// Simple Console Service - Single service with bidirectional streaming
// Based on research suggesting gRPC bidirectional streams + PTY libraries
service SimpleConsoleService {
	// StreamConsole provides bidirectional streaming for PTY I/O and control
	rpc StreamConsole(stream ConsoleChunk) returns (stream ConsoleChunk) {}


	// Platform operations (similar to current interface but simpler)
	rpc CopyConsole(SimpleCopyConsoleRequest) returns (SimpleCopyConsoleResponse) {}


	rpc ShutdownConsole(SimpleShutdownConsoleRequest) returns (SimpleShutdownConsoleResponse) {}


	rpc ClosePlatform(SimpleClosePlatformRequest) returns (SimpleClosePlatformResponse) {}
}

// ConsoleChunk carries both data and control messages in a single stream
message ConsoleChunk {
	oneof chunk_type {
		// Raw PTY data
		bytes data = 1;

		// Control messages
		ControlMessage control = 2;
	}
}

// Control messages for PTY management
message ControlMessage {
	oneof message_type {
		// Window resize (SIGWINCH)
		WindowResize resize = 1;

		// Environment variables
		EnvVar env = 2;

		// Exit codes
		ExitStatus exit = 3;

		// Error conditions
		ErrorMessage error = 4;
	}
}

message WindowResize {
	uint32 rows = 1;
	uint32 cols = 2;
}

message EnvVar {
	string key   = 1;
	string value = 2;
}

message ExitStatus {
	int32 code = 1;
}

message ErrorMessage {
	string message = 1;
}

// Simplified platform operations
message SimpleCopyConsoleRequest {
	string id     = 1;  // Process ID
	string stdin  = 2;  // Stdin path
	string stdout = 3;  // Stdout path
	string stderr = 4;  // Stderr path
}

message SimpleCopyConsoleResponse {
	bool   success = 1;
	string error   = 2;
}

message SimpleShutdownConsoleRequest {
	string id = 1;
}

message SimpleShutdownConsoleResponse {
	bool   success = 1;
	string error   = 2;
}

message SimpleClosePlatformRequest {}

message SimpleClosePlatformResponse {
	bool   success = 1;
	string error   = 2;
}
