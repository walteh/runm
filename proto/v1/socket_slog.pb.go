// Code generated by protoc-gen-go-slog. DO NOT EDIT.
//
// source: v1/socket.proto

package runmv1

import (
	fmt "fmt"
	slog "log/slog"
)

func (x *AllocateSocketStreamRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}

func (x *AllocateSocketStreamResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.String("socket_reference_id", x.GetSocketReferenceId()))
	return slog.GroupValue(attrs...)
}

func (x *AllocateIORequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 3)
	attrs = append(attrs, slog.Bool("open_stdin", x.GetOpenStdin()))
	attrs = append(attrs, slog.Bool("open_stdout", x.GetOpenStdout()))
	attrs = append(attrs, slog.Bool("open_stderr", x.GetOpenStderr()))
	return slog.GroupValue(attrs...)
}

func (x *AllocateIOResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.String("io_reference_id", x.GetIoReferenceId()))
	return slog.GroupValue(attrs...)
}

func (x *AllocateConsoleRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}

func (x *AllocateConsoleResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.String("console_reference_id", x.GetConsoleReferenceId()))
	return slog.GroupValue(attrs...)
}

func (x *CloseSocketsRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	if len(x.GetSocketReferenceIds()) != 0 {
		attrs0 := make([]slog.Attr, 0, len(x.GetSocketReferenceIds()))
		for i, v := range x.GetSocketReferenceIds() {
			attrs0 = append(attrs0, slog.String(fmt.Sprintf("%d", i), v))
		}
		attrs = append(attrs, slog.Any("socket_reference_ids", attrs0))
	}
	return slog.GroupValue(attrs...)
}

func (x *CloseSocketsResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}

func (x *AllocateSocketsRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.Uint64("count", uint64(x.GetCount())))
	return slog.GroupValue(attrs...)
}

func (x *AllocateSocketsResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	if len(x.GetSocketReferenceIds()) != 0 {
		attrs0 := make([]slog.Attr, 0, len(x.GetSocketReferenceIds()))
		for i, v := range x.GetSocketReferenceIds() {
			attrs0 = append(attrs0, slog.String(fmt.Sprintf("%d", i), v))
		}
		attrs = append(attrs, slog.Any("socket_reference_ids", attrs0))
	}
	return slog.GroupValue(attrs...)
}

func (x *BindIOToSocketsRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 4)
	attrs = append(attrs, slog.String("io_reference_id", x.GetIoReferenceId()))
	attrs = append(attrs, slog.String("stdin_socket_reference_id", x.GetStdinSocketReferenceId()))
	attrs = append(attrs, slog.String("stdout_socket_reference_id", x.GetStdoutSocketReferenceId()))
	attrs = append(attrs, slog.String("stderr_socket_reference_id", x.GetStderrSocketReferenceId()))
	return slog.GroupValue(attrs...)
}

func (x *BindIOToSocketsResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}

func (x *BindConsoleToSocketRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 2)
	attrs = append(attrs, slog.String("console_reference_id", x.GetConsoleReferenceId()))
	attrs = append(attrs, slog.String("socket_reference_id", x.GetSocketReferenceId()))
	return slog.GroupValue(attrs...)
}

func (x *BindConsoleToSocketResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}

func (x *AllocateSocketRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.Uint64("count", uint64(x.GetCount())))
	return slog.GroupValue(attrs...)
}

func (x *AllocateSocketResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.String("socket_reference_id", x.GetSocketReferenceId()))
	return slog.GroupValue(attrs...)
}

func (x *CloseSocketRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.String("socket_reference_id", x.GetSocketReferenceId()))
	return slog.GroupValue(attrs...)
}

func (x *CloseSocketResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.String("go_error", x.GetGoError()))
	return slog.GroupValue(attrs...)
}

func (x *CloseIORequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.String("io_reference_id", x.GetIoReferenceId()))
	return slog.GroupValue(attrs...)
}

func (x *CloseIOResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}

func (x *CloseConsoleRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.String("console_reference_id", x.GetConsoleReferenceId()))
	return slog.GroupValue(attrs...)
}

func (x *CloseConsoleResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}
