// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/cgroup.proto

package runmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GuestCgroupService_GetCgroupStats_FullMethodName       = "/runm.v1.GuestCgroupService/GetCgroupStats"
	GuestCgroupService_StreamCgroupEvents_FullMethodName   = "/runm.v1.GuestCgroupService/StreamCgroupEvents"
	GuestCgroupService_ToggleAllControllers_FullMethodName = "/runm.v1.GuestCgroupService/ToggleAllControllers"
)

// GuestCgroupServiceClient is the client API for GuestCgroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuestCgroupServiceClient interface {
	GetCgroupStats(ctx context.Context, in *GetCgroupStatsRequest, opts ...grpc.CallOption) (*GetCgroupStatsResponse, error)
	StreamCgroupEvents(ctx context.Context, in *StreamCgroupEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamCgroupEventsResponse], error)
	ToggleAllControllers(ctx context.Context, in *ToggleAllControllersRequest, opts ...grpc.CallOption) (*ToggleAllControllersResponse, error)
}

type guestCgroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGuestCgroupServiceClient(cc grpc.ClientConnInterface) GuestCgroupServiceClient {
	return &guestCgroupServiceClient{cc}
}

func (c *guestCgroupServiceClient) GetCgroupStats(ctx context.Context, in *GetCgroupStatsRequest, opts ...grpc.CallOption) (*GetCgroupStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCgroupStatsResponse)
	err := c.cc.Invoke(ctx, GuestCgroupService_GetCgroupStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestCgroupServiceClient) StreamCgroupEvents(ctx context.Context, in *StreamCgroupEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamCgroupEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GuestCgroupService_ServiceDesc.Streams[0], GuestCgroupService_StreamCgroupEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamCgroupEventsRequest, StreamCgroupEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GuestCgroupService_StreamCgroupEventsClient = grpc.ServerStreamingClient[StreamCgroupEventsResponse]

func (c *guestCgroupServiceClient) ToggleAllControllers(ctx context.Context, in *ToggleAllControllersRequest, opts ...grpc.CallOption) (*ToggleAllControllersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToggleAllControllersResponse)
	err := c.cc.Invoke(ctx, GuestCgroupService_ToggleAllControllers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuestCgroupServiceServer is the server API for GuestCgroupService service.
// All implementations should embed UnimplementedGuestCgroupServiceServer
// for forward compatibility.
type GuestCgroupServiceServer interface {
	GetCgroupStats(context.Context, *GetCgroupStatsRequest) (*GetCgroupStatsResponse, error)
	StreamCgroupEvents(*StreamCgroupEventsRequest, grpc.ServerStreamingServer[StreamCgroupEventsResponse]) error
	ToggleAllControllers(context.Context, *ToggleAllControllersRequest) (*ToggleAllControllersResponse, error)
}

// UnimplementedGuestCgroupServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGuestCgroupServiceServer struct{}

func (UnimplementedGuestCgroupServiceServer) GetCgroupStats(context.Context, *GetCgroupStatsRequest) (*GetCgroupStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCgroupStats not implemented")
}
func (UnimplementedGuestCgroupServiceServer) StreamCgroupEvents(*StreamCgroupEventsRequest, grpc.ServerStreamingServer[StreamCgroupEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCgroupEvents not implemented")
}
func (UnimplementedGuestCgroupServiceServer) ToggleAllControllers(context.Context, *ToggleAllControllersRequest) (*ToggleAllControllersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleAllControllers not implemented")
}
func (UnimplementedGuestCgroupServiceServer) testEmbeddedByValue() {}

// UnsafeGuestCgroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuestCgroupServiceServer will
// result in compilation errors.
type UnsafeGuestCgroupServiceServer interface {
	mustEmbedUnimplementedGuestCgroupServiceServer()
}

func RegisterGuestCgroupServiceServer(s grpc.ServiceRegistrar, srv GuestCgroupServiceServer) {
	// If the following call pancis, it indicates UnimplementedGuestCgroupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GuestCgroupService_ServiceDesc, srv)
}

func _GuestCgroupService_GetCgroupStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCgroupStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestCgroupServiceServer).GetCgroupStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuestCgroupService_GetCgroupStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestCgroupServiceServer).GetCgroupStats(ctx, req.(*GetCgroupStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestCgroupService_StreamCgroupEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamCgroupEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuestCgroupServiceServer).StreamCgroupEvents(m, &grpc.GenericServerStream[StreamCgroupEventsRequest, StreamCgroupEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GuestCgroupService_StreamCgroupEventsServer = grpc.ServerStreamingServer[StreamCgroupEventsResponse]

func _GuestCgroupService_ToggleAllControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleAllControllersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestCgroupServiceServer).ToggleAllControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuestCgroupService_ToggleAllControllers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestCgroupServiceServer).ToggleAllControllers(ctx, req.(*ToggleAllControllersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GuestCgroupService_ServiceDesc is the grpc.ServiceDesc for GuestCgroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuestCgroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runm.v1.GuestCgroupService",
	HandlerType: (*GuestCgroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCgroupStats",
			Handler:    _GuestCgroupService_GetCgroupStats_Handler,
		},
		{
			MethodName: "ToggleAllControllers",
			Handler:    _GuestCgroupService_ToggleAllControllers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCgroupEvents",
			Handler:       _GuestCgroupService_StreamCgroupEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/cgroup.proto",
}
