// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: v1/epoll.proto

package runvv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EpollEventType int32

const (
	EpollEventType_EPOLL_EVENT_TYPE_UNSPECIFIED EpollEventType = 0
	EpollEventType_EPOLL_EVENT_TYPE_READ_READY  EpollEventType = 1
	EpollEventType_EPOLL_EVENT_TYPE_WRITE_READY EpollEventType = 2
	EpollEventType_EPOLL_EVENT_TYPE_ERROR       EpollEventType = 3
	EpollEventType_EPOLL_EVENT_TYPE_HANGUP      EpollEventType = 4
)

// Enum value maps for EpollEventType.
var (
	EpollEventType_name = map[int32]string{
		0: "EPOLL_EVENT_TYPE_UNSPECIFIED",
		1: "EPOLL_EVENT_TYPE_READ_READY",
		2: "EPOLL_EVENT_TYPE_WRITE_READY",
		3: "EPOLL_EVENT_TYPE_ERROR",
		4: "EPOLL_EVENT_TYPE_HANGUP",
	}
	EpollEventType_value = map[string]int32{
		"EPOLL_EVENT_TYPE_UNSPECIFIED": 0,
		"EPOLL_EVENT_TYPE_READ_READY":  1,
		"EPOLL_EVENT_TYPE_WRITE_READY": 2,
		"EPOLL_EVENT_TYPE_ERROR":       3,
		"EPOLL_EVENT_TYPE_HANGUP":      4,
	}
)

func (x EpollEventType) Enum() *EpollEventType {
	p := new(EpollEventType)
	*p = x
	return p
}

func (x EpollEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EpollEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_epoll_proto_enumTypes[0].Descriptor()
}

func (EpollEventType) Type() protoreflect.EnumType {
	return &file_v1_epoll_proto_enumTypes[0]
}

func (x EpollEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type AddRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SessionId   *string                `protobuf:"bytes,1,opt,name=session_id,json=sessionId"`
	xxx_hidden_ConsoleId   int32                  `protobuf:"varint,2,opt,name=console_id,json=consoleId"`
	xxx_hidden_Fd          int32                  `protobuf:"varint,3,opt,name=fd"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *AddRequest) Reset() {
	*x = AddRequest{}
	mi := &file_v1_epoll_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRequest) ProtoMessage() {}

func (x *AddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_epoll_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AddRequest) GetSessionId() string {
	if x != nil {
		if x.xxx_hidden_SessionId != nil {
			return *x.xxx_hidden_SessionId
		}
		return ""
	}
	return ""
}

func (x *AddRequest) GetConsoleId() int32 {
	if x != nil {
		return x.xxx_hidden_ConsoleId
	}
	return 0
}

func (x *AddRequest) GetFd() int32 {
	if x != nil {
		return x.xxx_hidden_Fd
	}
	return 0
}

func (x *AddRequest) SetSessionId(v string) {
	x.xxx_hidden_SessionId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *AddRequest) SetConsoleId(v int32) {
	x.xxx_hidden_ConsoleId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *AddRequest) SetFd(v int32) {
	x.xxx_hidden_Fd = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *AddRequest) HasSessionId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *AddRequest) HasConsoleId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *AddRequest) HasFd() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *AddRequest) ClearSessionId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SessionId = nil
}

func (x *AddRequest) ClearConsoleId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ConsoleId = 0
}

func (x *AddRequest) ClearFd() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Fd = 0
}

type AddRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SessionId *string
	ConsoleId *int32
	Fd        *int32
}

func (b0 AddRequest_builder) Build() *AddRequest {
	m0 := &AddRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SessionId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_SessionId = b.SessionId
	}
	if b.ConsoleId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_ConsoleId = *b.ConsoleId
	}
	if b.Fd != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Fd = *b.Fd
	}
	return m0
}

type AddResponse struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Success             bool                   `protobuf:"varint,1,opt,name=success"`
	xxx_hidden_Error               *string                `protobuf:"bytes,2,opt,name=error"`
	xxx_hidden_ProxyConsoleAddress *string                `protobuf:"bytes,3,opt,name=proxy_console_address,json=proxyConsoleAddress"`
	XXX_raceDetectHookData         protoimpl.RaceDetectHookData
	XXX_presence                   [1]uint32
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *AddResponse) Reset() {
	*x = AddResponse{}
	mi := &file_v1_epoll_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResponse) ProtoMessage() {}

func (x *AddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_epoll_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AddResponse) GetSuccess() bool {
	if x != nil {
		return x.xxx_hidden_Success
	}
	return false
}

func (x *AddResponse) GetError() string {
	if x != nil {
		if x.xxx_hidden_Error != nil {
			return *x.xxx_hidden_Error
		}
		return ""
	}
	return ""
}

func (x *AddResponse) GetProxyConsoleAddress() string {
	if x != nil {
		if x.xxx_hidden_ProxyConsoleAddress != nil {
			return *x.xxx_hidden_ProxyConsoleAddress
		}
		return ""
	}
	return ""
}

func (x *AddResponse) SetSuccess(v bool) {
	x.xxx_hidden_Success = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *AddResponse) SetError(v string) {
	x.xxx_hidden_Error = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *AddResponse) SetProxyConsoleAddress(v string) {
	x.xxx_hidden_ProxyConsoleAddress = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *AddResponse) HasSuccess() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *AddResponse) HasError() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *AddResponse) HasProxyConsoleAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *AddResponse) ClearSuccess() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Success = false
}

func (x *AddResponse) ClearError() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Error = nil
}

func (x *AddResponse) ClearProxyConsoleAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ProxyConsoleAddress = nil
}

type AddResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Success             *bool
	Error               *string
	ProxyConsoleAddress *string
}

func (b0 AddResponse_builder) Build() *AddResponse {
	m0 := &AddResponse{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Success != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Success = *b.Success
	}
	if b.Error != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Error = b.Error
	}
	if b.ProxyConsoleAddress != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_ProxyConsoleAddress = b.ProxyConsoleAddress
	}
	return m0
}

type WaitRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SessionId   *string                `protobuf:"bytes,1,opt,name=session_id,json=sessionId"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *WaitRequest) Reset() {
	*x = WaitRequest{}
	mi := &file_v1_epoll_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitRequest) ProtoMessage() {}

func (x *WaitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_epoll_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WaitRequest) GetSessionId() string {
	if x != nil {
		if x.xxx_hidden_SessionId != nil {
			return *x.xxx_hidden_SessionId
		}
		return ""
	}
	return ""
}

func (x *WaitRequest) SetSessionId(v string) {
	x.xxx_hidden_SessionId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *WaitRequest) HasSessionId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *WaitRequest) ClearSessionId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SessionId = nil
}

type WaitRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SessionId *string
}

func (b0 WaitRequest_builder) Build() *WaitRequest {
	m0 := &WaitRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SessionId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_SessionId = b.SessionId
	}
	return m0
}

type WaitResponse struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SessionId   *string                `protobuf:"bytes,1,opt,name=session_id,json=sessionId"`
	xxx_hidden_Events      *[]*EpollEvent         `protobuf:"bytes,2,rep,name=events"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *WaitResponse) Reset() {
	*x = WaitResponse{}
	mi := &file_v1_epoll_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitResponse) ProtoMessage() {}

func (x *WaitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_epoll_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WaitResponse) GetSessionId() string {
	if x != nil {
		if x.xxx_hidden_SessionId != nil {
			return *x.xxx_hidden_SessionId
		}
		return ""
	}
	return ""
}

func (x *WaitResponse) GetEvents() []*EpollEvent {
	if x != nil {
		if x.xxx_hidden_Events != nil {
			return *x.xxx_hidden_Events
		}
	}
	return nil
}

func (x *WaitResponse) SetSessionId(v string) {
	x.xxx_hidden_SessionId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *WaitResponse) SetEvents(v []*EpollEvent) {
	x.xxx_hidden_Events = &v
}

func (x *WaitResponse) HasSessionId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *WaitResponse) ClearSessionId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SessionId = nil
}

type WaitResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SessionId *string
	Events    []*EpollEvent
}

func (b0 WaitResponse_builder) Build() *WaitResponse {
	m0 := &WaitResponse{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SessionId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_SessionId = b.SessionId
	}
	x.xxx_hidden_Events = &b.Events
	return m0
}

type CloseConsoleRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SessionId   *string                `protobuf:"bytes,1,opt,name=session_id,json=sessionId"`
	xxx_hidden_ConsoleId   int32                  `protobuf:"varint,2,opt,name=console_id,json=consoleId"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CloseConsoleRequest) Reset() {
	*x = CloseConsoleRequest{}
	mi := &file_v1_epoll_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseConsoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseConsoleRequest) ProtoMessage() {}

func (x *CloseConsoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_epoll_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CloseConsoleRequest) GetSessionId() string {
	if x != nil {
		if x.xxx_hidden_SessionId != nil {
			return *x.xxx_hidden_SessionId
		}
		return ""
	}
	return ""
}

func (x *CloseConsoleRequest) GetConsoleId() int32 {
	if x != nil {
		return x.xxx_hidden_ConsoleId
	}
	return 0
}

func (x *CloseConsoleRequest) SetSessionId(v string) {
	x.xxx_hidden_SessionId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *CloseConsoleRequest) SetConsoleId(v int32) {
	x.xxx_hidden_ConsoleId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *CloseConsoleRequest) HasSessionId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CloseConsoleRequest) HasConsoleId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CloseConsoleRequest) ClearSessionId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SessionId = nil
}

func (x *CloseConsoleRequest) ClearConsoleId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ConsoleId = 0
}

type CloseConsoleRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SessionId *string
	ConsoleId *int32
}

func (b0 CloseConsoleRequest_builder) Build() *CloseConsoleRequest {
	m0 := &CloseConsoleRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SessionId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_SessionId = b.SessionId
	}
	if b.ConsoleId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_ConsoleId = *b.ConsoleId
	}
	return m0
}

type CloseConsoleResponse struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Success     bool                   `protobuf:"varint,1,opt,name=success"`
	xxx_hidden_Error       *string                `protobuf:"bytes,2,opt,name=error"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CloseConsoleResponse) Reset() {
	*x = CloseConsoleResponse{}
	mi := &file_v1_epoll_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseConsoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseConsoleResponse) ProtoMessage() {}

func (x *CloseConsoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_epoll_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CloseConsoleResponse) GetSuccess() bool {
	if x != nil {
		return x.xxx_hidden_Success
	}
	return false
}

func (x *CloseConsoleResponse) GetError() string {
	if x != nil {
		if x.xxx_hidden_Error != nil {
			return *x.xxx_hidden_Error
		}
		return ""
	}
	return ""
}

func (x *CloseConsoleResponse) SetSuccess(v bool) {
	x.xxx_hidden_Success = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *CloseConsoleResponse) SetError(v string) {
	x.xxx_hidden_Error = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *CloseConsoleResponse) HasSuccess() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CloseConsoleResponse) HasError() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CloseConsoleResponse) ClearSuccess() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Success = false
}

func (x *CloseConsoleResponse) ClearError() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Error = nil
}

type CloseConsoleResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Success *bool
	Error   *string
}

func (b0 CloseConsoleResponse_builder) Build() *CloseConsoleResponse {
	m0 := &CloseConsoleResponse{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Success != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Success = *b.Success
	}
	if b.Error != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Error = b.Error
	}
	return m0
}

type EpollEvent struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConsoleId   int32                  `protobuf:"varint,1,opt,name=console_id,json=consoleId"`
	xxx_hidden_EventType   EpollEventType         `protobuf:"varint,2,opt,name=event_type,json=eventType,enum=runv.v1.EpollEventType"`
	xxx_hidden_Error       *string                `protobuf:"bytes,3,opt,name=error"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *EpollEvent) Reset() {
	*x = EpollEvent{}
	mi := &file_v1_epoll_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EpollEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpollEvent) ProtoMessage() {}

func (x *EpollEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v1_epoll_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EpollEvent) GetConsoleId() int32 {
	if x != nil {
		return x.xxx_hidden_ConsoleId
	}
	return 0
}

func (x *EpollEvent) GetEventType() EpollEventType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_EventType
		}
	}
	return EpollEventType_EPOLL_EVENT_TYPE_UNSPECIFIED
}

func (x *EpollEvent) GetError() string {
	if x != nil {
		if x.xxx_hidden_Error != nil {
			return *x.xxx_hidden_Error
		}
		return ""
	}
	return ""
}

func (x *EpollEvent) SetConsoleId(v int32) {
	x.xxx_hidden_ConsoleId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *EpollEvent) SetEventType(v EpollEventType) {
	x.xxx_hidden_EventType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *EpollEvent) SetError(v string) {
	x.xxx_hidden_Error = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *EpollEvent) HasConsoleId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *EpollEvent) HasEventType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *EpollEvent) HasError() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *EpollEvent) ClearConsoleId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ConsoleId = 0
}

func (x *EpollEvent) ClearEventType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_EventType = EpollEventType_EPOLL_EVENT_TYPE_UNSPECIFIED
}

func (x *EpollEvent) ClearError() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Error = nil
}

type EpollEvent_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConsoleId *int32
	EventType *EpollEventType
	Error     *string
}

func (b0 EpollEvent_builder) Build() *EpollEvent {
	m0 := &EpollEvent{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ConsoleId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_ConsoleId = *b.ConsoleId
	}
	if b.EventType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_EventType = *b.EventType
	}
	if b.Error != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Error = b.Error
	}
	return m0
}

var File_v1_epoll_proto protoreflect.FileDescriptor

const file_v1_epoll_proto_rawDesc = "" +
	"\n" +
	"\x0ev1/epoll.proto\x12\arunv.v1\x1a\x1bbuf/validate/validate.proto\x1a!google/protobuf/go_features.proto\"\xb2\x02\n" +
	"\n" +
	"AddRequest\x12l\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tBM\xbaHJ\xba\x01B\n" +
	"\x14session_id.not_empty\x12\x1asession_id cannot be empty\x1a\x0esize(this) > 0r\x03\xb0\x01\x01R\tsessionId\x12e\n" +
	"\n" +
	"console_id\x18\x02 \x01(\x05BF\xbaHC\xba\x01<\n" +
	"\x13console_id.positive\x12\x1bconsole_id must be positive\x1a\bthis > 0\x1a\x02 \x00R\tconsoleId\x12O\n" +
	"\x02fd\x18\x03 \x01(\x05B?\xbaH<\xba\x015\n" +
	"\x0ffd.non_negative\x12\x17fd must be non-negative\x1a\tthis >= 0\x1a\x02(\x00R\x02fd\"\xc8\x02\n" +
	"\vAddResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12a\n" +
	"\x05error\x18\x02 \x01(\tBK\xbaHH\xba\x01@\n" +
	"\x12error.length_check\x12\x16error message too long\x1a\x12size(this) <= 1024r\x03\x18\x80\bR\x05error\x12\xbb\x01\n" +
	"\x15proxy_console_address\x18\x03 \x01(\tB\x86\x01\xbaH\x82\x01\xba\x01z\n" +
	"\x14proxy_address.format\x12\x1bproxy address must be valid\x1aEthis == '' || this.startsWith('unix://') || this.startsWith('tcp://')r\x03\x18\x80\bR\x13proxyConsoleAddress\"{\n" +
	"\vWaitRequest\x12l\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tBM\xbaHJ\xba\x01B\n" +
	"\x14session_id.not_empty\x12\x1asession_id cannot be empty\x1a\x0esize(this) > 0r\x03\xb0\x01\x01R\tsessionId\"\xc2\x01\n" +
	"\fWaitResponse\x12'\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\tsessionId\x12\x88\x01\n" +
	"\x06events\x18\x02 \x03(\v2\x13.runv.v1.EpollEventB[\xbaHX\xba\x01P\n" +
	"\x17events.reasonable_count\x12\"too many events in single response\x1a\x11size(this) <= 100\x92\x01\x02\x10dR\x06events\"\xea\x01\n" +
	"\x13CloseConsoleRequest\x12l\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tBM\xbaHJ\xba\x01B\n" +
	"\x14session_id.not_empty\x12\x1asession_id cannot be empty\x1a\x0esize(this) > 0r\x03\xb0\x01\x01R\tsessionId\x12e\n" +
	"\n" +
	"console_id\x18\x02 \x01(\x05BF\xbaHC\xba\x01<\n" +
	"\x13console_id.positive\x12\x1bconsole_id must be positive\x1a\bthis > 0\x1a\x02 \x00R\tconsoleId\"\x93\x01\n" +
	"\x14CloseConsoleResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12a\n" +
	"\x05error\x18\x02 \x01(\tBK\xbaHH\xba\x01@\n" +
	"\x12error.length_check\x12\x16error message too long\x1a\x12size(this) <= 1024r\x03\x18\x80\bR\x05error\"\xd5\x02\n" +
	"\n" +
	"EpollEvent\x12e\n" +
	"\n" +
	"console_id\x18\x01 \x01(\x05BF\xbaHC\xba\x01<\n" +
	"\x13console_id.positive\x12\x1bconsole_id must be positive\x1a\bthis > 0\x1a\x02 \x00R\tconsoleId\x12z\n" +
	"\n" +
	"event_type\x18\x02 \x01(\x0e2\x17.runv.v1.EpollEventTypeBB\xbaH?\xba\x017\n" +
	"\x10event_type.valid\x12\x18event_type must be valid\x1a\tthis != 0\x82\x01\x02\x10\x01R\teventType\x12d\n" +
	"\x05error\x18\x03 \x01(\tBN\xbaHK\xba\x01C\n" +
	"\x15error.optional_length\x12\x16error message too long\x1a\x12size(this) <= 1024r\x03\x18\x80\bR\x05error*\xae\x01\n" +
	"\x0eEpollEventType\x12 \n" +
	"\x1cEPOLL_EVENT_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bEPOLL_EVENT_TYPE_READ_READY\x10\x01\x12 \n" +
	"\x1cEPOLL_EVENT_TYPE_WRITE_READY\x10\x02\x12\x1a\n" +
	"\x16EPOLL_EVENT_TYPE_ERROR\x10\x03\x12\x1b\n" +
	"\x17EPOLL_EVENT_TYPE_HANGUP\x10\x042\xcc\x01\n" +
	"\x0eEpollerService\x122\n" +
	"\x03Add\x12\x13.runv.v1.AddRequest\x1a\x14.runv.v1.AddResponse\"\x00\x12M\n" +
	"\fCloseConsole\x12\x1c.runv.v1.CloseConsoleRequest\x1a\x1d.runv.v1.CloseConsoleResponse\"\x00\x127\n" +
	"\x04Wait\x12\x14.runv.v1.WaitRequest\x1a\x15.runv.v1.WaitResponse\"\x000\x01B\x86\x01\n" +
	"\vcom.runv.v1B\n" +
	"EpollProtoP\x01Z&github.com/walteh/runv/proto/v1;runvv1\xa2\x02\x03RXX\xaa\x02\aRunv.V1\xca\x02\aRunv\\V1\xe2\x02\x13Runv\\V1\\GPBMetadata\xea\x02\bRunv::V1\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_v1_epoll_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_epoll_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_v1_epoll_proto_goTypes = []any{
	(EpollEventType)(0),          // 0: runv.v1.EpollEventType
	(*AddRequest)(nil),           // 1: runv.v1.AddRequest
	(*AddResponse)(nil),          // 2: runv.v1.AddResponse
	(*WaitRequest)(nil),          // 3: runv.v1.WaitRequest
	(*WaitResponse)(nil),         // 4: runv.v1.WaitResponse
	(*CloseConsoleRequest)(nil),  // 5: runv.v1.CloseConsoleRequest
	(*CloseConsoleResponse)(nil), // 6: runv.v1.CloseConsoleResponse
	(*EpollEvent)(nil),           // 7: runv.v1.EpollEvent
}
var file_v1_epoll_proto_depIdxs = []int32{
	7, // 0: runv.v1.WaitResponse.events:type_name -> runv.v1.EpollEvent
	0, // 1: runv.v1.EpollEvent.event_type:type_name -> runv.v1.EpollEventType
	1, // 2: runv.v1.EpollerService.Add:input_type -> runv.v1.AddRequest
	5, // 3: runv.v1.EpollerService.CloseConsole:input_type -> runv.v1.CloseConsoleRequest
	3, // 4: runv.v1.EpollerService.Wait:input_type -> runv.v1.WaitRequest
	2, // 5: runv.v1.EpollerService.Add:output_type -> runv.v1.AddResponse
	6, // 6: runv.v1.EpollerService.CloseConsole:output_type -> runv.v1.CloseConsoleResponse
	4, // 7: runv.v1.EpollerService.Wait:output_type -> runv.v1.WaitResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_v1_epoll_proto_init() }
func file_v1_epoll_proto_init() {
	if File_v1_epoll_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_epoll_proto_rawDesc), len(file_v1_epoll_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_epoll_proto_goTypes,
		DependencyIndexes: file_v1_epoll_proto_depIdxs,
		EnumInfos:         file_v1_epoll_proto_enumTypes,
		MessageInfos:      file_v1_epoll_proto_msgTypes,
	}.Build()
	File_v1_epoll_proto = out.File
	file_v1_epoll_proto_goTypes = nil
	file_v1_epoll_proto_depIdxs = nil
}
