// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: v1/shim.proto
package runmv1

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
)

type TTRPCShimServiceService interface {
	ShimKill(context.Context, *ShimKillRequest) (*ShimKillResponse, error)
}

func RegisterTTRPCShimServiceService(srv *ttrpc.Server, svc TTRPCShimServiceService) {
	srv.RegisterService("runm.v1.ShimService", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"ShimKill": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ShimKillRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ShimKill(ctx, &req)
			},
		},
	})
}

type ttrpcshimserviceClient struct {
	client *ttrpc.Client
}

func NewTTRPCShimServiceClient(client *ttrpc.Client) TTRPCShimServiceService {
	return &ttrpcshimserviceClient{
		client: client,
	}
}

func (c *ttrpcshimserviceClient) ShimKill(ctx context.Context, req *ShimKillRequest) (*ShimKillResponse, error) {
	var resp ShimKillResponse
	if err := c.client.Call(ctx, "runm.v1.ShimService", "ShimKill", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
