// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: v1/cgroup.proto
package runmv1

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
)

type TTRPCGuestCgroupServiceService interface {
	GetCgroupStats(context.Context, *GetCgroupStatsRequest) (*GetCgroupStatsResponse, error)
	StreamCgroupEvents(context.Context, *StreamCgroupEventsRequest, TTRPCGuestCgroupService_StreamCgroupEventsServer) error
	ToggleAllControllers(context.Context, *ToggleAllControllersRequest) (*ToggleAllControllersResponse, error)
}

type TTRPCGuestCgroupService_StreamCgroupEventsServer interface {
	Send(*StreamCgroupEventsResponse) error
	ttrpc.StreamServer
}

type ttrpcguestcgroupserviceStreamCgroupEventsServer struct {
	ttrpc.StreamServer
}

func (x *ttrpcguestcgroupserviceStreamCgroupEventsServer) Send(m *StreamCgroupEventsResponse) error {
	return x.StreamServer.SendMsg(m)
}

func RegisterTTRPCGuestCgroupServiceService(srv *ttrpc.Server, svc TTRPCGuestCgroupServiceService) {
	srv.RegisterService("runm.v1.GuestCgroupService", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"GetCgroupStats": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req GetCgroupStatsRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.GetCgroupStats(ctx, &req)
			},
			"ToggleAllControllers": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ToggleAllControllersRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ToggleAllControllers(ctx, &req)
			},
		},
		Streams: map[string]ttrpc.Stream{
			"StreamCgroupEvents": {
				Handler: func(ctx context.Context, stream ttrpc.StreamServer) (interface{}, error) {
					m := new(StreamCgroupEventsRequest)
					if err := stream.RecvMsg(m); err != nil {
						return nil, err
					}
					return nil, svc.StreamCgroupEvents(ctx, m, &ttrpcguestcgroupserviceStreamCgroupEventsServer{stream})
				},
				StreamingClient: false,
				StreamingServer: true,
			},
		},
	})
}

type TTRPCGuestCgroupServiceClient interface {
	GetCgroupStats(context.Context, *GetCgroupStatsRequest) (*GetCgroupStatsResponse, error)
	StreamCgroupEvents(context.Context, *StreamCgroupEventsRequest) (TTRPCGuestCgroupService_StreamCgroupEventsClient, error)
	ToggleAllControllers(context.Context, *ToggleAllControllersRequest) (*ToggleAllControllersResponse, error)
}

type ttrpcguestcgroupserviceClient struct {
	client *ttrpc.Client
}

func NewTTRPCGuestCgroupServiceClient(client *ttrpc.Client) TTRPCGuestCgroupServiceClient {
	return &ttrpcguestcgroupserviceClient{
		client: client,
	}
}

func (c *ttrpcguestcgroupserviceClient) GetCgroupStats(ctx context.Context, req *GetCgroupStatsRequest) (*GetCgroupStatsResponse, error) {
	var resp GetCgroupStatsResponse
	if err := c.client.Call(ctx, "runm.v1.GuestCgroupService", "GetCgroupStats", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpcguestcgroupserviceClient) StreamCgroupEvents(ctx context.Context, req *StreamCgroupEventsRequest) (TTRPCGuestCgroupService_StreamCgroupEventsClient, error) {
	stream, err := c.client.NewStream(ctx, &ttrpc.StreamDesc{
		StreamingClient: false,
		StreamingServer: true,
	}, "runm.v1.GuestCgroupService", "StreamCgroupEvents", req)
	if err != nil {
		return nil, err
	}
	x := &ttrpcguestcgroupserviceStreamCgroupEventsClient{stream}
	return x, nil
}

type TTRPCGuestCgroupService_StreamCgroupEventsClient interface {
	Recv() (*StreamCgroupEventsResponse, error)
	ttrpc.ClientStream
}

type ttrpcguestcgroupserviceStreamCgroupEventsClient struct {
	ttrpc.ClientStream
}

func (x *ttrpcguestcgroupserviceStreamCgroupEventsClient) Recv() (*StreamCgroupEventsResponse, error) {
	m := new(StreamCgroupEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ttrpcguestcgroupserviceClient) ToggleAllControllers(ctx context.Context, req *ToggleAllControllersRequest) (*ToggleAllControllersResponse, error) {
	var resp ToggleAllControllersResponse
	if err := c.client.Call(ctx, "runm.v1.GuestCgroupService", "ToggleAllControllers", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
