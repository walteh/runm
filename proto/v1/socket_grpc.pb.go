// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/socket.proto

package runmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SocketAllocatorService_AllocateSockets_FullMethodName      = "/runm.v1.SocketAllocatorService/AllocateSockets"
	SocketAllocatorService_AllocateSocketStream_FullMethodName = "/runm.v1.SocketAllocatorService/AllocateSocketStream"
	SocketAllocatorService_DialOpenListener_FullMethodName     = "/runm.v1.SocketAllocatorService/DialOpenListener"
	SocketAllocatorService_AllocateIO_FullMethodName           = "/runm.v1.SocketAllocatorService/AllocateIO"
	SocketAllocatorService_AllocateConsole_FullMethodName      = "/runm.v1.SocketAllocatorService/AllocateConsole"
	SocketAllocatorService_BindConsoleToSocket_FullMethodName  = "/runm.v1.SocketAllocatorService/BindConsoleToSocket"
	SocketAllocatorService_BindIOToSockets_FullMethodName      = "/runm.v1.SocketAllocatorService/BindIOToSockets"
	SocketAllocatorService_CloseSocket_FullMethodName          = "/runm.v1.SocketAllocatorService/CloseSocket"
	SocketAllocatorService_CloseSockets_FullMethodName         = "/runm.v1.SocketAllocatorService/CloseSockets"
	SocketAllocatorService_CloseIO_FullMethodName              = "/runm.v1.SocketAllocatorService/CloseIO"
	SocketAllocatorService_CloseConsole_FullMethodName         = "/runm.v1.SocketAllocatorService/CloseConsole"
)

// SocketAllocatorServiceClient is the client API for SocketAllocatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocketAllocatorServiceClient interface {
	AllocateSockets(ctx context.Context, in *AllocateSocketsRequest, opts ...grpc.CallOption) (*AllocateSocketsResponse, error)
	AllocateSocketStream(ctx context.Context, in *AllocateSocketStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AllocateSocketStreamResponse], error)
	DialOpenListener(ctx context.Context, in *DialOpenListenerRequest, opts ...grpc.CallOption) (*DialOpenListenerResponse, error)
	// the same thing but with different name than "NewPipeIO"
	AllocateIO(ctx context.Context, in *AllocateIORequest, opts ...grpc.CallOption) (*AllocateIOResponse, error)
	// the same thing but with different name than "NewTempConsoleSocket"
	AllocateConsole(ctx context.Context, in *AllocateConsoleRequest, opts ...grpc.CallOption) (*AllocateConsoleResponse, error)
	BindConsoleToSocket(ctx context.Context, in *BindConsoleToSocketRequest, opts ...grpc.CallOption) (*BindConsoleToSocketResponse, error)
	BindIOToSockets(ctx context.Context, in *BindIOToSocketsRequest, opts ...grpc.CallOption) (*BindIOToSocketsResponse, error)
	CloseSocket(ctx context.Context, in *CloseSocketRequest, opts ...grpc.CallOption) (*CloseSocketResponse, error)
	CloseSockets(ctx context.Context, in *CloseSocketsRequest, opts ...grpc.CallOption) (*CloseSocketsResponse, error)
	CloseIO(ctx context.Context, in *CloseIORequest, opts ...grpc.CallOption) (*CloseIOResponse, error)
	CloseConsole(ctx context.Context, in *CloseConsoleRequest, opts ...grpc.CallOption) (*CloseConsoleResponse, error)
}

type socketAllocatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocketAllocatorServiceClient(cc grpc.ClientConnInterface) SocketAllocatorServiceClient {
	return &socketAllocatorServiceClient{cc}
}

func (c *socketAllocatorServiceClient) AllocateSockets(ctx context.Context, in *AllocateSocketsRequest, opts ...grpc.CallOption) (*AllocateSocketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllocateSocketsResponse)
	err := c.cc.Invoke(ctx, SocketAllocatorService_AllocateSockets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketAllocatorServiceClient) AllocateSocketStream(ctx context.Context, in *AllocateSocketStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AllocateSocketStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SocketAllocatorService_ServiceDesc.Streams[0], SocketAllocatorService_AllocateSocketStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AllocateSocketStreamRequest, AllocateSocketStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SocketAllocatorService_AllocateSocketStreamClient = grpc.ServerStreamingClient[AllocateSocketStreamResponse]

func (c *socketAllocatorServiceClient) DialOpenListener(ctx context.Context, in *DialOpenListenerRequest, opts ...grpc.CallOption) (*DialOpenListenerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DialOpenListenerResponse)
	err := c.cc.Invoke(ctx, SocketAllocatorService_DialOpenListener_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketAllocatorServiceClient) AllocateIO(ctx context.Context, in *AllocateIORequest, opts ...grpc.CallOption) (*AllocateIOResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllocateIOResponse)
	err := c.cc.Invoke(ctx, SocketAllocatorService_AllocateIO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketAllocatorServiceClient) AllocateConsole(ctx context.Context, in *AllocateConsoleRequest, opts ...grpc.CallOption) (*AllocateConsoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllocateConsoleResponse)
	err := c.cc.Invoke(ctx, SocketAllocatorService_AllocateConsole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketAllocatorServiceClient) BindConsoleToSocket(ctx context.Context, in *BindConsoleToSocketRequest, opts ...grpc.CallOption) (*BindConsoleToSocketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindConsoleToSocketResponse)
	err := c.cc.Invoke(ctx, SocketAllocatorService_BindConsoleToSocket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketAllocatorServiceClient) BindIOToSockets(ctx context.Context, in *BindIOToSocketsRequest, opts ...grpc.CallOption) (*BindIOToSocketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindIOToSocketsResponse)
	err := c.cc.Invoke(ctx, SocketAllocatorService_BindIOToSockets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketAllocatorServiceClient) CloseSocket(ctx context.Context, in *CloseSocketRequest, opts ...grpc.CallOption) (*CloseSocketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseSocketResponse)
	err := c.cc.Invoke(ctx, SocketAllocatorService_CloseSocket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketAllocatorServiceClient) CloseSockets(ctx context.Context, in *CloseSocketsRequest, opts ...grpc.CallOption) (*CloseSocketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseSocketsResponse)
	err := c.cc.Invoke(ctx, SocketAllocatorService_CloseSockets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketAllocatorServiceClient) CloseIO(ctx context.Context, in *CloseIORequest, opts ...grpc.CallOption) (*CloseIOResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseIOResponse)
	err := c.cc.Invoke(ctx, SocketAllocatorService_CloseIO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketAllocatorServiceClient) CloseConsole(ctx context.Context, in *CloseConsoleRequest, opts ...grpc.CallOption) (*CloseConsoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseConsoleResponse)
	err := c.cc.Invoke(ctx, SocketAllocatorService_CloseConsole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocketAllocatorServiceServer is the server API for SocketAllocatorService service.
// All implementations should embed UnimplementedSocketAllocatorServiceServer
// for forward compatibility.
type SocketAllocatorServiceServer interface {
	AllocateSockets(context.Context, *AllocateSocketsRequest) (*AllocateSocketsResponse, error)
	AllocateSocketStream(*AllocateSocketStreamRequest, grpc.ServerStreamingServer[AllocateSocketStreamResponse]) error
	DialOpenListener(context.Context, *DialOpenListenerRequest) (*DialOpenListenerResponse, error)
	// the same thing but with different name than "NewPipeIO"
	AllocateIO(context.Context, *AllocateIORequest) (*AllocateIOResponse, error)
	// the same thing but with different name than "NewTempConsoleSocket"
	AllocateConsole(context.Context, *AllocateConsoleRequest) (*AllocateConsoleResponse, error)
	BindConsoleToSocket(context.Context, *BindConsoleToSocketRequest) (*BindConsoleToSocketResponse, error)
	BindIOToSockets(context.Context, *BindIOToSocketsRequest) (*BindIOToSocketsResponse, error)
	CloseSocket(context.Context, *CloseSocketRequest) (*CloseSocketResponse, error)
	CloseSockets(context.Context, *CloseSocketsRequest) (*CloseSocketsResponse, error)
	CloseIO(context.Context, *CloseIORequest) (*CloseIOResponse, error)
	CloseConsole(context.Context, *CloseConsoleRequest) (*CloseConsoleResponse, error)
}

// UnimplementedSocketAllocatorServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSocketAllocatorServiceServer struct{}

func (UnimplementedSocketAllocatorServiceServer) AllocateSockets(context.Context, *AllocateSocketsRequest) (*AllocateSocketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateSockets not implemented")
}
func (UnimplementedSocketAllocatorServiceServer) AllocateSocketStream(*AllocateSocketStreamRequest, grpc.ServerStreamingServer[AllocateSocketStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AllocateSocketStream not implemented")
}
func (UnimplementedSocketAllocatorServiceServer) DialOpenListener(context.Context, *DialOpenListenerRequest) (*DialOpenListenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialOpenListener not implemented")
}
func (UnimplementedSocketAllocatorServiceServer) AllocateIO(context.Context, *AllocateIORequest) (*AllocateIOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateIO not implemented")
}
func (UnimplementedSocketAllocatorServiceServer) AllocateConsole(context.Context, *AllocateConsoleRequest) (*AllocateConsoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateConsole not implemented")
}
func (UnimplementedSocketAllocatorServiceServer) BindConsoleToSocket(context.Context, *BindConsoleToSocketRequest) (*BindConsoleToSocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindConsoleToSocket not implemented")
}
func (UnimplementedSocketAllocatorServiceServer) BindIOToSockets(context.Context, *BindIOToSocketsRequest) (*BindIOToSocketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindIOToSockets not implemented")
}
func (UnimplementedSocketAllocatorServiceServer) CloseSocket(context.Context, *CloseSocketRequest) (*CloseSocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSocket not implemented")
}
func (UnimplementedSocketAllocatorServiceServer) CloseSockets(context.Context, *CloseSocketsRequest) (*CloseSocketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSockets not implemented")
}
func (UnimplementedSocketAllocatorServiceServer) CloseIO(context.Context, *CloseIORequest) (*CloseIOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseIO not implemented")
}
func (UnimplementedSocketAllocatorServiceServer) CloseConsole(context.Context, *CloseConsoleRequest) (*CloseConsoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseConsole not implemented")
}
func (UnimplementedSocketAllocatorServiceServer) testEmbeddedByValue() {}

// UnsafeSocketAllocatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocketAllocatorServiceServer will
// result in compilation errors.
type UnsafeSocketAllocatorServiceServer interface {
	mustEmbedUnimplementedSocketAllocatorServiceServer()
}

func RegisterSocketAllocatorServiceServer(s grpc.ServiceRegistrar, srv SocketAllocatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedSocketAllocatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SocketAllocatorService_ServiceDesc, srv)
}

func _SocketAllocatorService_AllocateSockets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateSocketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketAllocatorServiceServer).AllocateSockets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocketAllocatorService_AllocateSockets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketAllocatorServiceServer).AllocateSockets(ctx, req.(*AllocateSocketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocketAllocatorService_AllocateSocketStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AllocateSocketStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SocketAllocatorServiceServer).AllocateSocketStream(m, &grpc.GenericServerStream[AllocateSocketStreamRequest, AllocateSocketStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SocketAllocatorService_AllocateSocketStreamServer = grpc.ServerStreamingServer[AllocateSocketStreamResponse]

func _SocketAllocatorService_DialOpenListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialOpenListenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketAllocatorServiceServer).DialOpenListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocketAllocatorService_DialOpenListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketAllocatorServiceServer).DialOpenListener(ctx, req.(*DialOpenListenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocketAllocatorService_AllocateIO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateIORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketAllocatorServiceServer).AllocateIO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocketAllocatorService_AllocateIO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketAllocatorServiceServer).AllocateIO(ctx, req.(*AllocateIORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocketAllocatorService_AllocateConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateConsoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketAllocatorServiceServer).AllocateConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocketAllocatorService_AllocateConsole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketAllocatorServiceServer).AllocateConsole(ctx, req.(*AllocateConsoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocketAllocatorService_BindConsoleToSocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindConsoleToSocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketAllocatorServiceServer).BindConsoleToSocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocketAllocatorService_BindConsoleToSocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketAllocatorServiceServer).BindConsoleToSocket(ctx, req.(*BindConsoleToSocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocketAllocatorService_BindIOToSockets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindIOToSocketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketAllocatorServiceServer).BindIOToSockets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocketAllocatorService_BindIOToSockets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketAllocatorServiceServer).BindIOToSockets(ctx, req.(*BindIOToSocketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocketAllocatorService_CloseSocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketAllocatorServiceServer).CloseSocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocketAllocatorService_CloseSocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketAllocatorServiceServer).CloseSocket(ctx, req.(*CloseSocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocketAllocatorService_CloseSockets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSocketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketAllocatorServiceServer).CloseSockets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocketAllocatorService_CloseSockets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketAllocatorServiceServer).CloseSockets(ctx, req.(*CloseSocketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocketAllocatorService_CloseIO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseIORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketAllocatorServiceServer).CloseIO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocketAllocatorService_CloseIO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketAllocatorServiceServer).CloseIO(ctx, req.(*CloseIORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocketAllocatorService_CloseConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseConsoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketAllocatorServiceServer).CloseConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocketAllocatorService_CloseConsole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketAllocatorServiceServer).CloseConsole(ctx, req.(*CloseConsoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SocketAllocatorService_ServiceDesc is the grpc.ServiceDesc for SocketAllocatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocketAllocatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runm.v1.SocketAllocatorService",
	HandlerType: (*SocketAllocatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateSockets",
			Handler:    _SocketAllocatorService_AllocateSockets_Handler,
		},
		{
			MethodName: "DialOpenListener",
			Handler:    _SocketAllocatorService_DialOpenListener_Handler,
		},
		{
			MethodName: "AllocateIO",
			Handler:    _SocketAllocatorService_AllocateIO_Handler,
		},
		{
			MethodName: "AllocateConsole",
			Handler:    _SocketAllocatorService_AllocateConsole_Handler,
		},
		{
			MethodName: "BindConsoleToSocket",
			Handler:    _SocketAllocatorService_BindConsoleToSocket_Handler,
		},
		{
			MethodName: "BindIOToSockets",
			Handler:    _SocketAllocatorService_BindIOToSockets_Handler,
		},
		{
			MethodName: "CloseSocket",
			Handler:    _SocketAllocatorService_CloseSocket_Handler,
		},
		{
			MethodName: "CloseSockets",
			Handler:    _SocketAllocatorService_CloseSockets_Handler,
		},
		{
			MethodName: "CloseIO",
			Handler:    _SocketAllocatorService_CloseIO_Handler,
		},
		{
			MethodName: "CloseConsole",
			Handler:    _SocketAllocatorService_CloseConsole_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AllocateSocketStream",
			Handler:       _SocketAllocatorService_AllocateSocketStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/socket.proto",
}
