// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: v1/prctl.proto
package runvv1

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
)

type TTRPCPrctlServiceService interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	ShareFrom(context.Context, *ShareFromRequest) (*ShareFromResponse, error)
}

func RegisterTTRPCPrctlServiceService(srv *ttrpc.Server, svc TTRPCPrctlServiceService) {
	srv.RegisterService("runv.v1.PrctlService", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"Create": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req CreateRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Create(ctx, &req)
			},
			"ShareFrom": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ShareFromRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ShareFrom(ctx, &req)
			},
		},
	})
}

type ttrpcprctlserviceClient struct {
	client *ttrpc.Client
}

func NewTTRPCPrctlServiceClient(client *ttrpc.Client) TTRPCPrctlServiceService {
	return &ttrpcprctlserviceClient{
		client: client,
	}
}

func (c *ttrpcprctlserviceClient) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	var resp CreateResponse
	if err := c.client.Call(ctx, "runv.v1.PrctlService", "Create", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpcprctlserviceClient) ShareFrom(ctx context.Context, req *ShareFromRequest) (*ShareFromResponse, error) {
	var resp ShareFromResponse
	if err := c.client.Call(ctx, "runv.v1.PrctlService", "ShareFrom", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
