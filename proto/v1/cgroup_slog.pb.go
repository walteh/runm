// Code generated by protoc-gen-slog-valuer. DO NOT EDIT.
//
// source: v1/cgroup.proto

package runmv1

import (
	slog "log/slog"
)

func (x *GetCgroupStatsRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}

func (x *GetCgroupStatsResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	if x.GetStats() != nil {
		if v, ok := interface{}(x.GetStats()).(slog.LogValuer); ok {
			attrs = append(attrs, slog.Attr{Key: "stats", Value: v.LogValue()})
		} else {
			attrs = append(attrs, slog.Any("stats", x.GetStats()))
		}
	}
	return slog.GroupValue(attrs...)
}

func (x *StreamCgroupEventsRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}

func (x *CgroupEvent) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 5)
	attrs = append(attrs, slog.Uint64("low", x.GetLow()))
	attrs = append(attrs, slog.Uint64("high", x.GetHigh()))
	attrs = append(attrs, slog.Uint64("max", x.GetMax()))
	attrs = append(attrs, slog.Uint64("oom", x.GetOom()))
	attrs = append(attrs, slog.Uint64("oom_kill", x.GetOomKill()))
	return slog.GroupValue(attrs...)
}

func (x *StreamCgroupEventsResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	if x.GetEvent() != nil {
		if v, ok := interface{}(x.GetEvent()).(slog.LogValuer); ok {
			attrs = append(attrs, slog.Attr{Key: "event", Value: v.LogValue()})
		} else {
			attrs = append(attrs, slog.Any("event", x.GetEvent()))
		}
	}
	return slog.GroupValue(attrs...)
}

func (x *ToggleAllControllersRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}

func (x *ToggleAllControllersResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}
