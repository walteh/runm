// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/console.proto

package runvv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlatformProxyService_CopyConsole_FullMethodName     = "/runv.v1.PlatformProxyService/CopyConsole"
	PlatformProxyService_ShutdownConsole_FullMethodName = "/runv.v1.PlatformProxyService/ShutdownConsole"
	PlatformProxyService_ClosePlatform_FullMethodName   = "/runv.v1.PlatformProxyService/ClosePlatform"
)

// PlatformProxyServiceClient is the client API for PlatformProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatformProxyServiceClient interface {
	CopyConsole(ctx context.Context, in *CopyConsoleRequest, opts ...grpc.CallOption) (*CopyConsoleResponse, error)
	ShutdownConsole(ctx context.Context, in *ShutdownConsoleRequest, opts ...grpc.CallOption) (*ShutdownConsoleResponse, error)
	ClosePlatform(ctx context.Context, in *ClosePlatformRequest, opts ...grpc.CallOption) (*ClosePlatformResponse, error)
}

type platformProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatformProxyServiceClient(cc grpc.ClientConnInterface) PlatformProxyServiceClient {
	return &platformProxyServiceClient{cc}
}

func (c *platformProxyServiceClient) CopyConsole(ctx context.Context, in *CopyConsoleRequest, opts ...grpc.CallOption) (*CopyConsoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyConsoleResponse)
	err := c.cc.Invoke(ctx, PlatformProxyService_CopyConsole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformProxyServiceClient) ShutdownConsole(ctx context.Context, in *ShutdownConsoleRequest, opts ...grpc.CallOption) (*ShutdownConsoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownConsoleResponse)
	err := c.cc.Invoke(ctx, PlatformProxyService_ShutdownConsole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformProxyServiceClient) ClosePlatform(ctx context.Context, in *ClosePlatformRequest, opts ...grpc.CallOption) (*ClosePlatformResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClosePlatformResponse)
	err := c.cc.Invoke(ctx, PlatformProxyService_ClosePlatform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatformProxyServiceServer is the server API for PlatformProxyService service.
// All implementations must embed UnimplementedPlatformProxyServiceServer
// for forward compatibility.
type PlatformProxyServiceServer interface {
	CopyConsole(context.Context, *CopyConsoleRequest) (*CopyConsoleResponse, error)
	ShutdownConsole(context.Context, *ShutdownConsoleRequest) (*ShutdownConsoleResponse, error)
	ClosePlatform(context.Context, *ClosePlatformRequest) (*ClosePlatformResponse, error)
	mustEmbedUnimplementedPlatformProxyServiceServer()
}

// UnimplementedPlatformProxyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlatformProxyServiceServer struct{}

func (UnimplementedPlatformProxyServiceServer) CopyConsole(context.Context, *CopyConsoleRequest) (*CopyConsoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyConsole not implemented")
}
func (UnimplementedPlatformProxyServiceServer) ShutdownConsole(context.Context, *ShutdownConsoleRequest) (*ShutdownConsoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownConsole not implemented")
}
func (UnimplementedPlatformProxyServiceServer) ClosePlatform(context.Context, *ClosePlatformRequest) (*ClosePlatformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePlatform not implemented")
}
func (UnimplementedPlatformProxyServiceServer) mustEmbedUnimplementedPlatformProxyServiceServer() {}
func (UnimplementedPlatformProxyServiceServer) testEmbeddedByValue()                              {}

// UnsafePlatformProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatformProxyServiceServer will
// result in compilation errors.
type UnsafePlatformProxyServiceServer interface {
	mustEmbedUnimplementedPlatformProxyServiceServer()
}

func RegisterPlatformProxyServiceServer(s grpc.ServiceRegistrar, srv PlatformProxyServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlatformProxyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlatformProxyService_ServiceDesc, srv)
}

func _PlatformProxyService_CopyConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyConsoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformProxyServiceServer).CopyConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformProxyService_CopyConsole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformProxyServiceServer).CopyConsole(ctx, req.(*CopyConsoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformProxyService_ShutdownConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownConsoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformProxyServiceServer).ShutdownConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformProxyService_ShutdownConsole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformProxyServiceServer).ShutdownConsole(ctx, req.(*ShutdownConsoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformProxyService_ClosePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClosePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformProxyServiceServer).ClosePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformProxyService_ClosePlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformProxyServiceServer).ClosePlatform(ctx, req.(*ClosePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlatformProxyService_ServiceDesc is the grpc.ServiceDesc for PlatformProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlatformProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runv.v1.PlatformProxyService",
	HandlerType: (*PlatformProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CopyConsole",
			Handler:    _PlatformProxyService_CopyConsole_Handler,
		},
		{
			MethodName: "ShutdownConsole",
			Handler:    _PlatformProxyService_ShutdownConsole_Handler,
		},
		{
			MethodName: "ClosePlatform",
			Handler:    _PlatformProxyService_ClosePlatform_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/console.proto",
}

const (
	ConsoleIOService_Read_FullMethodName  = "/runv.v1.ConsoleIOService/Read"
	ConsoleIOService_Write_FullMethodName = "/runv.v1.ConsoleIOService/Write"
)

// ConsoleIOServiceClient is the client API for ConsoleIOService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsoleIOServiceClient interface {
	Read(ctx context.Context, in *ConsoleReadRequest, opts ...grpc.CallOption) (*ConsoleReadResponse, error)
	Write(ctx context.Context, in *ConsoleWriteRequest, opts ...grpc.CallOption) (*ConsoleWriteResponse, error)
}

type consoleIOServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsoleIOServiceClient(cc grpc.ClientConnInterface) ConsoleIOServiceClient {
	return &consoleIOServiceClient{cc}
}

func (c *consoleIOServiceClient) Read(ctx context.Context, in *ConsoleReadRequest, opts ...grpc.CallOption) (*ConsoleReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsoleReadResponse)
	err := c.cc.Invoke(ctx, ConsoleIOService_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleIOServiceClient) Write(ctx context.Context, in *ConsoleWriteRequest, opts ...grpc.CallOption) (*ConsoleWriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsoleWriteResponse)
	err := c.cc.Invoke(ctx, ConsoleIOService_Write_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsoleIOServiceServer is the server API for ConsoleIOService service.
// All implementations must embed UnimplementedConsoleIOServiceServer
// for forward compatibility.
type ConsoleIOServiceServer interface {
	Read(context.Context, *ConsoleReadRequest) (*ConsoleReadResponse, error)
	Write(context.Context, *ConsoleWriteRequest) (*ConsoleWriteResponse, error)
	mustEmbedUnimplementedConsoleIOServiceServer()
}

// UnimplementedConsoleIOServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsoleIOServiceServer struct{}

func (UnimplementedConsoleIOServiceServer) Read(context.Context, *ConsoleReadRequest) (*ConsoleReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedConsoleIOServiceServer) Write(context.Context, *ConsoleWriteRequest) (*ConsoleWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedConsoleIOServiceServer) mustEmbedUnimplementedConsoleIOServiceServer() {}
func (UnimplementedConsoleIOServiceServer) testEmbeddedByValue()                          {}

// UnsafeConsoleIOServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsoleIOServiceServer will
// result in compilation errors.
type UnsafeConsoleIOServiceServer interface {
	mustEmbedUnimplementedConsoleIOServiceServer()
}

func RegisterConsoleIOServiceServer(s grpc.ServiceRegistrar, srv ConsoleIOServiceServer) {
	// If the following call pancis, it indicates UnimplementedConsoleIOServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsoleIOService_ServiceDesc, srv)
}

func _ConsoleIOService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsoleReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleIOServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleIOService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleIOServiceServer).Read(ctx, req.(*ConsoleReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleIOService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsoleWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleIOServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleIOService_Write_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleIOServiceServer).Write(ctx, req.(*ConsoleWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsoleIOService_ServiceDesc is the grpc.ServiceDesc for ConsoleIOService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsoleIOService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runv.v1.ConsoleIOService",
	HandlerType: (*ConsoleIOServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _ConsoleIOService_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _ConsoleIOService_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/console.proto",
}
