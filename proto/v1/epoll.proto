edition = "2023";

package runv.v1;

import "buf/validate/validate.proto";
import "google/protobuf/go_features.proto";

option features.(pb.go).api_level = API_OPAQUE;

service EpollerService {
	rpc Add(AddRequest) returns (AddResponse) {}


	rpc CloseConsole(CloseConsoleRequest) returns (CloseConsoleResponse) {}


	rpc Wait(WaitRequest) returns (stream WaitResponse) {}
}

message AddRequest {
	string session_id = 1 [
		(buf.validate.field).string.uuid = true,
		(buf.validate.field).cel         = {
			id:                      "session_id.not_empty"
			message:                 "session_id cannot be empty"
			expression:              "size(this) > 0"
		}
	];

	int32 console_id = 2 [
		(buf.validate.field).int32.gt = 0,
		(buf.validate.field).cel      = {
			id:                   "console_id.positive"
			message:              "console_id must be positive"
			expression:           "this > 0"
		}
	];

	int32 fd = 3 [
		(buf.validate.field).int32.gte = 0,
		(buf.validate.field).cel       = {
			id:                    "fd.non_negative"
			message:               "fd must be non-negative"
			expression:            "this >= 0"
		}
	];
}

message AddResponse {
	bool success = 1;

	string error = 2 [
		(buf.validate.field).string.max_len = 1024,
		(buf.validate.field).cel            = {
			id:                         "error.length_check"
			message:                    "error message too long"
			expression:                 "size(this) <= 1024"
		}
	];

	string proxy_console_address = 3 [
		(buf.validate.field).string.max_len = 1024,
		(buf.validate.field).cel            = {
			id:                         "proxy_address.format"
			message:                    "proxy address must be valid"
			expression:                 "this == '' || this.startsWith('unix://') || this.startsWith('tcp://')"
		}
	];
}

message WaitRequest {
	string session_id = 1 [
		(buf.validate.field).string.uuid = true,
		(buf.validate.field).cel         = {
			id:                      "session_id.not_empty"
			message:                 "session_id cannot be empty"
			expression:              "size(this) > 0"
		}
	];
}

message WaitResponse {
	string session_id = 1 [
		(buf.validate.field).string.uuid = true
	];

	repeated EpollEvent events = 2 [
		(buf.validate.field).repeated.max_items = 100,
		(buf.validate.field).cel                = {
			id:                             "events.reasonable_count"
			message:                        "too many events in single response"
			expression:                     "size(this) <= 100"
		}
	];
}

message CloseConsoleRequest {
	string session_id = 1 [
		(buf.validate.field).string.uuid = true,
		(buf.validate.field).cel         = {
			id:                      "session_id.not_empty"
			message:                 "session_id cannot be empty"
			expression:              "size(this) > 0"
		}
	];

	int32 console_id = 2 [
		(buf.validate.field).int32.gt = 0,
		(buf.validate.field).cel      = {
			id:                   "console_id.positive"
			message:              "console_id must be positive"
			expression:           "this > 0"
		}
	];
}

message CloseConsoleResponse {
	bool success = 1;

	string error = 2 [
		(buf.validate.field).string.max_len = 1024,
		(buf.validate.field).cel            = {
			id:                         "error.length_check"
			message:                    "error message too long"
			expression:                 "size(this) <= 1024"
		}
	];
}

message EpollEvent {
	int32 console_id = 1 [
		(buf.validate.field).int32.gt = 0,
		(buf.validate.field).cel      = {
			id:                   "console_id.positive"
			message:              "console_id must be positive"
			expression:           "this > 0"
		}
	];

	EpollEventType event_type = 2 [
		(buf.validate.field).enum.defined_only = true,
		(buf.validate.field).cel               = {
			id:                            "event_type.valid"
			message:                       "event_type must be valid"
			expression:                    "this != 0"
		}
	];

	string error = 3 [
		(buf.validate.field).string.max_len = 1024,
		(buf.validate.field).cel            = {
			id:                         "error.optional_length"
			message:                    "error message too long"
			expression:                 "size(this) <= 1024"
		}
	];
}

enum EpollEventType {
	EPOLL_EVENT_TYPE_UNSPECIFIED = 0;
	EPOLL_EVENT_TYPE_READ_READY  = 1;
	EPOLL_EVENT_TYPE_WRITE_READY = 2;
	EPOLL_EVENT_TYPE_ERROR       = 3;
	EPOLL_EVENT_TYPE_HANGUP      = 4;
}
