// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: v1/epoll.proto
package runvv1

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
)

type TTRPCEpollerServiceService interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	CloseConsole(context.Context, *CloseConsoleRequest) (*CloseConsoleResponse, error)
	Wait(context.Context, *WaitRequest, TTRPCEpollerService_WaitServer) error
}

type TTRPCEpollerService_WaitServer interface {
	Send(*WaitResponse) error
	ttrpc.StreamServer
}

type ttrpcepollerserviceWaitServer struct {
	ttrpc.StreamServer
}

func (x *ttrpcepollerserviceWaitServer) Send(m *WaitResponse) error {
	return x.StreamServer.SendMsg(m)
}

func RegisterTTRPCEpollerServiceService(srv *ttrpc.Server, svc TTRPCEpollerServiceService) {
	srv.RegisterService("runv.v1.EpollerService", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"Add": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req AddRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Add(ctx, &req)
			},
			"CloseConsole": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req CloseConsoleRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.CloseConsole(ctx, &req)
			},
		},
		Streams: map[string]ttrpc.Stream{
			"Wait": {
				Handler: func(ctx context.Context, stream ttrpc.StreamServer) (interface{}, error) {
					m := new(WaitRequest)
					if err := stream.RecvMsg(m); err != nil {
						return nil, err
					}
					return nil, svc.Wait(ctx, m, &ttrpcepollerserviceWaitServer{stream})
				},
				StreamingClient: false,
				StreamingServer: true,
			},
		},
	})
}

type TTRPCEpollerServiceClient interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	CloseConsole(context.Context, *CloseConsoleRequest) (*CloseConsoleResponse, error)
	Wait(context.Context, *WaitRequest) (TTRPCEpollerService_WaitClient, error)
}

type ttrpcepollerserviceClient struct {
	client *ttrpc.Client
}

func NewTTRPCEpollerServiceClient(client *ttrpc.Client) TTRPCEpollerServiceClient {
	return &ttrpcepollerserviceClient{
		client: client,
	}
}

func (c *ttrpcepollerserviceClient) Add(ctx context.Context, req *AddRequest) (*AddResponse, error) {
	var resp AddResponse
	if err := c.client.Call(ctx, "runv.v1.EpollerService", "Add", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpcepollerserviceClient) CloseConsole(ctx context.Context, req *CloseConsoleRequest) (*CloseConsoleResponse, error) {
	var resp CloseConsoleResponse
	if err := c.client.Call(ctx, "runv.v1.EpollerService", "CloseConsole", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpcepollerserviceClient) Wait(ctx context.Context, req *WaitRequest) (TTRPCEpollerService_WaitClient, error) {
	stream, err := c.client.NewStream(ctx, &ttrpc.StreamDesc{
		StreamingClient: false,
		StreamingServer: true,
	}, "runv.v1.EpollerService", "Wait", req)
	if err != nil {
		return nil, err
	}
	x := &ttrpcepollerserviceWaitClient{stream}
	return x, nil
}

type TTRPCEpollerService_WaitClient interface {
	Recv() (*WaitResponse, error)
	ttrpc.ClientStream
}

type ttrpcepollerserviceWaitClient struct {
	ttrpc.ClientStream
}

func (x *ttrpcepollerserviceWaitClient) Recv() (*WaitResponse, error) {
	m := new(WaitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}
