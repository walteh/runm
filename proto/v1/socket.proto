edition = "2023";

package runm.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/go_features.proto";

option features.(pb.go).api_level = API_OPAQUE;
option features.field_presence = IMPLICIT;  // makes everything by default required, for optional set to EXPLICIT

service SocketAllocatorService {
	// rpc AllocateSockets(AllocateSocketsRequest) returns (AllocateSocketsResponse) {}

	// rpc AllocateSocketStream(AllocateSocketStreamRequest) returns (stream AllocateSocketStreamResponse) {}

	rpc DialOpenListener(DialOpenListenerRequest) returns (DialOpenListenerResponse) {}


	// the same thing but with different name than "NewPipeIO"
	rpc AllocateIO(AllocateIORequest) returns (AllocateIOResponse) {}


	// the same thing but with different name than "NewTempConsoleSocket"
	rpc AllocateConsole(AllocateConsoleRequest) returns (AllocateConsoleResponse) {}


	rpc BindConsoleToSocket(BindConsoleToSocketRequest) returns (BindConsoleToSocketResponse) {}


	rpc BindIOToSockets(BindIOToSocketsRequest) returns (BindIOToSocketsResponse) {}


	rpc CloseSocket(CloseSocketRequest) returns (CloseSocketResponse) {}


	rpc CloseSockets(CloseSocketsRequest) returns (CloseSocketsResponse) {}


	rpc CloseIO(CloseIORequest) returns (CloseIOResponse) {}


	rpc CloseConsole(CloseConsoleRequest) returns (CloseConsoleResponse) {}

	// Window resize functionality for console references
	rpc ResizeConsole(ResizeConsoleRequest) returns (ResizeConsoleResponse) {}
}

message VsockPort {
	uint32 port = 1;
}

message UnixSocketPath {
	string path = 1;
}

message SocketType {
	oneof type {
		VsockPort      vsock_port       = 1;
		UnixSocketPath unix_socket_path = 2;
	}
}

message DialOpenListenerRequest {
	SocketType listening_on = 1;
}

message DialOpenListenerResponse {}

message AllocateSocketStreamRequest {}

message AllocateSocketStreamResponse {
	SocketType socket_type = 1;
}

message AllocateIORequest {
	bool  open_stdin  = 1;
	bool  open_stdout = 2;
	bool  open_stderr = 3;
	int32 io_uid      = 4;
	int32 io_gid      = 5;
}

message AllocateIOResponse {
	string io_reference_id = 1;
}

message AllocateConsoleRequest {}

message AllocateConsoleResponse {
	string console_reference_id = 1;
}

message CloseSocketsRequest {
	repeated SocketType socket_types = 1;
}

message CloseSocketsResponse {}

message AllocateSocketsRequest {
	uint32 count = 1;
}

message AllocateSocketsResponse {
	repeated SocketType socket_types = 1;
}

message BindIOToSocketsRequest {
	string     io_reference_id = 1;
	SocketType stdin_socket    = 2;
	SocketType stdout_socket   = 3;
	SocketType stderr_socket   = 4;
}

message BindIOToSocketsResponse {}

message BindConsoleToSocketRequest {
	string     console_reference_id = 1;
	SocketType socket_type          = 2;
}

message BindConsoleToSocketResponse {}

message AllocateSocketRequest {
	uint32 count = 1;
}

message AllocateSocketResponse {
	SocketType socket_type = 1;
}

message CloseSocketRequest {
	SocketType socket_type = 1;
}

message CloseSocketResponse {
	string go_error = 1;
}

message CloseIORequest {
	string io_reference_id = 1;
}

message CloseIOResponse {}

message CloseConsoleRequest {
	string console_reference_id = 1;
}

message CloseConsoleResponse {}

message WindowSize {
	uint32 width  = 1;
	uint32 height = 2;
	uint32 x      = 3;
	uint32 y      = 4;
}

message ResizeConsoleRequest {
	string console_reference_id = 1;
	WindowSize window_size = 2;
}

message ResizeConsoleResponse {}
