// Code generated by protoc-gen-go-opaque-helpers. DO NOT EDIT.
// source: v1/epoll.proto

package runvv1

import (
	protovalidate "buf.build/go/protovalidate"
)

// NewAddRequest creates a new AddRequest using the builder pattern
func NewAddRequest(f func(*AddRequest_builder)) *AddRequest {
	b := &AddRequest_builder{}
	f(b)
	return b.Build()
}

// NewAddRequestE creates a new AddRequest using the builder pattern with validation
func NewAddRequestE(f func(*AddRequest_builder)) (*AddRequest, error) {
	m := NewAddRequest(f)
	if err := protovalidate.Validate(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NewAddResponse creates a new AddResponse using the builder pattern
func NewAddResponse(f func(*AddResponse_builder)) *AddResponse {
	b := &AddResponse_builder{}
	f(b)
	return b.Build()
}

// NewAddResponseE creates a new AddResponse using the builder pattern with validation
func NewAddResponseE(f func(*AddResponse_builder)) (*AddResponse, error) {
	m := NewAddResponse(f)
	if err := protovalidate.Validate(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NewWaitRequest creates a new WaitRequest using the builder pattern
func NewWaitRequest(f func(*WaitRequest_builder)) *WaitRequest {
	b := &WaitRequest_builder{}
	f(b)
	return b.Build()
}

// NewWaitRequestE creates a new WaitRequest using the builder pattern with validation
func NewWaitRequestE(f func(*WaitRequest_builder)) (*WaitRequest, error) {
	m := NewWaitRequest(f)
	if err := protovalidate.Validate(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NewWaitResponse creates a new WaitResponse using the builder pattern
func NewWaitResponse(f func(*WaitResponse_builder)) *WaitResponse {
	b := &WaitResponse_builder{}
	f(b)
	return b.Build()
}

// NewWaitResponseE creates a new WaitResponse using the builder pattern with validation
func NewWaitResponseE(f func(*WaitResponse_builder)) (*WaitResponse, error) {
	m := NewWaitResponse(f)
	if err := protovalidate.Validate(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NewCloseConsoleRequest creates a new CloseConsoleRequest using the builder pattern
func NewCloseConsoleRequest(f func(*CloseConsoleRequest_builder)) *CloseConsoleRequest {
	b := &CloseConsoleRequest_builder{}
	f(b)
	return b.Build()
}

// NewCloseConsoleRequestE creates a new CloseConsoleRequest using the builder pattern with validation
func NewCloseConsoleRequestE(f func(*CloseConsoleRequest_builder)) (*CloseConsoleRequest, error) {
	m := NewCloseConsoleRequest(f)
	if err := protovalidate.Validate(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NewCloseConsoleResponse creates a new CloseConsoleResponse using the builder pattern
func NewCloseConsoleResponse(f func(*CloseConsoleResponse_builder)) *CloseConsoleResponse {
	b := &CloseConsoleResponse_builder{}
	f(b)
	return b.Build()
}

// NewCloseConsoleResponseE creates a new CloseConsoleResponse using the builder pattern with validation
func NewCloseConsoleResponseE(f func(*CloseConsoleResponse_builder)) (*CloseConsoleResponse, error) {
	m := NewCloseConsoleResponse(f)
	if err := protovalidate.Validate(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NewEpollEvent creates a new EpollEvent using the builder pattern
func NewEpollEvent(f func(*EpollEvent_builder)) *EpollEvent {
	b := &EpollEvent_builder{}
	f(b)
	return b.Build()
}

// NewEpollEventE creates a new EpollEvent using the builder pattern with validation
func NewEpollEventE(f func(*EpollEvent_builder)) (*EpollEvent, error) {
	m := NewEpollEvent(f)
	if err := protovalidate.Validate(m); err != nil {
		return nil, err
	}
	return m, nil
}
