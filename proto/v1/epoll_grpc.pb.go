// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/epoll.proto

package runvv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EpollerService_Add_FullMethodName          = "/runv.v1.EpollerService/Add"
	EpollerService_CloseConsole_FullMethodName = "/runv.v1.EpollerService/CloseConsole"
	EpollerService_Wait_FullMethodName         = "/runv.v1.EpollerService/Wait"
)

// EpollerServiceClient is the client API for EpollerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EpollerServiceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	CloseConsole(ctx context.Context, in *CloseConsoleRequest, opts ...grpc.CallOption) (*CloseConsoleResponse, error)
	Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WaitResponse], error)
}

type epollerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEpollerServiceClient(cc grpc.ClientConnInterface) EpollerServiceClient {
	return &epollerServiceClient{cc}
}

func (c *epollerServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, EpollerService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epollerServiceClient) CloseConsole(ctx context.Context, in *CloseConsoleRequest, opts ...grpc.CallOption) (*CloseConsoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseConsoleResponse)
	err := c.cc.Invoke(ctx, EpollerService_CloseConsole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *epollerServiceClient) Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WaitResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EpollerService_ServiceDesc.Streams[0], EpollerService_Wait_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WaitRequest, WaitResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EpollerService_WaitClient = grpc.ServerStreamingClient[WaitResponse]

// EpollerServiceServer is the server API for EpollerService service.
// All implementations must embed UnimplementedEpollerServiceServer
// for forward compatibility.
type EpollerServiceServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	CloseConsole(context.Context, *CloseConsoleRequest) (*CloseConsoleResponse, error)
	Wait(*WaitRequest, grpc.ServerStreamingServer[WaitResponse]) error
	mustEmbedUnimplementedEpollerServiceServer()
}

// UnimplementedEpollerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEpollerServiceServer struct{}

func (UnimplementedEpollerServiceServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedEpollerServiceServer) CloseConsole(context.Context, *CloseConsoleRequest) (*CloseConsoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseConsole not implemented")
}
func (UnimplementedEpollerServiceServer) Wait(*WaitRequest, grpc.ServerStreamingServer[WaitResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Wait not implemented")
}
func (UnimplementedEpollerServiceServer) mustEmbedUnimplementedEpollerServiceServer() {}
func (UnimplementedEpollerServiceServer) testEmbeddedByValue()                        {}

// UnsafeEpollerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EpollerServiceServer will
// result in compilation errors.
type UnsafeEpollerServiceServer interface {
	mustEmbedUnimplementedEpollerServiceServer()
}

func RegisterEpollerServiceServer(s grpc.ServiceRegistrar, srv EpollerServiceServer) {
	// If the following call pancis, it indicates UnimplementedEpollerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EpollerService_ServiceDesc, srv)
}

func _EpollerService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpollerServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpollerService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpollerServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpollerService_CloseConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseConsoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpollerServiceServer).CloseConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpollerService_CloseConsole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpollerServiceServer).CloseConsole(ctx, req.(*CloseConsoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpollerService_Wait_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WaitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EpollerServiceServer).Wait(m, &grpc.GenericServerStream[WaitRequest, WaitResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EpollerService_WaitServer = grpc.ServerStreamingServer[WaitResponse]

// EpollerService_ServiceDesc is the grpc.ServiceDesc for EpollerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EpollerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runv.v1.EpollerService",
	HandlerType: (*EpollerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _EpollerService_Add_Handler,
		},
		{
			MethodName: "CloseConsole",
			Handler:    _EpollerService_CloseConsole_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Wait",
			Handler:       _EpollerService_Wait_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/epoll.proto",
}
