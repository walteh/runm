// Code generated by protoc-gen-go-opaque-helpers. DO NOT EDIT.
// source: v1/event.proto

package runmv1

import (
	protovalidate "buf.build/go/protovalidate"
)

// NewReceiveEventsRequest creates a new ReceiveEventsRequest using the builder
func NewReceiveEventsRequest(b *ReceiveEventsRequest_builder) *ReceiveEventsRequest {
	return b.Build()
}

// NewReceiveEventsRequestE creates a new ReceiveEventsRequest using the builder with validation
func NewReceiveEventsRequestE(b *ReceiveEventsRequest_builder) (*ReceiveEventsRequest, error) {
	m := b.Build()
	if err := protovalidate.Validate(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NewPublishEventRequest creates a new PublishEventRequest using the builder
func NewPublishEventRequest(b *PublishEventRequest_builder) *PublishEventRequest {
	return b.Build()
}

// NewPublishEventRequestE creates a new PublishEventRequest using the builder with validation
func NewPublishEventRequestE(b *PublishEventRequest_builder) (*PublishEventRequest, error) {
	m := b.Build()
	if err := protovalidate.Validate(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NewPublishEventResponse creates a new PublishEventResponse using the builder
func NewPublishEventResponse(b *PublishEventResponse_builder) *PublishEventResponse {
	return b.Build()
}

// NewPublishEventResponseE creates a new PublishEventResponse using the builder with validation
func NewPublishEventResponseE(b *PublishEventResponse_builder) (*PublishEventResponse, error) {
	m := b.Build()
	if err := protovalidate.Validate(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NewPublishEventsResponse creates a new PublishEventsResponse using the builder
func NewPublishEventsResponse(b *PublishEventsResponse_builder) *PublishEventsResponse {
	return b.Build()
}

// NewPublishEventsResponseE creates a new PublishEventsResponse using the builder with validation
func NewPublishEventsResponseE(b *PublishEventsResponse_builder) (*PublishEventsResponse, error) {
	m := b.Build()
	if err := protovalidate.Validate(m); err != nil {
		return nil, err
	}
	return m, nil
}
