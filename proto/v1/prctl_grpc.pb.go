// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/prctl.proto

package runmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PrctlService_Create_FullMethodName    = "/runm.v1.PrctlService/Create"
	PrctlService_ShareFrom_FullMethodName = "/runm.v1.PrctlService/ShareFrom"
)

// PrctlServiceClient is the client API for PrctlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrctlServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	ShareFrom(ctx context.Context, in *ShareFromRequest, opts ...grpc.CallOption) (*ShareFromResponse, error)
}

type prctlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrctlServiceClient(cc grpc.ClientConnInterface) PrctlServiceClient {
	return &prctlServiceClient{cc}
}

func (c *prctlServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, PrctlService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prctlServiceClient) ShareFrom(ctx context.Context, in *ShareFromRequest, opts ...grpc.CallOption) (*ShareFromResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShareFromResponse)
	err := c.cc.Invoke(ctx, PrctlService_ShareFrom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrctlServiceServer is the server API for PrctlService service.
// All implementations should embed UnimplementedPrctlServiceServer
// for forward compatibility.
type PrctlServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	ShareFrom(context.Context, *ShareFromRequest) (*ShareFromResponse, error)
}

// UnimplementedPrctlServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPrctlServiceServer struct{}

func (UnimplementedPrctlServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPrctlServiceServer) ShareFrom(context.Context, *ShareFromRequest) (*ShareFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFrom not implemented")
}
func (UnimplementedPrctlServiceServer) testEmbeddedByValue() {}

// UnsafePrctlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrctlServiceServer will
// result in compilation errors.
type UnsafePrctlServiceServer interface {
	mustEmbedUnimplementedPrctlServiceServer()
}

func RegisterPrctlServiceServer(s grpc.ServiceRegistrar, srv PrctlServiceServer) {
	// If the following call pancis, it indicates UnimplementedPrctlServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PrctlService_ServiceDesc, srv)
}

func _PrctlService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrctlServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrctlService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrctlServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrctlService_ShareFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrctlServiceServer).ShareFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrctlService_ShareFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrctlServiceServer).ShareFrom(ctx, req.(*ShareFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrctlService_ServiceDesc is the grpc.ServiceDesc for PrctlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrctlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runm.v1.PrctlService",
	HandlerType: (*PrctlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PrctlService_Create_Handler,
		},
		{
			MethodName: "ShareFrom",
			Handler:    _PrctlService_ShareFrom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/prctl.proto",
}
