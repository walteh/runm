// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/simple_console.proto

package runvv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SimpleConsoleService_StreamConsole_FullMethodName   = "/runv.v1.SimpleConsoleService/StreamConsole"
	SimpleConsoleService_CopyConsole_FullMethodName     = "/runv.v1.SimpleConsoleService/CopyConsole"
	SimpleConsoleService_ShutdownConsole_FullMethodName = "/runv.v1.SimpleConsoleService/ShutdownConsole"
	SimpleConsoleService_ClosePlatform_FullMethodName   = "/runv.v1.SimpleConsoleService/ClosePlatform"
)

// SimpleConsoleServiceClient is the client API for SimpleConsoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Simple Console Service - Single service with bidirectional streaming
// Based on research suggesting gRPC bidirectional streams + PTY libraries
type SimpleConsoleServiceClient interface {
	// StreamConsole provides bidirectional streaming for PTY I/O and control
	StreamConsole(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ConsoleChunk, ConsoleChunk], error)
	// Platform operations (similar to current interface but simpler)
	CopyConsole(ctx context.Context, in *SimpleCopyConsoleRequest, opts ...grpc.CallOption) (*SimpleCopyConsoleResponse, error)
	ShutdownConsole(ctx context.Context, in *SimpleShutdownConsoleRequest, opts ...grpc.CallOption) (*SimpleShutdownConsoleResponse, error)
	ClosePlatform(ctx context.Context, in *SimpleClosePlatformRequest, opts ...grpc.CallOption) (*SimpleClosePlatformResponse, error)
}

type simpleConsoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleConsoleServiceClient(cc grpc.ClientConnInterface) SimpleConsoleServiceClient {
	return &simpleConsoleServiceClient{cc}
}

func (c *simpleConsoleServiceClient) StreamConsole(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ConsoleChunk, ConsoleChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SimpleConsoleService_ServiceDesc.Streams[0], SimpleConsoleService_StreamConsole_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConsoleChunk, ConsoleChunk]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SimpleConsoleService_StreamConsoleClient = grpc.BidiStreamingClient[ConsoleChunk, ConsoleChunk]

func (c *simpleConsoleServiceClient) CopyConsole(ctx context.Context, in *SimpleCopyConsoleRequest, opts ...grpc.CallOption) (*SimpleCopyConsoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleCopyConsoleResponse)
	err := c.cc.Invoke(ctx, SimpleConsoleService_CopyConsole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleConsoleServiceClient) ShutdownConsole(ctx context.Context, in *SimpleShutdownConsoleRequest, opts ...grpc.CallOption) (*SimpleShutdownConsoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleShutdownConsoleResponse)
	err := c.cc.Invoke(ctx, SimpleConsoleService_ShutdownConsole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleConsoleServiceClient) ClosePlatform(ctx context.Context, in *SimpleClosePlatformRequest, opts ...grpc.CallOption) (*SimpleClosePlatformResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleClosePlatformResponse)
	err := c.cc.Invoke(ctx, SimpleConsoleService_ClosePlatform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleConsoleServiceServer is the server API for SimpleConsoleService service.
// All implementations must embed UnimplementedSimpleConsoleServiceServer
// for forward compatibility.
//
// Simple Console Service - Single service with bidirectional streaming
// Based on research suggesting gRPC bidirectional streams + PTY libraries
type SimpleConsoleServiceServer interface {
	// StreamConsole provides bidirectional streaming for PTY I/O and control
	StreamConsole(grpc.BidiStreamingServer[ConsoleChunk, ConsoleChunk]) error
	// Platform operations (similar to current interface but simpler)
	CopyConsole(context.Context, *SimpleCopyConsoleRequest) (*SimpleCopyConsoleResponse, error)
	ShutdownConsole(context.Context, *SimpleShutdownConsoleRequest) (*SimpleShutdownConsoleResponse, error)
	ClosePlatform(context.Context, *SimpleClosePlatformRequest) (*SimpleClosePlatformResponse, error)
	mustEmbedUnimplementedSimpleConsoleServiceServer()
}

// UnimplementedSimpleConsoleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSimpleConsoleServiceServer struct{}

func (UnimplementedSimpleConsoleServiceServer) StreamConsole(grpc.BidiStreamingServer[ConsoleChunk, ConsoleChunk]) error {
	return status.Errorf(codes.Unimplemented, "method StreamConsole not implemented")
}
func (UnimplementedSimpleConsoleServiceServer) CopyConsole(context.Context, *SimpleCopyConsoleRequest) (*SimpleCopyConsoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyConsole not implemented")
}
func (UnimplementedSimpleConsoleServiceServer) ShutdownConsole(context.Context, *SimpleShutdownConsoleRequest) (*SimpleShutdownConsoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownConsole not implemented")
}
func (UnimplementedSimpleConsoleServiceServer) ClosePlatform(context.Context, *SimpleClosePlatformRequest) (*SimpleClosePlatformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePlatform not implemented")
}
func (UnimplementedSimpleConsoleServiceServer) mustEmbedUnimplementedSimpleConsoleServiceServer() {}
func (UnimplementedSimpleConsoleServiceServer) testEmbeddedByValue()                              {}

// UnsafeSimpleConsoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleConsoleServiceServer will
// result in compilation errors.
type UnsafeSimpleConsoleServiceServer interface {
	mustEmbedUnimplementedSimpleConsoleServiceServer()
}

func RegisterSimpleConsoleServiceServer(s grpc.ServiceRegistrar, srv SimpleConsoleServiceServer) {
	// If the following call pancis, it indicates UnimplementedSimpleConsoleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SimpleConsoleService_ServiceDesc, srv)
}

func _SimpleConsoleService_StreamConsole_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleConsoleServiceServer).StreamConsole(&grpc.GenericServerStream[ConsoleChunk, ConsoleChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SimpleConsoleService_StreamConsoleServer = grpc.BidiStreamingServer[ConsoleChunk, ConsoleChunk]

func _SimpleConsoleService_CopyConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleCopyConsoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleConsoleServiceServer).CopyConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleConsoleService_CopyConsole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleConsoleServiceServer).CopyConsole(ctx, req.(*SimpleCopyConsoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleConsoleService_ShutdownConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleShutdownConsoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleConsoleServiceServer).ShutdownConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleConsoleService_ShutdownConsole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleConsoleServiceServer).ShutdownConsole(ctx, req.(*SimpleShutdownConsoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleConsoleService_ClosePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleClosePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleConsoleServiceServer).ClosePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleConsoleService_ClosePlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleConsoleServiceServer).ClosePlatform(ctx, req.(*SimpleClosePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SimpleConsoleService_ServiceDesc is the grpc.ServiceDesc for SimpleConsoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleConsoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runv.v1.SimpleConsoleService",
	HandlerType: (*SimpleConsoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CopyConsole",
			Handler:    _SimpleConsoleService_CopyConsole_Handler,
		},
		{
			MethodName: "ShutdownConsole",
			Handler:    _SimpleConsoleService_ShutdownConsole_Handler,
		},
		{
			MethodName: "ClosePlatform",
			Handler:    _SimpleConsoleService_ClosePlatform_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamConsole",
			Handler:       _SimpleConsoleService_StreamConsole_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/simple_console.proto",
}
