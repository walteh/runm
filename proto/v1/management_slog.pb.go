// Code generated by protoc-gen-slog-valuer. DO NOT EDIT.
//
// source: v1/management.proto

package runmv1

import (
	fmt "fmt"
	slog "log/slog"
)

func (x *GuestTimeSyncRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 2)
	attrs = append(attrs, slog.Uint64("unix_time_ns", x.GetUnixTimeNs()))
	attrs = append(attrs, slog.String("timezone", x.GetTimezone()))
	return slog.GroupValue(attrs...)
}

func (x *GuestTimeSyncResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.Uint64("previous_time_ns", x.GetPreviousTimeNs()))
	return slog.GroupValue(attrs...)
}

func (x *GuestReadinessRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}

func (x *GuestReadinessResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 1)
	attrs = append(attrs, slog.Bool("ready", x.GetReady()))
	return slog.GroupValue(attrs...)
}

func (x *GuestRunCommandRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 6)
	attrs = append(attrs, slog.Any("stdin", x.GetStdin()))
	attrs = append(attrs, slog.String("argc", x.GetArgc()))
	if len(x.GetArgv()) != 0 {
		attrs2 := make([]slog.Attr, 0, len(x.GetArgv()))
		for i, v := range x.GetArgv() {
			attrs2 = append(attrs2, slog.String(fmt.Sprintf("%d", i), v))
		}
		attrs = append(attrs, slog.Any("argv", attrs2))
	}
	if len(x.GetEnvVars()) != 0 {
		attrs3 := make([]slog.Attr, 0, len(x.GetEnvVars()))
		for k, v := range x.GetEnvVars() {
			attrs3 = append(attrs3, slog.String(fmt.Sprintf("%v", k), v))
		}
		attrs = append(attrs, slog.Any("env_vars", attrs3))
	}
	attrs = append(attrs, slog.String("chroot", x.GetChroot()))
	attrs = append(attrs, slog.String("cwd", x.GetCwd()))
	return slog.GroupValue(attrs...)
}

func (x *GuestRunCommandResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 3)
	attrs = append(attrs, slog.Any("stdout", x.GetStdout()))
	attrs = append(attrs, slog.Any("stderr", x.GetStderr()))
	attrs = append(attrs, slog.Int64("exit_code", int64(x.GetExitCode())))
	return slog.GroupValue(attrs...)
}
