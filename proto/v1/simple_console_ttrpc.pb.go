// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: v1/simple_console.proto
package runvv1

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
)

type TTRPCSimpleConsoleServiceService interface {
	StreamConsole(context.Context, TTRPCSimpleConsoleService_StreamConsoleServer) error
	CopyConsole(context.Context, *SimpleCopyConsoleRequest) (*SimpleCopyConsoleResponse, error)
	ShutdownConsole(context.Context, *SimpleShutdownConsoleRequest) (*SimpleShutdownConsoleResponse, error)
	ClosePlatform(context.Context, *SimpleClosePlatformRequest) (*SimpleClosePlatformResponse, error)
}

type TTRPCSimpleConsoleService_StreamConsoleServer interface {
	Send(*ConsoleChunk) error
	Recv() (*ConsoleChunk, error)
	ttrpc.StreamServer
}

type ttrpcsimpleconsoleserviceStreamConsoleServer struct {
	ttrpc.StreamServer
}

func (x *ttrpcsimpleconsoleserviceStreamConsoleServer) Send(m *ConsoleChunk) error {
	return x.StreamServer.SendMsg(m)
}

func (x *ttrpcsimpleconsoleserviceStreamConsoleServer) Recv() (*ConsoleChunk, error) {
	m := new(ConsoleChunk)
	if err := x.StreamServer.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func RegisterTTRPCSimpleConsoleServiceService(srv *ttrpc.Server, svc TTRPCSimpleConsoleServiceService) {
	srv.RegisterService("runv.v1.SimpleConsoleService", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"CopyConsole": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req SimpleCopyConsoleRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.CopyConsole(ctx, &req)
			},
			"ShutdownConsole": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req SimpleShutdownConsoleRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ShutdownConsole(ctx, &req)
			},
			"ClosePlatform": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req SimpleClosePlatformRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ClosePlatform(ctx, &req)
			},
		},
		Streams: map[string]ttrpc.Stream{
			"StreamConsole": {
				Handler: func(ctx context.Context, stream ttrpc.StreamServer) (interface{}, error) {
					return nil, svc.StreamConsole(ctx, &ttrpcsimpleconsoleserviceStreamConsoleServer{stream})
				},
				StreamingClient: true,
				StreamingServer: true,
			},
		},
	})
}

type TTRPCSimpleConsoleServiceClient interface {
	StreamConsole(context.Context) (TTRPCSimpleConsoleService_StreamConsoleClient, error)
	CopyConsole(context.Context, *SimpleCopyConsoleRequest) (*SimpleCopyConsoleResponse, error)
	ShutdownConsole(context.Context, *SimpleShutdownConsoleRequest) (*SimpleShutdownConsoleResponse, error)
	ClosePlatform(context.Context, *SimpleClosePlatformRequest) (*SimpleClosePlatformResponse, error)
}

type ttrpcsimpleconsoleserviceClient struct {
	client *ttrpc.Client
}

func NewTTRPCSimpleConsoleServiceClient(client *ttrpc.Client) TTRPCSimpleConsoleServiceClient {
	return &ttrpcsimpleconsoleserviceClient{
		client: client,
	}
}

func (c *ttrpcsimpleconsoleserviceClient) StreamConsole(ctx context.Context) (TTRPCSimpleConsoleService_StreamConsoleClient, error) {
	stream, err := c.client.NewStream(ctx, &ttrpc.StreamDesc{
		StreamingClient: true,
		StreamingServer: true,
	}, "runv.v1.SimpleConsoleService", "StreamConsole", nil)
	if err != nil {
		return nil, err
	}
	x := &ttrpcsimpleconsoleserviceStreamConsoleClient{stream}
	return x, nil
}

type TTRPCSimpleConsoleService_StreamConsoleClient interface {
	Send(*ConsoleChunk) error
	Recv() (*ConsoleChunk, error)
	ttrpc.ClientStream
}

type ttrpcsimpleconsoleserviceStreamConsoleClient struct {
	ttrpc.ClientStream
}

func (x *ttrpcsimpleconsoleserviceStreamConsoleClient) Send(m *ConsoleChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ttrpcsimpleconsoleserviceStreamConsoleClient) Recv() (*ConsoleChunk, error) {
	m := new(ConsoleChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ttrpcsimpleconsoleserviceClient) CopyConsole(ctx context.Context, req *SimpleCopyConsoleRequest) (*SimpleCopyConsoleResponse, error) {
	var resp SimpleCopyConsoleResponse
	if err := c.client.Call(ctx, "runv.v1.SimpleConsoleService", "CopyConsole", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpcsimpleconsoleserviceClient) ShutdownConsole(ctx context.Context, req *SimpleShutdownConsoleRequest) (*SimpleShutdownConsoleResponse, error) {
	var resp SimpleShutdownConsoleResponse
	if err := c.client.Call(ctx, "runv.v1.SimpleConsoleService", "ShutdownConsole", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpcsimpleconsoleserviceClient) ClosePlatform(ctx context.Context, req *SimpleClosePlatformRequest) (*SimpleClosePlatformResponse, error) {
	var resp SimpleClosePlatformResponse
	if err := c.client.Call(ctx, "runv.v1.SimpleConsoleService", "ClosePlatform", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
