// Code generated by protoc-gen-go-slog. DO NOT EDIT.
//
// source: v1/host.proto

package runmv1

import (
	fmt "fmt"
	slog "log/slog"
)

func (x *ForkExecProxyRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 4)
	attrs = append(attrs, slog.String("argc", x.GetArgc()))
	if len(x.GetArgv()) != 0 {
		attrs1 := make([]slog.Attr, 0, len(x.GetArgv()))
		for i, v := range x.GetArgv() {
			attrs1 = append(attrs1, slog.String(fmt.Sprintf("%d", i), v))
		}
		attrs = append(attrs, slog.Any("argv", attrs1))
	}
	if len(x.GetEnv()) != 0 {
		attrs2 := make([]slog.Attr, 0, len(x.GetEnv()))
		for i, v := range x.GetEnv() {
			attrs2 = append(attrs2, slog.String(fmt.Sprintf("%d", i), v))
		}
		attrs = append(attrs, slog.Any("env", attrs2))
	}
	attrs = append(attrs, slog.Any("stdin", x.GetStdin()))
	return slog.GroupValue(attrs...)
}

func (x *ForkExecProxyResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 3)
	attrs = append(attrs, slog.Any("stdout", x.GetStdout()))
	attrs = append(attrs, slog.Any("stderr", x.GetStderr()))
	attrs = append(attrs, slog.Int64("exit_code", int64(x.GetExitCode())))
	return slog.GroupValue(attrs...)
}
