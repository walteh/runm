// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: devlog/v1/devlog.proto

package devlogv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DevlogService_Log_FullMethodName = "/runm.devlog.v1.DevlogService/Log"
)

// DevlogServiceClient is the client API for DevlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Devlog service for managing debug targets
type DevlogServiceClient interface {
	// Register a new debug target
	Log(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LogRequest, LogResponse], error)
}

type devlogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDevlogServiceClient(cc grpc.ClientConnInterface) DevlogServiceClient {
	return &devlogServiceClient{cc}
}

func (c *devlogServiceClient) Log(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LogRequest, LogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DevlogService_ServiceDesc.Streams[0], DevlogService_Log_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogRequest, LogResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DevlogService_LogClient = grpc.BidiStreamingClient[LogRequest, LogResponse]

// DevlogServiceServer is the server API for DevlogService service.
// All implementations should embed UnimplementedDevlogServiceServer
// for forward compatibility.
//
// Devlog service for managing debug targets
type DevlogServiceServer interface {
	// Register a new debug target
	Log(grpc.BidiStreamingServer[LogRequest, LogResponse]) error
}

// UnimplementedDevlogServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDevlogServiceServer struct{}

func (UnimplementedDevlogServiceServer) Log(grpc.BidiStreamingServer[LogRequest, LogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedDevlogServiceServer) testEmbeddedByValue() {}

// UnsafeDevlogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevlogServiceServer will
// result in compilation errors.
type UnsafeDevlogServiceServer interface {
	mustEmbedUnimplementedDevlogServiceServer()
}

func RegisterDevlogServiceServer(s grpc.ServiceRegistrar, srv DevlogServiceServer) {
	// If the following call pancis, it indicates UnimplementedDevlogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DevlogService_ServiceDesc, srv)
}

func _DevlogService_Log_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DevlogServiceServer).Log(&grpc.GenericServerStream[LogRequest, LogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DevlogService_LogServer = grpc.BidiStreamingServer[LogRequest, LogResponse]

// DevlogService_ServiceDesc is the grpc.ServiceDesc for DevlogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DevlogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runm.devlog.v1.DevlogService",
	HandlerType: (*DevlogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Log",
			Handler:       _DevlogService_Log_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "devlog/v1/devlog.proto",
}
