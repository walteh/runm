// Code generated by protoc-gen-go-slog. DO NOT EDIT.
//
// source: devlog/v1/devlog.proto

package devlogv1

import (
	slog "log/slog"
)

func (x *StructuredLog) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}

func (x *RawLog) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}

func (x *LogRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 2)
	// Handle oneof field: Log
	switch x.WhichLog() {
	case LogRequest_Structured_case:
		if msgValue, ok := interface{}(x.GetStructured()).(slog.LogValuer); ok {
			attrs = append(attrs, slog.Attr{Key: "structured", Value: msgValue.LogValue()})
		} else {
			attrs = append(attrs, slog.Any("structured", x.GetStructured()))
		}
	case LogRequest_Raw_case:
		if msgValue, ok := interface{}(x.GetRaw()).(slog.LogValuer); ok {
			attrs = append(attrs, slog.Attr{Key: "raw", Value: msgValue.LogValue()})
		} else {
			attrs = append(attrs, slog.Any("raw", x.GetRaw()))
		}
	}
	return slog.GroupValue(attrs...)
}

func (x *LogResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 0)
	return slog.GroupValue(attrs...)
}
