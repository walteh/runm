// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: vmm/v1/guest_management.proto

package vmmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GuestManagementService_GuestTimeSync_FullMethodName   = "/runm.vmm.v1.GuestManagementService/GuestTimeSync"
	GuestManagementService_GuestReadiness_FullMethodName  = "/runm.vmm.v1.GuestManagementService/GuestReadiness"
	GuestManagementService_GuestRunCommand_FullMethodName = "/runm.vmm.v1.GuestManagementService/GuestRunCommand"
)

// GuestManagementServiceClient is the client API for GuestManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuestManagementServiceClient interface {
	GuestTimeSync(ctx context.Context, in *GuestTimeSyncRequest, opts ...grpc.CallOption) (*GuestTimeSyncResponse, error)
	GuestReadiness(ctx context.Context, in *GuestReadinessRequest, opts ...grpc.CallOption) (*GuestReadinessResponse, error)
	GuestRunCommand(ctx context.Context, in *GuestRunCommandRequest, opts ...grpc.CallOption) (*GuestRunCommandResponse, error)
}

type guestManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGuestManagementServiceClient(cc grpc.ClientConnInterface) GuestManagementServiceClient {
	return &guestManagementServiceClient{cc}
}

func (c *guestManagementServiceClient) GuestTimeSync(ctx context.Context, in *GuestTimeSyncRequest, opts ...grpc.CallOption) (*GuestTimeSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuestTimeSyncResponse)
	err := c.cc.Invoke(ctx, GuestManagementService_GuestTimeSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestManagementServiceClient) GuestReadiness(ctx context.Context, in *GuestReadinessRequest, opts ...grpc.CallOption) (*GuestReadinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuestReadinessResponse)
	err := c.cc.Invoke(ctx, GuestManagementService_GuestReadiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestManagementServiceClient) GuestRunCommand(ctx context.Context, in *GuestRunCommandRequest, opts ...grpc.CallOption) (*GuestRunCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuestRunCommandResponse)
	err := c.cc.Invoke(ctx, GuestManagementService_GuestRunCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuestManagementServiceServer is the server API for GuestManagementService service.
// All implementations should embed UnimplementedGuestManagementServiceServer
// for forward compatibility.
type GuestManagementServiceServer interface {
	GuestTimeSync(context.Context, *GuestTimeSyncRequest) (*GuestTimeSyncResponse, error)
	GuestReadiness(context.Context, *GuestReadinessRequest) (*GuestReadinessResponse, error)
	GuestRunCommand(context.Context, *GuestRunCommandRequest) (*GuestRunCommandResponse, error)
}

// UnimplementedGuestManagementServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGuestManagementServiceServer struct{}

func (UnimplementedGuestManagementServiceServer) GuestTimeSync(context.Context, *GuestTimeSyncRequest) (*GuestTimeSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuestTimeSync not implemented")
}
func (UnimplementedGuestManagementServiceServer) GuestReadiness(context.Context, *GuestReadinessRequest) (*GuestReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuestReadiness not implemented")
}
func (UnimplementedGuestManagementServiceServer) GuestRunCommand(context.Context, *GuestRunCommandRequest) (*GuestRunCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuestRunCommand not implemented")
}
func (UnimplementedGuestManagementServiceServer) testEmbeddedByValue() {}

// UnsafeGuestManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuestManagementServiceServer will
// result in compilation errors.
type UnsafeGuestManagementServiceServer interface {
	mustEmbedUnimplementedGuestManagementServiceServer()
}

func RegisterGuestManagementServiceServer(s grpc.ServiceRegistrar, srv GuestManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedGuestManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GuestManagementService_ServiceDesc, srv)
}

func _GuestManagementService_GuestTimeSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuestTimeSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestManagementServiceServer).GuestTimeSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuestManagementService_GuestTimeSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestManagementServiceServer).GuestTimeSync(ctx, req.(*GuestTimeSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestManagementService_GuestReadiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuestReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestManagementServiceServer).GuestReadiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuestManagementService_GuestReadiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestManagementServiceServer).GuestReadiness(ctx, req.(*GuestReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestManagementService_GuestRunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuestRunCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestManagementServiceServer).GuestRunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuestManagementService_GuestRunCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestManagementServiceServer).GuestRunCommand(ctx, req.(*GuestRunCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GuestManagementService_ServiceDesc is the grpc.ServiceDesc for GuestManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuestManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runm.vmm.v1.GuestManagementService",
	HandlerType: (*GuestManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GuestTimeSync",
			Handler:    _GuestManagementService_GuestTimeSync_Handler,
		},
		{
			MethodName: "GuestReadiness",
			Handler:    _GuestManagementService_GuestReadiness_Handler,
		},
		{
			MethodName: "GuestRunCommand",
			Handler:    _GuestManagementService_GuestRunCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vmm/v1/guest_management.proto",
}
