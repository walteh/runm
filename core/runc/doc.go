package runc

// this package is intended to replicate the functionality of the go-runc package
// but when a shim (the caller/client) is on a host and the runc binary is on a
// guest, we can't use the go-runc package directly.
//
// in the 'library' package, we define an interface that mirrors the functionality
// of the go-runc package. Here we also define a struct that implements the
// library interface using the go-runc package. This struct is used on the guest (server)
// to interact with the runc service.
//
// in the 'client' package, we define a client that can be used to interact with
// the runc service. It implements the library interface and is used by the shim
// to interact with the runc service.
//
// the runc flow where everything is on the host looks like this:
// host: containerd -> runc-shim -> go-runc -> runc binary
//
// in comparison, the runm flow enabled by this package looks like this:
// host: containerd -> runm-shim -> [runc grpc client] ~~~(vsock)~~~>
// guest: 	~~>	[runc grpc server] -> go-runc -> runc binary
//
// testing notes:
// while the client can be tested on non-linux systems, the server must be tested
// on linux. This is because the server uses the go-runc package to interact with
// the runc binary, and the go-runc package is only supported on linux.
//
// to test the server, we can use the bufconn package to create a fake connection
// to the server and a mock runc client, generated by mockery inside the gen/mocks folder.

// func (x *RuncIO) LogValue() slog.Value {
// 	if x == nil {
// 		return slog.AnyValue(nil)
// 	}
// 	attrs := make([]slog.Attr, 0, 2)
// 	// Handle oneof field: Io
// 	switch  x.WhichIo() {
// 	case RuncIO_Vsock_case:
// 		if msgValue, ok := interface{}(x.GetVsock()).(slog.LogValuer); ok {
// 			attrs = append(attrs, slog.Attr{Key: "vsock", Value: msgValue.LogValue()})
// 		} else {
// 			attrs = append(attrs, slog.Any("vsock", x.GetVsock()))
// 		}
// 	case RuncIO_Unix_case:
// 		if msgValue, ok := interface{}(x.GetUnix()).(slog.LogValuer); ok {
// 			attrs = append(attrs, slog.Attr{Key: "unix", Value: msgValue.LogValue()})
// 		} else {
// 			attrs = append(attrs, slog.Any("unix", x.GetUnix()))
// 		}
// 	}
// 	return slog.GroupValue(attrs...)
// }
